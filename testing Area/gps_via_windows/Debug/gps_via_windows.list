
gps_via_windows.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08007d08  08007d08  00017d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800823c  0800823c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800823c  0800823c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800823c  0800823c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800823c  0800823c  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200001e0  08008420  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08008420  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afb8  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c3a  00000000  00000000  0002b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  0002cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000958  00000000  00000000  0002d810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001838b  00000000  00000000  0002e168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088fb  00000000  00000000  000464f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000857ef  00000000  00000000  0004edee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d45dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  000d4658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cf0 	.word	0x08007cf0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007cf0 	.word	0x08007cf0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <GPS_p>:
#include "GPS.h"

void GPS_p(){
 8000b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b6c:	b095      	sub	sp, #84	; 0x54
 8000b6e:	af0e      	add	r7, sp, #56	; 0x38
    //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    //Reset aller variablen, falls es was schief geht steht überall null
    GPS.valid = false;
 8000b70:	4b70      	ldr	r3, [pc, #448]	; (8000d34 <GPS_p+0x1cc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    GPS.lat,GPS.lon,GPS.hdop,GPS.alt,GPS.bla,GPS.index_end,GPS.hour,GPS.min,GPS.sec,GPS.millis,GPS.sats,GPS.checksum,GPS.checksum_calc = 0;
 8000b78:	4b6e      	ldr	r3, [pc, #440]	; (8000d34 <GPS_p+0x1cc>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

    if (strstr(GPS.message, "$GNGGA")){
 8000b80:	4b6c      	ldr	r3, [pc, #432]	; (8000d34 <GPS_p+0x1cc>)
 8000b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b84:	496c      	ldr	r1, [pc, #432]	; (8000d38 <GPS_p+0x1d0>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f003 f963 	bl	8003e52 <strstr>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80cb 	beq.w	8000d2a <GPS_p+0x1c2>
        //Valid message in stream
        //Beispiel von Position zuhause $GNGGA,151017.00,4916.72813,N,01127.64911,E,1,09,0.93,435.5,M,46.6,M,,*4A
        GPS.message2 = strstr(GPS.message,"$GNGGA");         //pointer auf begin des GNGGA satzes setzen
 8000b94:	4b67      	ldr	r3, [pc, #412]	; (8000d34 <GPS_p+0x1cc>)
 8000b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b98:	4967      	ldr	r1, [pc, #412]	; (8000d38 <GPS_p+0x1d0>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 f959 	bl	8003e52 <strstr>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b64      	ldr	r3, [pc, #400]	; (8000d34 <GPS_p+0x1cc>)
 8000ba4:	64da      	str	r2, [r3, #76]	; 0x4c
        sscanf(GPS.message2, "$GNGGA,%2hd%2hd%2hd.%2hd,%lf,%c,%lf,%c,%hd,%hd,%lf,%lf,M,%lf,M,,*%x",&GPS.hour,&GPS.min,&GPS.sec,&GPS.millis,&GPS.lat,&GPS.NS_ind,&GPS.lon,&GPS.EW_ind,&GPS.fixtype,&GPS.sats,&GPS.hdop,&GPS.alt,&GPS.bla,&GPS.checksum);
 8000ba6:	4b63      	ldr	r3, [pc, #396]	; (8000d34 <GPS_p+0x1cc>)
 8000ba8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000baa:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <GPS_p+0x1d4>)
 8000bac:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bae:	4b64      	ldr	r3, [pc, #400]	; (8000d40 <GPS_p+0x1d8>)
 8000bb0:	930a      	str	r3, [sp, #40]	; 0x28
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <GPS_p+0x1dc>)
 8000bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb6:	4b64      	ldr	r3, [pc, #400]	; (8000d48 <GPS_p+0x1e0>)
 8000bb8:	9308      	str	r3, [sp, #32]
 8000bba:	4b64      	ldr	r3, [pc, #400]	; (8000d4c <GPS_p+0x1e4>)
 8000bbc:	9307      	str	r3, [sp, #28]
 8000bbe:	4b64      	ldr	r3, [pc, #400]	; (8000d50 <GPS_p+0x1e8>)
 8000bc0:	9306      	str	r3, [sp, #24]
 8000bc2:	4b64      	ldr	r3, [pc, #400]	; (8000d54 <GPS_p+0x1ec>)
 8000bc4:	9305      	str	r3, [sp, #20]
 8000bc6:	4b64      	ldr	r3, [pc, #400]	; (8000d58 <GPS_p+0x1f0>)
 8000bc8:	9304      	str	r3, [sp, #16]
 8000bca:	4b64      	ldr	r3, [pc, #400]	; (8000d5c <GPS_p+0x1f4>)
 8000bcc:	9303      	str	r3, [sp, #12]
 8000bce:	4b64      	ldr	r3, [pc, #400]	; (8000d60 <GPS_p+0x1f8>)
 8000bd0:	9302      	str	r3, [sp, #8]
 8000bd2:	4b64      	ldr	r3, [pc, #400]	; (8000d64 <GPS_p+0x1fc>)
 8000bd4:	9301      	str	r3, [sp, #4]
 8000bd6:	4b64      	ldr	r3, [pc, #400]	; (8000d68 <GPS_p+0x200>)
 8000bd8:	9300      	str	r3, [sp, #0]
 8000bda:	4b64      	ldr	r3, [pc, #400]	; (8000d6c <GPS_p+0x204>)
 8000bdc:	4a64      	ldr	r2, [pc, #400]	; (8000d70 <GPS_p+0x208>)
 8000bde:	4965      	ldr	r1, [pc, #404]	; (8000d74 <GPS_p+0x20c>)
 8000be0:	f003 f8c8 	bl	8003d74 <siscanf>

        printf("position %f %c , %f %c @ %f M\nfix_info:\nSATS: %d\nFIX: %d\nHDOP: %f\nchecksum: 0x%2hx\r\n",GPS.lat,GPS.NS_ind,GPS.lon,GPS.EW_ind,GPS.alt,GPS.sats,GPS.fixtype,GPS.hdop,GPS.checksum);
 8000be4:	4b53      	ldr	r3, [pc, #332]	; (8000d34 <GPS_p+0x1cc>)
 8000be6:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8000bea:	4b52      	ldr	r3, [pc, #328]	; (8000d34 <GPS_p+0x1cc>)
 8000bec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <GPS_p+0x1cc>)
 8000bf4:	f103 0410 	add.w	r4, r3, #16
 8000bf8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000bfc:	4a4d      	ldr	r2, [pc, #308]	; (8000d34 <GPS_p+0x1cc>)
 8000bfe:	f892 2045 	ldrb.w	r2, [r2, #69]	; 0x45
 8000c02:	60ba      	str	r2, [r7, #8]
 8000c04:	4a4b      	ldr	r2, [pc, #300]	; (8000d34 <GPS_p+0x1cc>)
 8000c06:	e9d2 1208 	ldrd	r1, r2, [r2, #32]
 8000c0a:	484a      	ldr	r0, [pc, #296]	; (8000d34 <GPS_p+0x1cc>)
 8000c0c:	f9b0 003e 	ldrsh.w	r0, [r0, #62]	; 0x3e
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	4848      	ldr	r0, [pc, #288]	; (8000d34 <GPS_p+0x1cc>)
 8000c14:	f9b0 003c 	ldrsh.w	r0, [r0, #60]	; 0x3c
 8000c18:	6038      	str	r0, [r7, #0]
 8000c1a:	4846      	ldr	r0, [pc, #280]	; (8000d34 <GPS_p+0x1cc>)
 8000c1c:	e9d0 5606 	ldrd	r5, r6, [r0, #24]
 8000c20:	4844      	ldr	r0, [pc, #272]	; (8000d34 <GPS_p+0x1cc>)
 8000c22:	f9b0 0040 	ldrsh.w	r0, [r0, #64]	; 0x40
 8000c26:	900c      	str	r0, [sp, #48]	; 0x30
 8000c28:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
 8000c2c:	683d      	ldr	r5, [r7, #0]
 8000c2e:	9509      	str	r5, [sp, #36]	; 0x24
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	9008      	str	r0, [sp, #32]
 8000c34:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8000c38:	68ba      	ldr	r2, [r7, #8]
 8000c3a:	9204      	str	r2, [sp, #16]
 8000c3c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	9300      	str	r3, [sp, #0]
 8000c44:	4642      	mov	r2, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	484b      	ldr	r0, [pc, #300]	; (8000d78 <GPS_p+0x210>)
 8000c4a:	f003 f857 	bl	8003cfc <iprintf>

        //Resette alles für Checksumme
        GPS.checksum_calc=0;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	; (8000d34 <GPS_p+0x1cc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        GPS.index_end=1;
 8000c56:	4b37      	ldr	r3, [pc, #220]	; (8000d34 <GPS_p+0x1cc>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	865a      	strh	r2, [r3, #50]	; 0x32
        char x = 'A';
 8000c5c:	2341      	movs	r3, #65	; 0x41
 8000c5e:	75fb      	strb	r3, [r7, #23]

        //solange das zeichen kein * ist weiter prüfen und den index mit hoch zählen
        while(x!= '*'){
 8000c60:	e010      	b.n	8000c84 <GPS_p+0x11c>
            GPS.index_end++;
 8000c62:	4b34      	ldr	r3, [pc, #208]	; (8000d34 <GPS_p+0x1cc>)
 8000c64:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	b21a      	sxth	r2, r3
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <GPS_p+0x1cc>)
 8000c72:	865a      	strh	r2, [r3, #50]	; 0x32
            x = GPS.message2[GPS.index_end];
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <GPS_p+0x1cc>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <GPS_p+0x1cc>)
 8000c7a:	f9b2 2032 	ldrsh.w	r2, [r2, #50]	; 0x32
 8000c7e:	4413      	add	r3, r2
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	75fb      	strb	r3, [r7, #23]
        while(x!= '*'){
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	2b2a      	cmp	r3, #42	; 0x2a
 8000c88:	d1eb      	bne.n	8000c62 <GPS_p+0xfa>
        }

        //warum -2 erklärt sich mir nicht ganz
        GPS.index_end -=2;
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <GPS_p+0x1cc>)
 8000c8c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3b02      	subs	r3, #2
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	b21a      	sxth	r2, r3
 8000c98:	4b26      	ldr	r3, [pc, #152]	; (8000d34 <GPS_p+0x1cc>)
 8000c9a:	865a      	strh	r2, [r3, #50]	; 0x32

        //Exclusiv ODER verknüpfung aller empfangenen Zeichen im Satz bildet die Checksumme
        for (int i=1; i<GPS.index_end;i++){
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	e010      	b.n	8000cc4 <GPS_p+0x15c>
            GPS.checksum_calc=GPS.checksum_calc^GPS.message2[i];
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <GPS_p+0x1cc>)
 8000ca4:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <GPS_p+0x1cc>)
 8000caa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	440b      	add	r3, r1
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4053      	eors	r3, r2
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <GPS_p+0x1cc>)
 8000cba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        for (int i=1; i<GPS.index_end;i++){
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <GPS_p+0x1cc>)
 8000cc6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000cca:	461a      	mov	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	dbe7      	blt.n	8000ca2 <GPS_p+0x13a>

        }
            printf("berechnete checksumme: 0x%x",GPS.checksum_calc);
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <GPS_p+0x1cc>)
 8000cd4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4828      	ldr	r0, [pc, #160]	; (8000d7c <GPS_p+0x214>)
 8000cdc:	f003 f80e 	bl	8003cfc <iprintf>

        //Wenn die empfangene Chekcsumme = berechnette Checksumme sind die Daten Korrekt
            if(GPS.checksum_calc==GPS.checksum){
 8000ce0:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <GPS_p+0x1cc>)
 8000ce2:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <GPS_p+0x1cc>)
 8000ce8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d11c      	bne.n	8000d2a <GPS_p+0x1c2>
                GPS.valid = true;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <GPS_p+0x1cc>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
                GPS.FIXTIME = (HAL_GetTick());
 8000cf8:	f000 fcd8 	bl	80016ac <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <GPS_p+0x1cc>)
 8000d00:	601a      	str	r2, [r3, #0]
            printf("\nZEIT UTC: %d:%d:%d.%d\n",GPS.hour,GPS.min,GPS.sec,GPS.millis);
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <GPS_p+0x1cc>)
 8000d04:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <GPS_p+0x1cc>)
 8000d0c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000d10:	461a      	mov	r2, r3
 8000d12:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <GPS_p+0x1cc>)
 8000d14:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000d18:	4618      	mov	r0, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <GPS_p+0x1cc>)
 8000d1c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	4603      	mov	r3, r0
 8000d24:	4816      	ldr	r0, [pc, #88]	; (8000d80 <GPS_p+0x218>)
 8000d26:	f002 ffe9 	bl	8003cfc <iprintf>
            }
    }


}
 8000d2a:	bf00      	nop
 8000d2c:	371c      	adds	r7, #28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d34:	20000308 	.word	0x20000308
 8000d38:	08007d08 	.word	0x08007d08
 8000d3c:	20000348 	.word	0x20000348
 8000d40:	20000330 	.word	0x20000330
 8000d44:	20000328 	.word	0x20000328
 8000d48:	20000320 	.word	0x20000320
 8000d4c:	20000346 	.word	0x20000346
 8000d50:	20000344 	.word	0x20000344
 8000d54:	2000034d 	.word	0x2000034d
 8000d58:	20000318 	.word	0x20000318
 8000d5c:	2000034c 	.word	0x2000034c
 8000d60:	20000310 	.word	0x20000310
 8000d64:	20000342 	.word	0x20000342
 8000d68:	20000340 	.word	0x20000340
 8000d6c:	2000033e 	.word	0x2000033e
 8000d70:	2000033c 	.word	0x2000033c
 8000d74:	08007d10 	.word	0x08007d10
 8000d78:	08007d54 	.word	0x08007d54
 8000d7c:	08007dac 	.word	0x08007dac
 8000d80:	08007dc8 	.word	0x08007dc8

08000d84 <HAL_UART_RxCpltCallback>:
//GPS.message = "sdfddsffdsfdsdsfddfd$GNGGA,185824.00,2605.0247881,N,08014.3097082,W,4,14,0.7,-24.343,M,,,0.59,0402*36\rdfseeerddddqq3w\n"; //Dummy Wert schreiben
//Also kommt checksummen berechnung und parsing mit müll vor und nach den daten klar


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, Rx_data, RX_BUFFER_SIZE);
 8000d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d90:	4909      	ldr	r1, [pc, #36]	; (8000db8 <HAL_UART_RxCpltCallback+0x34>)
 8000d92:	480a      	ldr	r0, [pc, #40]	; (8000dbc <HAL_UART_RxCpltCallback+0x38>)
 8000d94:	f001 fdf9 	bl	800298a <HAL_UART_Receive_IT>
  GPS.message=Rx_data;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_UART_RxCpltCallback+0x3c>)
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_UART_RxCpltCallback+0x34>)
 8000d9c:	649a      	str	r2, [r3, #72]	; 0x48
  update = true;
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_UART_RxCpltCallback+0x40>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <HAL_UART_RxCpltCallback+0x44>)
 8000daa:	f000 ffa1 	bl	8001cf0 <HAL_GPIO_TogglePin>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000208 	.word	0x20000208
 8000dbc:	200004dc 	.word	0x200004dc
 8000dc0:	20000308 	.word	0x20000308
 8000dc4:	20000358 	.word	0x20000358
 8000dc8:	40011000 	.word	0x40011000

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dd0:	b09b      	sub	sp, #108	; 0x6c
 8000dd2:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fc12 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f8d8 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f000 f99a 	bl	8001114 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000de0:	f000 f944 	bl	800106c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000de4:	f000 f96c 	bl	80010c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000de8:	f000 f912 	bl	8001010 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT (&huart1, Rx_data, RX_BUFFER_SIZE);
 8000dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000df0:	495c      	ldr	r1, [pc, #368]	; (8000f64 <main+0x198>)
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <main+0x19c>)
 8000df4:	f001 fdc9 	bl	800298a <HAL_UART_Receive_IT>
  uint8_t ubxcfgrate[] = { // UBX-CFG-RATE 10 Hz Measurement/Navigation
 8000df8:	4b5c      	ldr	r3, [pc, #368]	; (8000f6c <main+0x1a0>)
 8000dfa:	f107 0414 	add.w	r4, r7, #20
 8000dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e00:	c407      	stmia	r4!, {r0, r1, r2}
 8000e02:	8023      	strh	r3, [r4, #0]
  0xB5,0x62,0x06,0x08,0x06,0x00,

  0x64,0x00,0x01,0x00,0x01,0x00, // Payload

  0x7A,0x12 }; // Checksum
  HAL_UART_Transmit(&huart1,(uint8_t *)ubxcfgrate,14,200);
 8000e04:	f107 0114 	add.w	r1, r7, #20
 8000e08:	23c8      	movs	r3, #200	; 0xc8
 8000e0a:	220e      	movs	r2, #14
 8000e0c:	4856      	ldr	r0, [pc, #344]	; (8000f68 <main+0x19c>)
 8000e0e:	f001 fd2a 	bl	8002866 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	  if(update){
 8000e12:	4b57      	ldr	r3, [pc, #348]	; (8000f70 <main+0x1a4>)
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d007      	beq.n	8000e2a <main+0x5e>
	  		  update=false;
 8000e1a:	4b55      	ldr	r3, [pc, #340]	; (8000f70 <main+0x1a4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
	  		  GPS_p();
 8000e20:	f7ff fea2 	bl	8000b68 <GPS_p>
	  		  printed=false;
 8000e24:	4b53      	ldr	r3, [pc, #332]	; (8000f74 <main+0x1a8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
	  	  }
	  	  long int test;
	      test = HAL_GetTick();                                                        //Hole Zeit von Systicktimer
 8000e2a:	f000 fc3f 	bl	80016ac <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
	      if(!((GPS.FIXTIME+1000) >test)){GPS.valid = false;}                          //Fix verfällt noch 1 sekunde
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <main+0x1ac>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	db03      	blt.n	8000e48 <main+0x7c>
 8000e40:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <main+0x1ac>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	    if(GPS.valid&& !printed){
 8000e48:	4b4b      	ldr	r3, [pc, #300]	; (8000f78 <main+0x1ac>)
 8000e4a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0df      	beq.n	8000e12 <main+0x46>
 8000e52:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <main+0x1a8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f083 0301 	eor.w	r3, r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0d8      	beq.n	8000e12 <main+0x46>
	    	////printf("%d:%d:%d.%d \n %lf  %c\n %lf  %c\n", GPS.hours,GPS.mins,GPS.secs,GPS.millis,GPS.latitude,GPS.NS_ind, GPS.longitude,GPS.EW_ind);
	    	sprintf(printbuffer,"%d:%d:%d.%d \n latitude:%lf NS_ind: %c\n longitude:%lf SE_ind: %c\nHDOP : %lf\nSats : %d\nAltitude:  %lf M\n", GPS.hour,GPS.min,GPS.sec,GPS.millis,GPS.lat,GPS.NS_ind, GPS.lon,GPS.EW_ind,GPS.hdop,GPS.sats,GPS.alt);
 8000e60:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <main+0x1ac>)
 8000e62:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000e66:	469c      	mov	ip, r3
 8000e68:	4b43      	ldr	r3, [pc, #268]	; (8000f78 <main+0x1ac>)
 8000e6a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000e6e:	469e      	mov	lr, r3
 8000e70:	4b41      	ldr	r3, [pc, #260]	; (8000f78 <main+0x1ac>)
 8000e72:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000e76:	4618      	mov	r0, r3
 8000e78:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <main+0x1ac>)
 8000e7a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	4b3d      	ldr	r3, [pc, #244]	; (8000f78 <main+0x1ac>)
 8000e82:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <main+0x1ac>)
 8000e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <main+0x1ac>)
 8000e90:	e9d3 5604 	ldrd	r5, r6, [r3, #16]
 8000e94:	4b38      	ldr	r3, [pc, #224]	; (8000f78 <main+0x1ac>)
 8000e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <main+0x1ac>)
 8000e9e:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8000ea2:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <main+0x1ac>)
 8000ea4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <main+0x1ac>)
 8000eac:	f103 0420 	add.w	r4, r3, #32
 8000eb0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8000eb4:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8000eb8:	683c      	ldr	r4, [r7, #0]
 8000eba:	940c      	str	r4, [sp, #48]	; 0x30
 8000ebc:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8000ec0:	687c      	ldr	r4, [r7, #4]
 8000ec2:	9408      	str	r4, [sp, #32]
 8000ec4:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8000ec8:	68bc      	ldr	r4, [r7, #8]
 8000eca:	9404      	str	r4, [sp, #16]
 8000ecc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	9000      	str	r0, [sp, #0]
 8000ed6:	4673      	mov	r3, lr
 8000ed8:	4662      	mov	r2, ip
 8000eda:	4928      	ldr	r1, [pc, #160]	; (8000f7c <main+0x1b0>)
 8000edc:	4828      	ldr	r0, [pc, #160]	; (8000f80 <main+0x1b4>)
 8000ede:	f002 ff29 	bl	8003d34 <siprintf>
	    	//HAL_UART_Transmit(&huart2,(uint8_t *)GPS.message,strlen(GPS.message),1000);
	    	HAL_UART_Transmit(&huart2,(uint8_t *) printbuffer,strlen(printbuffer),100);
 8000ee2:	4827      	ldr	r0, [pc, #156]	; (8000f80 <main+0x1b4>)
 8000ee4:	f7ff f934 	bl	8000150 <strlen>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	4924      	ldr	r1, [pc, #144]	; (8000f80 <main+0x1b4>)
 8000ef0:	4824      	ldr	r0, [pc, #144]	; (8000f84 <main+0x1b8>)
 8000ef2:	f001 fcb8 	bl	8002866 <HAL_UART_Transmit>
	        sprintf(printbuffer,"indexbegin: %d       indexend:  %d\nChecksum: 0x%x    Berechnete Checksum: 0x%x\n",GPS.index_begin,GPS.index_end,GPS.checksum,GPS.checksum_calc);
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <main+0x1ac>)
 8000ef8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8000efc:	4619      	mov	r1, r3
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <main+0x1ac>)
 8000f00:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8000f04:	4618      	mov	r0, r3
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <main+0x1ac>)
 8000f08:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <main+0x1ac>)
 8000f10:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	9200      	str	r2, [sp, #0]
 8000f18:	4603      	mov	r3, r0
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	491a      	ldr	r1, [pc, #104]	; (8000f88 <main+0x1bc>)
 8000f1e:	4818      	ldr	r0, [pc, #96]	; (8000f80 <main+0x1b4>)
 8000f20:	f002 ff08 	bl	8003d34 <siprintf>
	        HAL_UART_Transmit(&huart2,(uint8_t*) printbuffer,strlen(printbuffer),200);
 8000f24:	4816      	ldr	r0, [pc, #88]	; (8000f80 <main+0x1b4>)
 8000f26:	f7ff f913 	bl	8000150 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	23c8      	movs	r3, #200	; 0xc8
 8000f30:	4913      	ldr	r1, [pc, #76]	; (8000f80 <main+0x1b4>)
 8000f32:	4814      	ldr	r0, [pc, #80]	; (8000f84 <main+0x1b8>)
 8000f34:	f001 fc97 	bl	8002866 <HAL_UART_Transmit>
	        printed = true;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <main+0x1a8>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
	    	switch (GPS.fixtype){
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <main+0x1ac>)
 8000f40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d007      	beq.n	8000f58 <main+0x18c>
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d007      	beq.n	8000f5c <main+0x190>
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <main+0x194>
	        	case 2:
	       		////printf("\n 3D fix\n");
	        	break;
	        default:
	        	////printf ("ERROR\n");
	        	HAL_Delay(100);
 8000f50:	2064      	movs	r0, #100	; 0x64
 8000f52:	f000 fbb5 	bl	80016c0 <HAL_Delay>
 8000f56:	e75c      	b.n	8000e12 <main+0x46>
	        	break;
 8000f58:	bf00      	nop
 8000f5a:	e75a      	b.n	8000e12 <main+0x46>
	        	break;
 8000f5c:	bf00      	nop
 8000f5e:	e758      	b.n	8000e12 <main+0x46>
	       	 	break;
 8000f60:	bf00      	nop
  {
 8000f62:	e756      	b.n	8000e12 <main+0x46>
 8000f64:	20000208 	.word	0x20000208
 8000f68:	200004dc 	.word	0x200004dc
 8000f6c:	08007eb8 	.word	0x08007eb8
 8000f70:	20000358 	.word	0x20000358
 8000f74:	2000051c 	.word	0x2000051c
 8000f78:	20000308 	.word	0x20000308
 8000f7c:	08007e00 	.word	0x08007e00
 8000f80:	2000035c 	.word	0x2000035c
 8000f84:	20000520 	.word	0x20000520
 8000f88:	08007e68 	.word	0x08007e68

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b090      	sub	sp, #64	; 0x40
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 f876 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fc2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc8:	f107 0318 	add.w	r3, r7, #24
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 ffe1 	bl	8001f94 <HAL_RCC_OscConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000fd8:	f000 f912 	bl	8001200 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fdc:	230f      	movs	r3, #15
 8000fde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fa4c 	bl	8002494 <HAL_RCC_ClockConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001002:	f000 f8fd 	bl	8001200 <Error_Handler>
  }
}
 8001006:	bf00      	nop
 8001008:	3740      	adds	r7, #64	; 0x40
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <MX_I2C1_Init+0x50>)
 8001016:	4a13      	ldr	r2, [pc, #76]	; (8001064 <MX_I2C1_Init+0x54>)
 8001018:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_I2C1_Init+0x50>)
 800101c:	4a12      	ldr	r2, [pc, #72]	; (8001068 <MX_I2C1_Init+0x58>)
 800101e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_I2C1_Init+0x50>)
 800102e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001032:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <MX_I2C1_Init+0x50>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_I2C1_Init+0x50>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <MX_I2C1_Init+0x50>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_I2C1_Init+0x50>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <MX_I2C1_Init+0x50>)
 800104e:	f000 fe69 	bl	8001d24 <HAL_I2C_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001058:	f000 f8d2 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000488 	.word	0x20000488
 8001064:	40005400 	.word	0x40005400
 8001068:	00061a80 	.word	0x00061a80

0800106c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <MX_USART1_UART_Init+0x50>)
 8001074:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4805      	ldr	r0, [pc, #20]	; (80010b8 <MX_USART1_UART_Init+0x4c>)
 80010a4:	f001 fb92 	bl	80027cc <HAL_UART_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010ae:	f000 f8a7 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200004dc 	.word	0x200004dc
 80010bc:	40013800 	.word	0x40013800

080010c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c4:	4b11      	ldr	r3, [pc, #68]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_USART2_UART_Init+0x50>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_USART2_UART_Init+0x4c>)
 80010f8:	f001 fb68 	bl	80027cc <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001102:	f000 f87d 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000520 	.word	0x20000520
 8001110:	40004400 	.word	0x40004400

08001114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a30      	ldr	r2, [pc, #192]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a2a      	ldr	r2, [pc, #168]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a24      	ldr	r2, [pc, #144]	; (80011f0 <MX_GPIO_Init+0xdc>)
 800115e:	f043 0308 	orr.w	r3, r3, #8
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b22      	ldr	r3, [pc, #136]	; (80011f0 <MX_GPIO_Init+0xdc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	481f      	ldr	r0, [pc, #124]	; (80011f4 <MX_GPIO_Init+0xe0>)
 8001178:	f000 fda2 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	21f0      	movs	r1, #240	; 0xf0
 8001180:	481d      	ldr	r0, [pc, #116]	; (80011f8 <MX_GPIO_Init+0xe4>)
 8001182:	f000 fd9d 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_E_Pin|LCD_RW_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2138      	movs	r1, #56	; 0x38
 800118a:	481c      	ldr	r0, [pc, #112]	; (80011fc <MX_GPIO_Init+0xe8>)
 800118c:	f000 fd98 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001190:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001194:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2302      	movs	r3, #2
 80011a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	4619      	mov	r1, r3
 80011a8:	4812      	ldr	r0, [pc, #72]	; (80011f4 <MX_GPIO_Init+0xe0>)
 80011aa:	f000 fc2f 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80011ae:	23f0      	movs	r3, #240	; 0xf0
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_GPIO_Init+0xe4>)
 80011c6:	f000 fc21 	bl	8001a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_E_Pin LCD_RW_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RW_Pin|LCD_RS_Pin;
 80011ca:	2338      	movs	r3, #56	; 0x38
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_GPIO_Init+0xe8>)
 80011e2:	f000 fc13 	bl	8001a0c <HAL_GPIO_Init>

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40011000 	.word	0x40011000
 80011f8:	40010800 	.word	0x40010800
 80011fc:	40010c00 	.word	0x40010c00

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001206:	e7fe      	b.n	8001206 <Error_Handler+0x6>

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	4a14      	ldr	r2, [pc, #80]	; (8001264 <HAL_MspInit+0x5c>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6193      	str	r3, [r2, #24]
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_MspInit+0x5c>)
 800121c:	699b      	ldr	r3, [r3, #24]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_MspInit+0x5c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_MspInit+0x5c>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_MspInit+0x60>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_MspInit+0x60>)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a15      	ldr	r2, [pc, #84]	; (80012dc <HAL_I2C_MspInit+0x70>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d123      	bne.n	80012d4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <HAL_I2C_MspInit+0x74>)
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_I2C_MspInit+0x74>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6193      	str	r3, [r2, #24]
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_I2C_MspInit+0x74>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012a4:	23c0      	movs	r3, #192	; 0xc0
 80012a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a8:	2312      	movs	r3, #18
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <HAL_I2C_MspInit+0x78>)
 80012b8:	f000 fba8 	bl	8001a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012bc:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <HAL_I2C_MspInit+0x74>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	4a07      	ldr	r2, [pc, #28]	; (80012e0 <HAL_I2C_MspInit+0x74>)
 80012c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c6:	61d3      	str	r3, [r2, #28]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_I2C_MspInit+0x74>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40005400 	.word	0x40005400
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010c00 	.word	0x40010c00

080012e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0318 	add.w	r3, r7, #24
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a3b      	ldr	r2, [pc, #236]	; (80013f0 <HAL_UART_MspInit+0x108>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d13a      	bne.n	800137e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	4619      	mov	r1, r3
 800134c:	482a      	ldr	r0, [pc, #168]	; (80013f8 <HAL_UART_MspInit+0x110>)
 800134e:	f000 fb5d 	bl	8001a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0318 	add.w	r3, r7, #24
 8001364:	4619      	mov	r1, r3
 8001366:	4824      	ldr	r0, [pc, #144]	; (80013f8 <HAL_UART_MspInit+0x110>)
 8001368:	f000 fb50 	bl	8001a0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2025      	movs	r0, #37	; 0x25
 8001372:	f000 fa9e 	bl	80018b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001376:	2025      	movs	r0, #37	; 0x25
 8001378:	f000 fab7 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800137c:	e034      	b.n	80013e8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1e      	ldr	r2, [pc, #120]	; (80013fc <HAL_UART_MspInit+0x114>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d12f      	bne.n	80013e8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	4a19      	ldr	r2, [pc, #100]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 800138e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001392:	61d3      	str	r3, [r2, #28]
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a13      	ldr	r2, [pc, #76]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_UART_MspInit+0x10c>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b8:	2304      	movs	r3, #4
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4619      	mov	r1, r3
 80013ca:	480b      	ldr	r0, [pc, #44]	; (80013f8 <HAL_UART_MspInit+0x110>)
 80013cc:	f000 fb1e 	bl	8001a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013d0:	2308      	movs	r3, #8
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <HAL_UART_MspInit+0x110>)
 80013e4:	f000 fb12 	bl	8001a0c <HAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40013800 	.word	0x40013800
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40004400 	.word	0x40004400

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <NMI_Handler+0x4>

08001406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001446:	f000 f91f 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001454:	4802      	ldr	r0, [pc, #8]	; (8001460 <USART1_IRQHandler+0x10>)
 8001456:	f001 faed 	bl	8002a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200004dc 	.word	0x200004dc

08001464 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001476:	f3af 8000 	nop.w
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
	}

return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
	}
	return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	605a      	str	r2, [r3, #4]
	return 0;
 80014fe:	2300      	movs	r3, #0
}
 8001500:	4618      	mov	r0, r3
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr

0800150a <_isatty>:

int _isatty(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
	return 1;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	60f8      	str	r0, [r7, #12]
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
	return 0;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f001 fd66 	bl	8003038 <__errno>
 800156c:	4602      	mov	r2, r0
 800156e:	230c      	movs	r3, #12
 8001570:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	4a05      	ldr	r2, [pc, #20]	; (800159c <_sbrk+0x64>)
 8001588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20005000 	.word	0x20005000
 8001598:	00000400 	.word	0x00000400
 800159c:	200001fc 	.word	0x200001fc
 80015a0:	20000568 	.word	0x20000568

080015a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015b2:	e003      	b.n	80015bc <LoopCopyDataInit>

080015b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015ba:	3104      	adds	r1, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015bc:	480a      	ldr	r0, [pc, #40]	; (80015e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015be:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015c4:	d3f6      	bcc.n	80015b4 <CopyDataInit>
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015c8:	e002      	b.n	80015d0 <LoopFillZerobss>

080015ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015cc:	f842 3b04 	str.w	r3, [r2], #4

080015d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015d4:	d3f9      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d6:	f7ff ffe5 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015da:	f001 fd33 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015de:	f7ff fbf5 	bl	8000dcc <main>
  bx lr
 80015e2:	4770      	bx	lr
  ldr r3, =_sidata
 80015e4:	08008244 	.word	0x08008244
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80015f0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80015f4:	20000568 	.word	0x20000568

080015f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC1_2_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x28>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x28>)
 8001606:	f043 0310 	orr.w	r3, r3, #16
 800160a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f945 	bl	800189c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fdf6 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f95d 	bl	8001906 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f925 	bl	80018b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000008 	.word	0x20000008
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x1c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x20>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_IncTick+0x20>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000560 	.word	0x20000560

080016ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  return uwTick;
 80016b0:	4b02      	ldr	r3, [pc, #8]	; (80016bc <HAL_GetTick+0x10>)
 80016b2:	681b      	ldr	r3, [r3, #0]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	20000560 	.word	0x20000560

080016c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fff0 	bl	80016ac <HAL_GetTick>
 80016cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d8:	d005      	beq.n	80016e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_Delay+0x40>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4413      	add	r3, r2
 80016e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	bf00      	nop
 80016e8:	f7ff ffe0 	bl	80016ac <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d8f7      	bhi.n	80016e8 <HAL_Delay+0x28>
  {
  }
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000008 	.word	0x20000008

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db0b      	blt.n	8001792 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	4906      	ldr	r1, [pc, #24]	; (800179c <__NVIC_EnableIRQ+0x34>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001868:	d301      	bcc.n	800186e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186a:	2301      	movs	r3, #1
 800186c:	e00f      	b.n	800188e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <SysTick_Config+0x40>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001876:	210f      	movs	r1, #15
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f7ff ff90 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <SysTick_Config+0x40>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001886:	4b04      	ldr	r3, [pc, #16]	; (8001898 <SysTick_Config+0x40>)
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	e000e010 	.word	0xe000e010

0800189c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ff2d 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	4603      	mov	r3, r0
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
 80018be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff42 	bl	800174c <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff35 	bl	8001768 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa2 	bl	8001858 <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001932:	2b02      	cmp	r3, #2
 8001934:	d005      	beq.n	8001942 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2204      	movs	r2, #4
 800193a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e051      	b.n	80019e6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 020e 	bic.w	r2, r2, #14
 8001950:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_DMA_Abort_IT+0xd0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d029      	beq.n	80019c0 <HAL_DMA_Abort_IT+0xa0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <HAL_DMA_Abort_IT+0xd4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d022      	beq.n	80019bc <HAL_DMA_Abort_IT+0x9c>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a1f      	ldr	r2, [pc, #124]	; (80019f8 <HAL_DMA_Abort_IT+0xd8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d01a      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x96>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <HAL_DMA_Abort_IT+0xdc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d012      	beq.n	80019b0 <HAL_DMA_Abort_IT+0x90>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <HAL_DMA_Abort_IT+0xe0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d00a      	beq.n	80019aa <HAL_DMA_Abort_IT+0x8a>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1a      	ldr	r2, [pc, #104]	; (8001a04 <HAL_DMA_Abort_IT+0xe4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d102      	bne.n	80019a4 <HAL_DMA_Abort_IT+0x84>
 800199e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80019a2:	e00e      	b.n	80019c2 <HAL_DMA_Abort_IT+0xa2>
 80019a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019a8:	e00b      	b.n	80019c2 <HAL_DMA_Abort_IT+0xa2>
 80019aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019ae:	e008      	b.n	80019c2 <HAL_DMA_Abort_IT+0xa2>
 80019b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b4:	e005      	b.n	80019c2 <HAL_DMA_Abort_IT+0xa2>
 80019b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ba:	e002      	b.n	80019c2 <HAL_DMA_Abort_IT+0xa2>
 80019bc:	2310      	movs	r3, #16
 80019be:	e000      	b.n	80019c2 <HAL_DMA_Abort_IT+0xa2>
 80019c0:	2301      	movs	r3, #1
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <HAL_DMA_Abort_IT+0xe8>)
 80019c4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	4798      	blx	r3
    } 
  }
  return status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40020008 	.word	0x40020008
 80019f4:	4002001c 	.word	0x4002001c
 80019f8:	40020030 	.word	0x40020030
 80019fc:	40020044 	.word	0x40020044
 8001a00:	40020058 	.word	0x40020058
 8001a04:	4002006c 	.word	0x4002006c
 8001a08:	40020000 	.word	0x40020000

08001a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b08b      	sub	sp, #44	; 0x2c
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	e127      	b.n	8001c70 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a20:	2201      	movs	r2, #1
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	f040 8116 	bne.w	8001c6a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d034      	beq.n	8001ab0 <HAL_GPIO_Init+0xa4>
 8001a46:	2b12      	cmp	r3, #18
 8001a48:	d80d      	bhi.n	8001a66 <HAL_GPIO_Init+0x5a>
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d02b      	beq.n	8001aa6 <HAL_GPIO_Init+0x9a>
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d804      	bhi.n	8001a5c <HAL_GPIO_Init+0x50>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d031      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d01c      	beq.n	8001a94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a5a:	e048      	b.n	8001aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d043      	beq.n	8001ae8 <HAL_GPIO_Init+0xdc>
 8001a60:	2b11      	cmp	r3, #17
 8001a62:	d01b      	beq.n	8001a9c <HAL_GPIO_Init+0x90>
          break;
 8001a64:	e043      	b.n	8001aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a66:	4a89      	ldr	r2, [pc, #548]	; (8001c8c <HAL_GPIO_Init+0x280>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d026      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a6c:	4a87      	ldr	r2, [pc, #540]	; (8001c8c <HAL_GPIO_Init+0x280>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d806      	bhi.n	8001a80 <HAL_GPIO_Init+0x74>
 8001a72:	4a87      	ldr	r2, [pc, #540]	; (8001c90 <HAL_GPIO_Init+0x284>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d020      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a78:	4a86      	ldr	r2, [pc, #536]	; (8001c94 <HAL_GPIO_Init+0x288>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d01d      	beq.n	8001aba <HAL_GPIO_Init+0xae>
          break;
 8001a7e:	e036      	b.n	8001aee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001a80:	4a85      	ldr	r2, [pc, #532]	; (8001c98 <HAL_GPIO_Init+0x28c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d019      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a86:	4a85      	ldr	r2, [pc, #532]	; (8001c9c <HAL_GPIO_Init+0x290>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d016      	beq.n	8001aba <HAL_GPIO_Init+0xae>
 8001a8c:	4a84      	ldr	r2, [pc, #528]	; (8001ca0 <HAL_GPIO_Init+0x294>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xae>
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e028      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e023      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01e      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e019      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e012      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e008      	b.n	8001aee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2bff      	cmp	r3, #255	; 0xff
 8001af2:	d801      	bhi.n	8001af8 <HAL_GPIO_Init+0xec>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	e001      	b.n	8001afc <HAL_GPIO_Init+0xf0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2bff      	cmp	r3, #255	; 0xff
 8001b02:	d802      	bhi.n	8001b0a <HAL_GPIO_Init+0xfe>
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x104>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3b08      	subs	r3, #8
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	210f      	movs	r1, #15
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	401a      	ands	r2, r3
 8001b22:	6a39      	ldr	r1, [r7, #32]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8096 	beq.w	8001c6a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3e:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_GPIO_Init+0x298>)
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x298>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6193      	str	r3, [r2, #24]
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_GPIO_Init+0x298>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b56:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <HAL_GPIO_Init+0x29c>)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4013      	ands	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4b      	ldr	r2, [pc, #300]	; (8001cac <HAL_GPIO_Init+0x2a0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x19e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4a      	ldr	r2, [pc, #296]	; (8001cb0 <HAL_GPIO_Init+0x2a4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x19a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a49      	ldr	r2, [pc, #292]	; (8001cb4 <HAL_GPIO_Init+0x2a8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x196>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a48      	ldr	r2, [pc, #288]	; (8001cb8 <HAL_GPIO_Init+0x2ac>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x192>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e004      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x1a0>
 8001baa:	2300      	movs	r3, #0
 8001bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bae:	f002 0203 	and.w	r2, r2, #3
 8001bb2:	0092      	lsls	r2, r2, #2
 8001bb4:	4093      	lsls	r3, r2
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbc:	493a      	ldr	r1, [pc, #232]	; (8001ca8 <HAL_GPIO_Init+0x29c>)
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd6:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4938      	ldr	r1, [pc, #224]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	4933      	ldr	r1, [pc, #204]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d006      	beq.n	8001c0c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	492e      	ldr	r1, [pc, #184]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
 8001c0a:	e006      	b.n	8001c1a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4929      	ldr	r1, [pc, #164]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c16:	4013      	ands	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c26:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	4924      	ldr	r1, [pc, #144]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
 8001c32:	e006      	b.n	8001c42 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	491f      	ldr	r1, [pc, #124]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	491a      	ldr	r1, [pc, #104]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]
 8001c5a:	e006      	b.n	8001c6a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4915      	ldr	r1, [pc, #84]	; (8001cbc <HAL_GPIO_Init+0x2b0>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f47f aed0 	bne.w	8001a20 <HAL_GPIO_Init+0x14>
  }
}
 8001c80:	bf00      	nop
 8001c82:	372c      	adds	r7, #44	; 0x2c
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	10210000 	.word	0x10210000
 8001c90:	10110000 	.word	0x10110000
 8001c94:	10120000 	.word	0x10120000
 8001c98:	10310000 	.word	0x10310000
 8001c9c:	10320000 	.word	0x10320000
 8001ca0:	10220000 	.word	0x10220000
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40010800 	.word	0x40010800
 8001cb0:	40010c00 	.word	0x40010c00
 8001cb4:	40011000 	.word	0x40011000
 8001cb8:	40011400 	.word	0x40011400
 8001cbc:	40010400 	.word	0x40010400

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	611a      	str	r2, [r3, #16]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d02:	887a      	ldrh	r2, [r7, #2]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	041a      	lsls	r2, r3, #16
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43d9      	mvns	r1, r3
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	400b      	ands	r3, r1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	611a      	str	r2, [r3, #16]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e11f      	b.n	8001f76 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff fa8e 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d88:	f000 fcda 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8001d8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4a7b      	ldr	r2, [pc, #492]	; (8001f80 <HAL_I2C_Init+0x25c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d807      	bhi.n	8001da8 <HAL_I2C_Init+0x84>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_I2C_Init+0x260>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf94      	ite	ls
 8001da0:	2301      	movls	r3, #1
 8001da2:	2300      	movhi	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	e006      	b.n	8001db6 <HAL_I2C_Init+0x92>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_I2C_Init+0x264>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	bf94      	ite	ls
 8001db0:	2301      	movls	r3, #1
 8001db2:	2300      	movhi	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e0db      	b.n	8001f76 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4a72      	ldr	r2, [pc, #456]	; (8001f8c <HAL_I2C_Init+0x268>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a64      	ldr	r2, [pc, #400]	; (8001f80 <HAL_I2C_Init+0x25c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d802      	bhi.n	8001df8 <HAL_I2C_Init+0xd4>
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	3301      	adds	r3, #1
 8001df6:	e009      	b.n	8001e0c <HAL_I2C_Init+0xe8>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	4a63      	ldr	r2, [pc, #396]	; (8001f90 <HAL_I2C_Init+0x26c>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4956      	ldr	r1, [pc, #344]	; (8001f80 <HAL_I2C_Init+0x25c>)
 8001e28:	428b      	cmp	r3, r1
 8001e2a:	d80d      	bhi.n	8001e48 <HAL_I2C_Init+0x124>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	bf38      	it	cc
 8001e44:	2304      	movcc	r3, #4
 8001e46:	e04f      	b.n	8001ee8 <HAL_I2C_Init+0x1c4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d111      	bne.n	8001e74 <HAL_I2C_Init+0x150>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	e012      	b.n	8001e9a <HAL_I2C_Init+0x176>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	1e58      	subs	r0, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	0099      	lsls	r1, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_I2C_Init+0x17e>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e022      	b.n	8001ee8 <HAL_I2C_Init+0x1c4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_I2C_Init+0x1a4>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1e58      	subs	r0, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	440b      	add	r3, r1
 8001eb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec6:	e00f      	b.n	8001ee8 <HAL_I2C_Init+0x1c4>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e58      	subs	r0, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	0099      	lsls	r1, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ee4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	6809      	ldr	r1, [r1, #0]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6911      	ldr	r1, [r2, #16]
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68d2      	ldr	r2, [r2, #12]
 8001f22:	4311      	orrs	r1, r2
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	000186a0 	.word	0x000186a0
 8001f84:	001e847f 	.word	0x001e847f
 8001f88:	003d08ff 	.word	0x003d08ff
 8001f8c:	431bde83 	.word	0x431bde83
 8001f90:	10624dd3 	.word	0x10624dd3

08001f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e26c      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8087 	beq.w	80020c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fb4:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d00c      	beq.n	8001fda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fc0:	4b8f      	ldr	r3, [pc, #572]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d112      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
 8001fcc:	4b8c      	ldr	r3, [pc, #560]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fda:	4b89      	ldr	r3, [pc, #548]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d06c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x12c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d168      	bne.n	80020c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e246      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x76>
 8001ffc:	4b80      	ldr	r3, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a7f      	ldr	r2, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e02e      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x98>
 8002012:	4b7b      	ldr	r3, [pc, #492]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a7a      	ldr	r2, [pc, #488]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e01d      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0xbc>
 8002036:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0xd4>
 8002050:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b68      	ldr	r3, [pc, #416]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a67      	ldr	r2, [pc, #412]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002066:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d013      	beq.n	8002098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fb1c 	bl	80016ac <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fb18 	bl	80016ac <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1fa      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0xe4>
 8002096:	e014      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7ff fb08 	bl	80016ac <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff fb04 	bl	80016ac <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1e6      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x10c>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d063      	beq.n	8002196 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ce:	4b4c      	ldr	r3, [pc, #304]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020da:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d116      	bne.n	8002120 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e1ba      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	4b3d      	ldr	r3, [pc, #244]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4939      	ldr	r1, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	e03a      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002128:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800212a:	2201      	movs	r2, #1
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fabd 	bl	80016ac <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff fab9 	bl	80016ac <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e19b      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]
 8002168:	e015      	b.n	8002196 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <HAL_RCC_OscConfig+0x270>)
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7ff fa9c 	bl	80016ac <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002178:	f7ff fa98 	bl	80016ac <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e17a      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	4b1d      	ldr	r3, [pc, #116]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d03a      	beq.n	8002218 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d019      	beq.n	80021de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021aa:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b0:	f7ff fa7c 	bl	80016ac <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b8:	f7ff fa78 	bl	80016ac <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e15a      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021d6:	2001      	movs	r0, #1
 80021d8:	f000 fada 	bl	8002790 <RCC_Delay>
 80021dc:	e01c      	b.n	8002218 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <HAL_RCC_OscConfig+0x274>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fa62 	bl	80016ac <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ea:	e00f      	b.n	800220c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fa5e 	bl	80016ac <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d908      	bls.n	800220c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e140      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	42420000 	.word	0x42420000
 8002208:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800220c:	4b9e      	ldr	r3, [pc, #632]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e9      	bne.n	80021ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80a6 	beq.w	8002372 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800222a:	4b97      	ldr	r3, [pc, #604]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	4b94      	ldr	r3, [pc, #592]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	4a93      	ldr	r2, [pc, #588]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	61d3      	str	r3, [r2, #28]
 8002242:	4b91      	ldr	r3, [pc, #580]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b8e      	ldr	r3, [pc, #568]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff fa1f 	bl	80016ac <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff fa1b 	bl	80016ac <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b64      	cmp	r3, #100	; 0x64
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0fd      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x4f8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x312>
 8002298:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a7a      	ldr	r2, [pc, #488]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e02d      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x334>
 80022ae:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a75      	ldr	r2, [pc, #468]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4a72      	ldr	r2, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	f023 0304 	bic.w	r3, r3, #4
 80022c4:	6213      	str	r3, [r2, #32]
 80022c6:	e01c      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d10c      	bne.n	80022ea <HAL_RCC_OscConfig+0x356>
 80022d0:	4b6d      	ldr	r3, [pc, #436]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a6c      	ldr	r2, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	6213      	str	r3, [r2, #32]
 80022e8:	e00b      	b.n	8002302 <HAL_RCC_OscConfig+0x36e>
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a66      	ldr	r2, [pc, #408]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	6213      	str	r3, [r2, #32]
 80022f6:	4b64      	ldr	r3, [pc, #400]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	4a63      	ldr	r2, [pc, #396]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	f023 0304 	bic.w	r3, r3, #4
 8002300:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d015      	beq.n	8002336 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7ff f9cf 	bl	80016ac <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7ff f9cb 	bl	80016ac <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e0ab      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002328:	4b57      	ldr	r3, [pc, #348]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ee      	beq.n	8002312 <HAL_RCC_OscConfig+0x37e>
 8002334:	e014      	b.n	8002360 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7ff f9b9 	bl	80016ac <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7ff f9b5 	bl	80016ac <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e095      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002354:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1ee      	bne.n	800233e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002360:	7dfb      	ldrb	r3, [r7, #23]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d105      	bne.n	8002372 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b48      	ldr	r3, [pc, #288]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4a47      	ldr	r2, [pc, #284]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002370:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8081 	beq.w	800247e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237c:	4b42      	ldr	r3, [pc, #264]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b08      	cmp	r3, #8
 8002386:	d061      	beq.n	800244c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d146      	bne.n	800241e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x4fc>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7ff f989 	bl	80016ac <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7ff f985 	bl	80016ac <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e067      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	4b35      	ldr	r3, [pc, #212]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d108      	bne.n	80023d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023c6:	4b30      	ldr	r3, [pc, #192]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	492d      	ldr	r1, [pc, #180]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a19      	ldr	r1, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	430b      	orrs	r3, r1
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b27      	ldr	r3, [pc, #156]	; (8002490 <HAL_RCC_OscConfig+0x4fc>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7ff f959 	bl	80016ac <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7ff f955 	bl	80016ac <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e037      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x46a>
 800241c:	e02f      	b.n	800247e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b1c      	ldr	r3, [pc, #112]	; (8002490 <HAL_RCC_OscConfig+0x4fc>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff f942 	bl	80016ac <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f93e 	bl	80016ac <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e020      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x498>
 800244a:	e018      	b.n	800247e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e013      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <HAL_RCC_OscConfig+0x4f4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002476:	429a      	cmp	r2, r3
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
 8002490:	42420060 	.word	0x42420060

08002494 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0d0      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d910      	bls.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4965      	ldr	r1, [pc, #404]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b63      	ldr	r3, [pc, #396]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0b8      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f0:	4b59      	ldr	r3, [pc, #356]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002508:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002512:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002514:	4b50      	ldr	r3, [pc, #320]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	494d      	ldr	r1, [pc, #308]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d040      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d115      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07f      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e073      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e06b      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4936      	ldr	r1, [pc, #216]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7ff f892 	bl	80016ac <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7ff f88e 	bl	80016ac <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e053      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d210      	bcs.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	4922      	ldr	r1, [pc, #136]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e032      	b.n	800264a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4916      	ldr	r1, [pc, #88]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d009      	beq.n	8002622 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002622:	f000 f821 	bl	8002668 <HAL_RCC_GetSysClockFreq>
 8002626:	4601      	mov	r1, r0
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	4a0a      	ldr	r2, [pc, #40]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002634:	5cd3      	ldrb	r3, [r2, r3]
 8002636:	fa21 f303 	lsr.w	r3, r1, r3
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCC_ClockConfig+0x1cc>)
 800263c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fe fff0 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40022000 	.word	0x40022000
 8002658:	40021000 	.word	0x40021000
 800265c:	08007ee8 	.word	0x08007ee8
 8002660:	20000000 	.word	0x20000000
 8002664:	20000004 	.word	0x20000004

08002668 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002668:	b490      	push	{r4, r7}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800266e:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002670:	1d3c      	adds	r4, r7, #4
 8002672:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002674:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002678:	4b28      	ldr	r3, [pc, #160]	; (800271c <HAL_RCC_GetSysClockFreq+0xb4>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002692:	4b23      	ldr	r3, [pc, #140]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d002      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x40>
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0x46>
 80026a6:	e02d      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a8:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026aa:	623b      	str	r3, [r7, #32]
      break;
 80026ac:	e02d      	b.n	800270a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	0c9b      	lsrs	r3, r3, #18
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026ba:	4413      	add	r3, r2
 80026bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026c0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0c5b      	lsrs	r3, r3, #17
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026da:	4413      	add	r3, r2
 80026dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026e0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	4a0f      	ldr	r2, [pc, #60]	; (8002724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026e6:	fb02 f203 	mul.w	r2, r2, r3
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e004      	b.n	80026fe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	4a0c      	ldr	r2, [pc, #48]	; (8002728 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026f8:	fb02 f303 	mul.w	r3, r2, r3
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	623b      	str	r3, [r7, #32]
      break;
 8002702:	e002      	b.n	800270a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002706:	623b      	str	r3, [r7, #32]
      break;
 8002708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270a:	6a3b      	ldr	r3, [r7, #32]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3728      	adds	r7, #40	; 0x28
 8002710:	46bd      	mov	sp, r7
 8002712:	bc90      	pop	{r4, r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	08007ec8 	.word	0x08007ec8
 800271c:	08007ed8 	.word	0x08007ed8
 8002720:	40021000 	.word	0x40021000
 8002724:	007a1200 	.word	0x007a1200
 8002728:	003d0900 	.word	0x003d0900

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b02      	ldr	r3, [pc, #8]	; (800273c <HAL_RCC_GetHCLKFreq+0x10>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff2 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002748:	4601      	mov	r1, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4a03      	ldr	r2, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5cd3      	ldrb	r3, [r2, r3]
 8002758:	fa21 f303 	lsr.w	r3, r1, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08007ef8 	.word	0x08007ef8

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffde 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002770:	4601      	mov	r1, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	0adb      	lsrs	r3, r3, #11
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4a03      	ldr	r2, [pc, #12]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5cd3      	ldrb	r3, [r2, r3]
 8002780:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	08007ef8 	.word	0x08007ef8

08002790 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <RCC_Delay+0x34>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <RCC_Delay+0x38>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0a5b      	lsrs	r3, r3, #9
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027ac:	bf00      	nop
  }
  while (Delay --);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e5a      	subs	r2, r3, #1
 80027b2:	60fa      	str	r2, [r7, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f9      	bne.n	80027ac <RCC_Delay+0x1c>
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000
 80027c8:	10624dd3 	.word	0x10624dd3

080027cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e03f      	b.n	800285e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fd78 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800280e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fb83 	bl	8002f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b08a      	sub	sp, #40	; 0x28
 800286a:	af02      	add	r7, sp, #8
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	d17c      	bne.n	8002980 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_Transmit+0x2c>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e075      	b.n	8002982 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Transmit+0x3e>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e06e      	b.n	8002982 <HAL_UART_Transmit+0x11c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fef7 	bl	80016ac <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d108      	bne.n	80028e8 <HAL_UART_Transmit+0x82>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e003      	b.n	80028f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80028f8:	e02a      	b.n	8002950 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f9a7 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e036      	b.n	8002982 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10b      	bne.n	8002932 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	3302      	adds	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e007      	b.n	8002942 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1cf      	bne.n	80028fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	2140      	movs	r1, #64	; 0x40
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f977 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e006      	b.n	8002982 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b20      	cmp	r3, #32
 80029a2:	d140      	bne.n	8002a26 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_UART_Receive_IT+0x26>
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e039      	b.n	8002a28 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_UART_Receive_IT+0x38>
 80029be:	2302      	movs	r3, #2
 80029c0:	e032      	b.n	8002a28 <HAL_UART_Receive_IT+0x9e>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	88fa      	ldrh	r2, [r7, #6]
 80029d4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2222      	movs	r2, #34	; 0x22
 80029e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a00:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3714      	adds	r7, #20
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_UART_IRQHandler+0x52>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9cc 	bl	8002e1c <UART_Receive_IT>
      return;
 8002a84:	e0d1      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80b0 	beq.w	8002bee <HAL_UART_IRQHandler+0x1ba>
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_UART_IRQHandler+0x70>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 80a5 	beq.w	8002bee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x90>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abc:	f043 0201 	orr.w	r2, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_UART_IRQHandler+0xb0>
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	f043 0202 	orr.w	r2, r3, #2
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_UART_IRQHandler+0xd0>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00f      	beq.n	8002b2e <HAL_UART_IRQHandler+0xfa>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <HAL_UART_IRQHandler+0xee>
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b26:	f043 0208 	orr.w	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d078      	beq.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_UART_IRQHandler+0x11c>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f966 	bl	8002e1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d102      	bne.n	8002b78 <HAL_UART_IRQHandler+0x144>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d031      	beq.n	8002bdc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8b7 	bl	8002cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d023      	beq.n	8002bd4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695a      	ldr	r2, [r3, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_UART_IRQHandler+0x1fc>)
 8002baa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe feb5 	bl	8001920 <HAL_DMA_Abort_IT>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d016      	beq.n	8002bea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bca:	e00e      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f83a 	bl	8002c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd2:	e00a      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f836 	bl	8002c46 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bda:	e006      	b.n	8002bea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f832 	bl	8002c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002be8:	e01e      	b.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	bf00      	nop
    return;
 8002bec:	e01c      	b.n	8002c28 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_UART_IRQHandler+0x1d6>
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f8a3 	bl	8002d4e <UART_Transmit_IT>
    return;
 8002c08:	e00f      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f8e4 	bl	8002dec <UART_EndTransmit_IT>
    return;
 8002c24:	bf00      	nop
 8002c26:	e000      	b.n	8002c2a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c28:	bf00      	nop
  }
}
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	08002d27 	.word	0x08002d27

08002c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr

08002c46 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c68:	e02c      	b.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d028      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c78:	f7fe fd18 	bl	80016ac <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d21d      	bcs.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e00f      	b.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d0c3      	beq.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr

08002d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff ff80 	bl	8002c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d46:	bf00      	nop
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b21      	cmp	r3, #33	; 0x21
 8002d60:	d13e      	bne.n	8002de0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d114      	bne.n	8002d96 <UART_Transmit_IT+0x48>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d110      	bne.n	8002d96 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	1c9a      	adds	r2, r3, #2
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	621a      	str	r2, [r3, #32]
 8002d94:	e008      	b.n	8002da8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	1c59      	adds	r1, r3, #1
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6211      	str	r1, [r2, #32]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4619      	mov	r1, r3
 8002db6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
  }
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff11 	bl	8002c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b22      	cmp	r3, #34	; 0x22
 8002e2e:	d170      	bne.n	8002f12 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d117      	bne.n	8002e6a <UART_Receive_IT+0x4e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d113      	bne.n	8002e6a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	1c9a      	adds	r2, r3, #2
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
 8002e68:	e026      	b.n	8002eb8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7c:	d007      	beq.n	8002e8e <UART_Receive_IT+0x72>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <UART_Receive_IT+0x80>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e008      	b.n	8002eae <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d120      	bne.n	8002f0e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0220 	bic.w	r2, r2, #32
 8002eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0201 	bic.w	r2, r2, #1
 8002efa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fd ff3d 	bl	8000d84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e002      	b.n	8002f14 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f56:	f023 030c 	bic.w	r3, r3, #12
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <UART_SetConfig+0x114>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d103      	bne.n	8002f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff fbf0 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	e002      	b.n	8002f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f8c:	f7ff fbd8 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 8002f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	009a      	lsls	r2, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa8:	4a22      	ldr	r2, [pc, #136]	; (8003034 <UART_SetConfig+0x118>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	0119      	lsls	r1, r3, #4
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009a      	lsls	r2, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <UART_SetConfig+0x118>)
 8002fca:	fba3 0302 	umull	r0, r3, r3, r2
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2064      	movs	r0, #100	; 0x64
 8002fd2:	fb00 f303 	mul.w	r3, r0, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	; 0x32
 8002fdc:	4a15      	ldr	r2, [pc, #84]	; (8003034 <UART_SetConfig+0x118>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe8:	4419      	add	r1, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009a      	lsls	r2, r3, #2
 8002ff4:	441a      	add	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003000:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <UART_SetConfig+0x118>)
 8003002:	fba3 0302 	umull	r0, r3, r3, r2
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	2064      	movs	r0, #100	; 0x64
 800300a:	fb00 f303 	mul.w	r3, r0, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	3332      	adds	r3, #50	; 0x32
 8003014:	4a07      	ldr	r2, [pc, #28]	; (8003034 <UART_SetConfig+0x118>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	f003 020f 	and.w	r2, r3, #15
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	440a      	add	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40013800 	.word	0x40013800
 8003034:	51eb851f 	.word	0x51eb851f

08003038 <__errno>:
 8003038:	4b01      	ldr	r3, [pc, #4]	; (8003040 <__errno+0x8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	2000000c 	.word	0x2000000c

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2500      	movs	r5, #0
 8003048:	4e0c      	ldr	r6, [pc, #48]	; (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <__libc_init_array+0x3c>)
 800304c:	1ba4      	subs	r4, r4, r6
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a5      	cmp	r5, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	f004 fe4c 	bl	8007cf0 <_init>
 8003058:	2500      	movs	r5, #0
 800305a:	4e0a      	ldr	r6, [pc, #40]	; (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x44>)
 800305e:	1ba4      	subs	r4, r4, r6
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a5      	cmp	r5, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800306c:	4798      	blx	r3
 800306e:	3501      	adds	r5, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003076:	4798      	blx	r3
 8003078:	3501      	adds	r5, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	0800823c 	.word	0x0800823c
 8003080:	0800823c 	.word	0x0800823c
 8003084:	0800823c 	.word	0x0800823c
 8003088:	08008240 	.word	0x08008240

0800308c <memset>:
 800308c:	4603      	mov	r3, r0
 800308e:	4402      	add	r2, r0
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	f803 1b01 	strb.w	r1, [r3], #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <__cvt>:
 800309c:	2b00      	cmp	r3, #0
 800309e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030a2:	461e      	mov	r6, r3
 80030a4:	bfbb      	ittet	lt
 80030a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80030aa:	461e      	movlt	r6, r3
 80030ac:	2300      	movge	r3, #0
 80030ae:	232d      	movlt	r3, #45	; 0x2d
 80030b0:	b088      	sub	sp, #32
 80030b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80030b4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80030b8:	f027 0720 	bic.w	r7, r7, #32
 80030bc:	2f46      	cmp	r7, #70	; 0x46
 80030be:	4614      	mov	r4, r2
 80030c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80030c2:	700b      	strb	r3, [r1, #0]
 80030c4:	d004      	beq.n	80030d0 <__cvt+0x34>
 80030c6:	2f45      	cmp	r7, #69	; 0x45
 80030c8:	d100      	bne.n	80030cc <__cvt+0x30>
 80030ca:	3501      	adds	r5, #1
 80030cc:	2302      	movs	r3, #2
 80030ce:	e000      	b.n	80030d2 <__cvt+0x36>
 80030d0:	2303      	movs	r3, #3
 80030d2:	aa07      	add	r2, sp, #28
 80030d4:	9204      	str	r2, [sp, #16]
 80030d6:	aa06      	add	r2, sp, #24
 80030d8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80030dc:	e9cd 3500 	strd	r3, r5, [sp]
 80030e0:	4622      	mov	r2, r4
 80030e2:	4633      	mov	r3, r6
 80030e4:	f001 fe40 	bl	8004d68 <_dtoa_r>
 80030e8:	2f47      	cmp	r7, #71	; 0x47
 80030ea:	4680      	mov	r8, r0
 80030ec:	d102      	bne.n	80030f4 <__cvt+0x58>
 80030ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80030f0:	07db      	lsls	r3, r3, #31
 80030f2:	d526      	bpl.n	8003142 <__cvt+0xa6>
 80030f4:	2f46      	cmp	r7, #70	; 0x46
 80030f6:	eb08 0905 	add.w	r9, r8, r5
 80030fa:	d111      	bne.n	8003120 <__cvt+0x84>
 80030fc:	f898 3000 	ldrb.w	r3, [r8]
 8003100:	2b30      	cmp	r3, #48	; 0x30
 8003102:	d10a      	bne.n	800311a <__cvt+0x7e>
 8003104:	2200      	movs	r2, #0
 8003106:	2300      	movs	r3, #0
 8003108:	4620      	mov	r0, r4
 800310a:	4631      	mov	r1, r6
 800310c:	f7fd fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8003110:	b918      	cbnz	r0, 800311a <__cvt+0x7e>
 8003112:	f1c5 0501 	rsb	r5, r5, #1
 8003116:	f8ca 5000 	str.w	r5, [sl]
 800311a:	f8da 3000 	ldr.w	r3, [sl]
 800311e:	4499      	add	r9, r3
 8003120:	2200      	movs	r2, #0
 8003122:	2300      	movs	r3, #0
 8003124:	4620      	mov	r0, r4
 8003126:	4631      	mov	r1, r6
 8003128:	f7fd fc3e 	bl	80009a8 <__aeabi_dcmpeq>
 800312c:	b938      	cbnz	r0, 800313e <__cvt+0xa2>
 800312e:	2230      	movs	r2, #48	; 0x30
 8003130:	9b07      	ldr	r3, [sp, #28]
 8003132:	454b      	cmp	r3, r9
 8003134:	d205      	bcs.n	8003142 <__cvt+0xa6>
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	9107      	str	r1, [sp, #28]
 800313a:	701a      	strb	r2, [r3, #0]
 800313c:	e7f8      	b.n	8003130 <__cvt+0x94>
 800313e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003142:	4640      	mov	r0, r8
 8003144:	9b07      	ldr	r3, [sp, #28]
 8003146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003148:	eba3 0308 	sub.w	r3, r3, r8
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	b008      	add	sp, #32
 8003150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003154 <__exponent>:
 8003154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003156:	2900      	cmp	r1, #0
 8003158:	bfb4      	ite	lt
 800315a:	232d      	movlt	r3, #45	; 0x2d
 800315c:	232b      	movge	r3, #43	; 0x2b
 800315e:	4604      	mov	r4, r0
 8003160:	bfb8      	it	lt
 8003162:	4249      	neglt	r1, r1
 8003164:	2909      	cmp	r1, #9
 8003166:	f804 2b02 	strb.w	r2, [r4], #2
 800316a:	7043      	strb	r3, [r0, #1]
 800316c:	dd21      	ble.n	80031b2 <__exponent+0x5e>
 800316e:	f10d 0307 	add.w	r3, sp, #7
 8003172:	461f      	mov	r7, r3
 8003174:	260a      	movs	r6, #10
 8003176:	fb91 f5f6 	sdiv	r5, r1, r6
 800317a:	fb06 1115 	mls	r1, r6, r5, r1
 800317e:	2d09      	cmp	r5, #9
 8003180:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003184:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003188:	f103 32ff 	add.w	r2, r3, #4294967295
 800318c:	4629      	mov	r1, r5
 800318e:	dc09      	bgt.n	80031a4 <__exponent+0x50>
 8003190:	3130      	adds	r1, #48	; 0x30
 8003192:	3b02      	subs	r3, #2
 8003194:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003198:	42bb      	cmp	r3, r7
 800319a:	4622      	mov	r2, r4
 800319c:	d304      	bcc.n	80031a8 <__exponent+0x54>
 800319e:	1a10      	subs	r0, r2, r0
 80031a0:	b003      	add	sp, #12
 80031a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a4:	4613      	mov	r3, r2
 80031a6:	e7e6      	b.n	8003176 <__exponent+0x22>
 80031a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031ac:	f804 2b01 	strb.w	r2, [r4], #1
 80031b0:	e7f2      	b.n	8003198 <__exponent+0x44>
 80031b2:	2330      	movs	r3, #48	; 0x30
 80031b4:	4419      	add	r1, r3
 80031b6:	7083      	strb	r3, [r0, #2]
 80031b8:	1d02      	adds	r2, r0, #4
 80031ba:	70c1      	strb	r1, [r0, #3]
 80031bc:	e7ef      	b.n	800319e <__exponent+0x4a>
	...

080031c0 <_printf_float>:
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c4:	b091      	sub	sp, #68	; 0x44
 80031c6:	460c      	mov	r4, r1
 80031c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80031ca:	4693      	mov	fp, r2
 80031cc:	461e      	mov	r6, r3
 80031ce:	4605      	mov	r5, r0
 80031d0:	f002 ff84 	bl	80060dc <_localeconv_r>
 80031d4:	6803      	ldr	r3, [r0, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	9309      	str	r3, [sp, #36]	; 0x24
 80031da:	f7fc ffb9 	bl	8000150 <strlen>
 80031de:	2300      	movs	r3, #0
 80031e0:	930e      	str	r3, [sp, #56]	; 0x38
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	900a      	str	r0, [sp, #40]	; 0x28
 80031e6:	3307      	adds	r3, #7
 80031e8:	f023 0307 	bic.w	r3, r3, #7
 80031ec:	f103 0208 	add.w	r2, r3, #8
 80031f0:	f894 8018 	ldrb.w	r8, [r4, #24]
 80031f4:	f8d4 a000 	ldr.w	sl, [r4]
 80031f8:	603a      	str	r2, [r7, #0]
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003202:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800320a:	930b      	str	r3, [sp, #44]	; 0x2c
 800320c:	f04f 32ff 	mov.w	r2, #4294967295
 8003210:	4ba6      	ldr	r3, [pc, #664]	; (80034ac <_printf_float+0x2ec>)
 8003212:	4638      	mov	r0, r7
 8003214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003216:	f7fd fbf9 	bl	8000a0c <__aeabi_dcmpun>
 800321a:	bb68      	cbnz	r0, 8003278 <_printf_float+0xb8>
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	4ba2      	ldr	r3, [pc, #648]	; (80034ac <_printf_float+0x2ec>)
 8003222:	4638      	mov	r0, r7
 8003224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003226:	f7fd fbd3 	bl	80009d0 <__aeabi_dcmple>
 800322a:	bb28      	cbnz	r0, 8003278 <_printf_float+0xb8>
 800322c:	2200      	movs	r2, #0
 800322e:	2300      	movs	r3, #0
 8003230:	4638      	mov	r0, r7
 8003232:	4649      	mov	r1, r9
 8003234:	f7fd fbc2 	bl	80009bc <__aeabi_dcmplt>
 8003238:	b110      	cbz	r0, 8003240 <_printf_float+0x80>
 800323a:	232d      	movs	r3, #45	; 0x2d
 800323c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003240:	4f9b      	ldr	r7, [pc, #620]	; (80034b0 <_printf_float+0x2f0>)
 8003242:	4b9c      	ldr	r3, [pc, #624]	; (80034b4 <_printf_float+0x2f4>)
 8003244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003248:	bf98      	it	ls
 800324a:	461f      	movls	r7, r3
 800324c:	2303      	movs	r3, #3
 800324e:	f04f 0900 	mov.w	r9, #0
 8003252:	6123      	str	r3, [r4, #16]
 8003254:	f02a 0304 	bic.w	r3, sl, #4
 8003258:	6023      	str	r3, [r4, #0]
 800325a:	9600      	str	r6, [sp, #0]
 800325c:	465b      	mov	r3, fp
 800325e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003260:	4621      	mov	r1, r4
 8003262:	4628      	mov	r0, r5
 8003264:	f000 f9e2 	bl	800362c <_printf_common>
 8003268:	3001      	adds	r0, #1
 800326a:	f040 8090 	bne.w	800338e <_printf_float+0x1ce>
 800326e:	f04f 30ff 	mov.w	r0, #4294967295
 8003272:	b011      	add	sp, #68	; 0x44
 8003274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003278:	463a      	mov	r2, r7
 800327a:	464b      	mov	r3, r9
 800327c:	4638      	mov	r0, r7
 800327e:	4649      	mov	r1, r9
 8003280:	f7fd fbc4 	bl	8000a0c <__aeabi_dcmpun>
 8003284:	b110      	cbz	r0, 800328c <_printf_float+0xcc>
 8003286:	4f8c      	ldr	r7, [pc, #560]	; (80034b8 <_printf_float+0x2f8>)
 8003288:	4b8c      	ldr	r3, [pc, #560]	; (80034bc <_printf_float+0x2fc>)
 800328a:	e7db      	b.n	8003244 <_printf_float+0x84>
 800328c:	6863      	ldr	r3, [r4, #4]
 800328e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8003292:	1c59      	adds	r1, r3, #1
 8003294:	a80d      	add	r0, sp, #52	; 0x34
 8003296:	a90e      	add	r1, sp, #56	; 0x38
 8003298:	d140      	bne.n	800331c <_printf_float+0x15c>
 800329a:	2306      	movs	r3, #6
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	f04f 0c00 	mov.w	ip, #0
 80032a2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80032a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80032aa:	6863      	ldr	r3, [r4, #4]
 80032ac:	6022      	str	r2, [r4, #0]
 80032ae:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	463a      	mov	r2, r7
 80032b6:	464b      	mov	r3, r9
 80032b8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80032bc:	4628      	mov	r0, r5
 80032be:	f7ff feed 	bl	800309c <__cvt>
 80032c2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80032c6:	2b47      	cmp	r3, #71	; 0x47
 80032c8:	4607      	mov	r7, r0
 80032ca:	d109      	bne.n	80032e0 <_printf_float+0x120>
 80032cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032ce:	1cd8      	adds	r0, r3, #3
 80032d0:	db02      	blt.n	80032d8 <_printf_float+0x118>
 80032d2:	6862      	ldr	r2, [r4, #4]
 80032d4:	4293      	cmp	r3, r2
 80032d6:	dd47      	ble.n	8003368 <_printf_float+0x1a8>
 80032d8:	f1a8 0802 	sub.w	r8, r8, #2
 80032dc:	fa5f f888 	uxtb.w	r8, r8
 80032e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80032e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80032e6:	d824      	bhi.n	8003332 <_printf_float+0x172>
 80032e8:	3901      	subs	r1, #1
 80032ea:	4642      	mov	r2, r8
 80032ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80032f0:	910d      	str	r1, [sp, #52]	; 0x34
 80032f2:	f7ff ff2f 	bl	8003154 <__exponent>
 80032f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032f8:	4681      	mov	r9, r0
 80032fa:	1813      	adds	r3, r2, r0
 80032fc:	2a01      	cmp	r2, #1
 80032fe:	6123      	str	r3, [r4, #16]
 8003300:	dc02      	bgt.n	8003308 <_printf_float+0x148>
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	07d1      	lsls	r1, r2, #31
 8003306:	d501      	bpl.n	800330c <_printf_float+0x14c>
 8003308:	3301      	adds	r3, #1
 800330a:	6123      	str	r3, [r4, #16]
 800330c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0a2      	beq.n	800325a <_printf_float+0x9a>
 8003314:	232d      	movs	r3, #45	; 0x2d
 8003316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800331a:	e79e      	b.n	800325a <_printf_float+0x9a>
 800331c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003320:	f000 816e 	beq.w	8003600 <_printf_float+0x440>
 8003324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003328:	d1b9      	bne.n	800329e <_printf_float+0xde>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1b7      	bne.n	800329e <_printf_float+0xde>
 800332e:	2301      	movs	r3, #1
 8003330:	e7b4      	b.n	800329c <_printf_float+0xdc>
 8003332:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003336:	d119      	bne.n	800336c <_printf_float+0x1ac>
 8003338:	2900      	cmp	r1, #0
 800333a:	6863      	ldr	r3, [r4, #4]
 800333c:	dd0c      	ble.n	8003358 <_printf_float+0x198>
 800333e:	6121      	str	r1, [r4, #16]
 8003340:	b913      	cbnz	r3, 8003348 <_printf_float+0x188>
 8003342:	6822      	ldr	r2, [r4, #0]
 8003344:	07d2      	lsls	r2, r2, #31
 8003346:	d502      	bpl.n	800334e <_printf_float+0x18e>
 8003348:	3301      	adds	r3, #1
 800334a:	440b      	add	r3, r1
 800334c:	6123      	str	r3, [r4, #16]
 800334e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003350:	f04f 0900 	mov.w	r9, #0
 8003354:	65a3      	str	r3, [r4, #88]	; 0x58
 8003356:	e7d9      	b.n	800330c <_printf_float+0x14c>
 8003358:	b913      	cbnz	r3, 8003360 <_printf_float+0x1a0>
 800335a:	6822      	ldr	r2, [r4, #0]
 800335c:	07d0      	lsls	r0, r2, #31
 800335e:	d501      	bpl.n	8003364 <_printf_float+0x1a4>
 8003360:	3302      	adds	r3, #2
 8003362:	e7f3      	b.n	800334c <_printf_float+0x18c>
 8003364:	2301      	movs	r3, #1
 8003366:	e7f1      	b.n	800334c <_printf_float+0x18c>
 8003368:	f04f 0867 	mov.w	r8, #103	; 0x67
 800336c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003370:	4293      	cmp	r3, r2
 8003372:	db05      	blt.n	8003380 <_printf_float+0x1c0>
 8003374:	6822      	ldr	r2, [r4, #0]
 8003376:	6123      	str	r3, [r4, #16]
 8003378:	07d1      	lsls	r1, r2, #31
 800337a:	d5e8      	bpl.n	800334e <_printf_float+0x18e>
 800337c:	3301      	adds	r3, #1
 800337e:	e7e5      	b.n	800334c <_printf_float+0x18c>
 8003380:	2b00      	cmp	r3, #0
 8003382:	bfcc      	ite	gt
 8003384:	2301      	movgt	r3, #1
 8003386:	f1c3 0302 	rsble	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	e7de      	b.n	800334c <_printf_float+0x18c>
 800338e:	6823      	ldr	r3, [r4, #0]
 8003390:	055a      	lsls	r2, r3, #21
 8003392:	d407      	bmi.n	80033a4 <_printf_float+0x1e4>
 8003394:	6923      	ldr	r3, [r4, #16]
 8003396:	463a      	mov	r2, r7
 8003398:	4659      	mov	r1, fp
 800339a:	4628      	mov	r0, r5
 800339c:	47b0      	blx	r6
 800339e:	3001      	adds	r0, #1
 80033a0:	d129      	bne.n	80033f6 <_printf_float+0x236>
 80033a2:	e764      	b.n	800326e <_printf_float+0xae>
 80033a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80033a8:	f240 80d7 	bls.w	800355a <_printf_float+0x39a>
 80033ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80033b0:	2200      	movs	r2, #0
 80033b2:	2300      	movs	r3, #0
 80033b4:	f7fd faf8 	bl	80009a8 <__aeabi_dcmpeq>
 80033b8:	b388      	cbz	r0, 800341e <_printf_float+0x25e>
 80033ba:	2301      	movs	r3, #1
 80033bc:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <_printf_float+0x300>)
 80033be:	4659      	mov	r1, fp
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b0      	blx	r6
 80033c4:	3001      	adds	r0, #1
 80033c6:	f43f af52 	beq.w	800326e <_printf_float+0xae>
 80033ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033ce:	429a      	cmp	r2, r3
 80033d0:	db02      	blt.n	80033d8 <_printf_float+0x218>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	07d8      	lsls	r0, r3, #31
 80033d6:	d50e      	bpl.n	80033f6 <_printf_float+0x236>
 80033d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80033dc:	4659      	mov	r1, fp
 80033de:	4628      	mov	r0, r5
 80033e0:	47b0      	blx	r6
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f af43 	beq.w	800326e <_printf_float+0xae>
 80033e8:	2700      	movs	r7, #0
 80033ea:	f104 081a 	add.w	r8, r4, #26
 80033ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033f0:	3b01      	subs	r3, #1
 80033f2:	42bb      	cmp	r3, r7
 80033f4:	dc09      	bgt.n	800340a <_printf_float+0x24a>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	079f      	lsls	r7, r3, #30
 80033fa:	f100 80fd 	bmi.w	80035f8 <_printf_float+0x438>
 80033fe:	68e0      	ldr	r0, [r4, #12]
 8003400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003402:	4298      	cmp	r0, r3
 8003404:	bfb8      	it	lt
 8003406:	4618      	movlt	r0, r3
 8003408:	e733      	b.n	8003272 <_printf_float+0xb2>
 800340a:	2301      	movs	r3, #1
 800340c:	4642      	mov	r2, r8
 800340e:	4659      	mov	r1, fp
 8003410:	4628      	mov	r0, r5
 8003412:	47b0      	blx	r6
 8003414:	3001      	adds	r0, #1
 8003416:	f43f af2a 	beq.w	800326e <_printf_float+0xae>
 800341a:	3701      	adds	r7, #1
 800341c:	e7e7      	b.n	80033ee <_printf_float+0x22e>
 800341e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003420:	2b00      	cmp	r3, #0
 8003422:	dc2b      	bgt.n	800347c <_printf_float+0x2bc>
 8003424:	2301      	movs	r3, #1
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <_printf_float+0x300>)
 8003428:	4659      	mov	r1, fp
 800342a:	4628      	mov	r0, r5
 800342c:	47b0      	blx	r6
 800342e:	3001      	adds	r0, #1
 8003430:	f43f af1d 	beq.w	800326e <_printf_float+0xae>
 8003434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003436:	b923      	cbnz	r3, 8003442 <_printf_float+0x282>
 8003438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800343a:	b913      	cbnz	r3, 8003442 <_printf_float+0x282>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	07d9      	lsls	r1, r3, #31
 8003440:	d5d9      	bpl.n	80033f6 <_printf_float+0x236>
 8003442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003446:	4659      	mov	r1, fp
 8003448:	4628      	mov	r0, r5
 800344a:	47b0      	blx	r6
 800344c:	3001      	adds	r0, #1
 800344e:	f43f af0e 	beq.w	800326e <_printf_float+0xae>
 8003452:	f04f 0800 	mov.w	r8, #0
 8003456:	f104 091a 	add.w	r9, r4, #26
 800345a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800345c:	425b      	negs	r3, r3
 800345e:	4543      	cmp	r3, r8
 8003460:	dc01      	bgt.n	8003466 <_printf_float+0x2a6>
 8003462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003464:	e797      	b.n	8003396 <_printf_float+0x1d6>
 8003466:	2301      	movs	r3, #1
 8003468:	464a      	mov	r2, r9
 800346a:	4659      	mov	r1, fp
 800346c:	4628      	mov	r0, r5
 800346e:	47b0      	blx	r6
 8003470:	3001      	adds	r0, #1
 8003472:	f43f aefc 	beq.w	800326e <_printf_float+0xae>
 8003476:	f108 0801 	add.w	r8, r8, #1
 800347a:	e7ee      	b.n	800345a <_printf_float+0x29a>
 800347c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800347e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003480:	429a      	cmp	r2, r3
 8003482:	bfa8      	it	ge
 8003484:	461a      	movge	r2, r3
 8003486:	2a00      	cmp	r2, #0
 8003488:	4690      	mov	r8, r2
 800348a:	dd07      	ble.n	800349c <_printf_float+0x2dc>
 800348c:	4613      	mov	r3, r2
 800348e:	4659      	mov	r1, fp
 8003490:	463a      	mov	r2, r7
 8003492:	4628      	mov	r0, r5
 8003494:	47b0      	blx	r6
 8003496:	3001      	adds	r0, #1
 8003498:	f43f aee9 	beq.w	800326e <_printf_float+0xae>
 800349c:	f104 031a 	add.w	r3, r4, #26
 80034a0:	f04f 0a00 	mov.w	sl, #0
 80034a4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80034a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034aa:	e015      	b.n	80034d8 <_printf_float+0x318>
 80034ac:	7fefffff 	.word	0x7fefffff
 80034b0:	08007f08 	.word	0x08007f08
 80034b4:	08007f04 	.word	0x08007f04
 80034b8:	08007f10 	.word	0x08007f10
 80034bc:	08007f0c 	.word	0x08007f0c
 80034c0:	08008133 	.word	0x08008133
 80034c4:	2301      	movs	r3, #1
 80034c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034c8:	4659      	mov	r1, fp
 80034ca:	4628      	mov	r0, r5
 80034cc:	47b0      	blx	r6
 80034ce:	3001      	adds	r0, #1
 80034d0:	f43f aecd 	beq.w	800326e <_printf_float+0xae>
 80034d4:	f10a 0a01 	add.w	sl, sl, #1
 80034d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80034dc:	eba9 0308 	sub.w	r3, r9, r8
 80034e0:	4553      	cmp	r3, sl
 80034e2:	dcef      	bgt.n	80034c4 <_printf_float+0x304>
 80034e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034e8:	429a      	cmp	r2, r3
 80034ea:	444f      	add	r7, r9
 80034ec:	db14      	blt.n	8003518 <_printf_float+0x358>
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	07da      	lsls	r2, r3, #31
 80034f2:	d411      	bmi.n	8003518 <_printf_float+0x358>
 80034f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80034f8:	eba3 0209 	sub.w	r2, r3, r9
 80034fc:	eba3 0901 	sub.w	r9, r3, r1
 8003500:	4591      	cmp	r9, r2
 8003502:	bfa8      	it	ge
 8003504:	4691      	movge	r9, r2
 8003506:	f1b9 0f00 	cmp.w	r9, #0
 800350a:	dc0d      	bgt.n	8003528 <_printf_float+0x368>
 800350c:	2700      	movs	r7, #0
 800350e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003512:	f104 081a 	add.w	r8, r4, #26
 8003516:	e018      	b.n	800354a <_printf_float+0x38a>
 8003518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800351c:	4659      	mov	r1, fp
 800351e:	4628      	mov	r0, r5
 8003520:	47b0      	blx	r6
 8003522:	3001      	adds	r0, #1
 8003524:	d1e6      	bne.n	80034f4 <_printf_float+0x334>
 8003526:	e6a2      	b.n	800326e <_printf_float+0xae>
 8003528:	464b      	mov	r3, r9
 800352a:	463a      	mov	r2, r7
 800352c:	4659      	mov	r1, fp
 800352e:	4628      	mov	r0, r5
 8003530:	47b0      	blx	r6
 8003532:	3001      	adds	r0, #1
 8003534:	d1ea      	bne.n	800350c <_printf_float+0x34c>
 8003536:	e69a      	b.n	800326e <_printf_float+0xae>
 8003538:	2301      	movs	r3, #1
 800353a:	4642      	mov	r2, r8
 800353c:	4659      	mov	r1, fp
 800353e:	4628      	mov	r0, r5
 8003540:	47b0      	blx	r6
 8003542:	3001      	adds	r0, #1
 8003544:	f43f ae93 	beq.w	800326e <_printf_float+0xae>
 8003548:	3701      	adds	r7, #1
 800354a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	eba3 0309 	sub.w	r3, r3, r9
 8003554:	42bb      	cmp	r3, r7
 8003556:	dcef      	bgt.n	8003538 <_printf_float+0x378>
 8003558:	e74d      	b.n	80033f6 <_printf_float+0x236>
 800355a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800355c:	2a01      	cmp	r2, #1
 800355e:	dc01      	bgt.n	8003564 <_printf_float+0x3a4>
 8003560:	07db      	lsls	r3, r3, #31
 8003562:	d538      	bpl.n	80035d6 <_printf_float+0x416>
 8003564:	2301      	movs	r3, #1
 8003566:	463a      	mov	r2, r7
 8003568:	4659      	mov	r1, fp
 800356a:	4628      	mov	r0, r5
 800356c:	47b0      	blx	r6
 800356e:	3001      	adds	r0, #1
 8003570:	f43f ae7d 	beq.w	800326e <_printf_float+0xae>
 8003574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003578:	4659      	mov	r1, fp
 800357a:	4628      	mov	r0, r5
 800357c:	47b0      	blx	r6
 800357e:	3001      	adds	r0, #1
 8003580:	f107 0701 	add.w	r7, r7, #1
 8003584:	f43f ae73 	beq.w	800326e <_printf_float+0xae>
 8003588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800358c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800358e:	2200      	movs	r2, #0
 8003590:	f103 38ff 	add.w	r8, r3, #4294967295
 8003594:	2300      	movs	r3, #0
 8003596:	f7fd fa07 	bl	80009a8 <__aeabi_dcmpeq>
 800359a:	b9c0      	cbnz	r0, 80035ce <_printf_float+0x40e>
 800359c:	4643      	mov	r3, r8
 800359e:	463a      	mov	r2, r7
 80035a0:	4659      	mov	r1, fp
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b0      	blx	r6
 80035a6:	3001      	adds	r0, #1
 80035a8:	d10d      	bne.n	80035c6 <_printf_float+0x406>
 80035aa:	e660      	b.n	800326e <_printf_float+0xae>
 80035ac:	2301      	movs	r3, #1
 80035ae:	4642      	mov	r2, r8
 80035b0:	4659      	mov	r1, fp
 80035b2:	4628      	mov	r0, r5
 80035b4:	47b0      	blx	r6
 80035b6:	3001      	adds	r0, #1
 80035b8:	f43f ae59 	beq.w	800326e <_printf_float+0xae>
 80035bc:	3701      	adds	r7, #1
 80035be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035c0:	3b01      	subs	r3, #1
 80035c2:	42bb      	cmp	r3, r7
 80035c4:	dcf2      	bgt.n	80035ac <_printf_float+0x3ec>
 80035c6:	464b      	mov	r3, r9
 80035c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80035cc:	e6e4      	b.n	8003398 <_printf_float+0x1d8>
 80035ce:	2700      	movs	r7, #0
 80035d0:	f104 081a 	add.w	r8, r4, #26
 80035d4:	e7f3      	b.n	80035be <_printf_float+0x3fe>
 80035d6:	2301      	movs	r3, #1
 80035d8:	e7e1      	b.n	800359e <_printf_float+0x3de>
 80035da:	2301      	movs	r3, #1
 80035dc:	4642      	mov	r2, r8
 80035de:	4659      	mov	r1, fp
 80035e0:	4628      	mov	r0, r5
 80035e2:	47b0      	blx	r6
 80035e4:	3001      	adds	r0, #1
 80035e6:	f43f ae42 	beq.w	800326e <_printf_float+0xae>
 80035ea:	3701      	adds	r7, #1
 80035ec:	68e3      	ldr	r3, [r4, #12]
 80035ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	42bb      	cmp	r3, r7
 80035f4:	dcf1      	bgt.n	80035da <_printf_float+0x41a>
 80035f6:	e702      	b.n	80033fe <_printf_float+0x23e>
 80035f8:	2700      	movs	r7, #0
 80035fa:	f104 0819 	add.w	r8, r4, #25
 80035fe:	e7f5      	b.n	80035ec <_printf_float+0x42c>
 8003600:	2b00      	cmp	r3, #0
 8003602:	f43f ae94 	beq.w	800332e <_printf_float+0x16e>
 8003606:	f04f 0c00 	mov.w	ip, #0
 800360a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800360e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003612:	6022      	str	r2, [r4, #0]
 8003614:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003618:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	463a      	mov	r2, r7
 8003620:	464b      	mov	r3, r9
 8003622:	4628      	mov	r0, r5
 8003624:	f7ff fd3a 	bl	800309c <__cvt>
 8003628:	4607      	mov	r7, r0
 800362a:	e64f      	b.n	80032cc <_printf_float+0x10c>

0800362c <_printf_common>:
 800362c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	4691      	mov	r9, r2
 8003632:	461f      	mov	r7, r3
 8003634:	688a      	ldr	r2, [r1, #8]
 8003636:	690b      	ldr	r3, [r1, #16]
 8003638:	4606      	mov	r6, r0
 800363a:	4293      	cmp	r3, r2
 800363c:	bfb8      	it	lt
 800363e:	4613      	movlt	r3, r2
 8003640:	f8c9 3000 	str.w	r3, [r9]
 8003644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003648:	460c      	mov	r4, r1
 800364a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800364e:	b112      	cbz	r2, 8003656 <_printf_common+0x2a>
 8003650:	3301      	adds	r3, #1
 8003652:	f8c9 3000 	str.w	r3, [r9]
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	0699      	lsls	r1, r3, #26
 800365a:	bf42      	ittt	mi
 800365c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003660:	3302      	addmi	r3, #2
 8003662:	f8c9 3000 	strmi.w	r3, [r9]
 8003666:	6825      	ldr	r5, [r4, #0]
 8003668:	f015 0506 	ands.w	r5, r5, #6
 800366c:	d107      	bne.n	800367e <_printf_common+0x52>
 800366e:	f104 0a19 	add.w	sl, r4, #25
 8003672:	68e3      	ldr	r3, [r4, #12]
 8003674:	f8d9 2000 	ldr.w	r2, [r9]
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	42ab      	cmp	r3, r5
 800367c:	dc29      	bgt.n	80036d2 <_printf_common+0xa6>
 800367e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003682:	6822      	ldr	r2, [r4, #0]
 8003684:	3300      	adds	r3, #0
 8003686:	bf18      	it	ne
 8003688:	2301      	movne	r3, #1
 800368a:	0692      	lsls	r2, r2, #26
 800368c:	d42e      	bmi.n	80036ec <_printf_common+0xc0>
 800368e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003692:	4639      	mov	r1, r7
 8003694:	4630      	mov	r0, r6
 8003696:	47c0      	blx	r8
 8003698:	3001      	adds	r0, #1
 800369a:	d021      	beq.n	80036e0 <_printf_common+0xb4>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	68e5      	ldr	r5, [r4, #12]
 80036a0:	f003 0306 	and.w	r3, r3, #6
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	bf18      	it	ne
 80036a8:	2500      	movne	r5, #0
 80036aa:	f8d9 2000 	ldr.w	r2, [r9]
 80036ae:	f04f 0900 	mov.w	r9, #0
 80036b2:	bf08      	it	eq
 80036b4:	1aad      	subeq	r5, r5, r2
 80036b6:	68a3      	ldr	r3, [r4, #8]
 80036b8:	6922      	ldr	r2, [r4, #16]
 80036ba:	bf08      	it	eq
 80036bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036c0:	4293      	cmp	r3, r2
 80036c2:	bfc4      	itt	gt
 80036c4:	1a9b      	subgt	r3, r3, r2
 80036c6:	18ed      	addgt	r5, r5, r3
 80036c8:	341a      	adds	r4, #26
 80036ca:	454d      	cmp	r5, r9
 80036cc:	d11a      	bne.n	8003704 <_printf_common+0xd8>
 80036ce:	2000      	movs	r0, #0
 80036d0:	e008      	b.n	80036e4 <_printf_common+0xb8>
 80036d2:	2301      	movs	r3, #1
 80036d4:	4652      	mov	r2, sl
 80036d6:	4639      	mov	r1, r7
 80036d8:	4630      	mov	r0, r6
 80036da:	47c0      	blx	r8
 80036dc:	3001      	adds	r0, #1
 80036de:	d103      	bne.n	80036e8 <_printf_common+0xbc>
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e8:	3501      	adds	r5, #1
 80036ea:	e7c2      	b.n	8003672 <_printf_common+0x46>
 80036ec:	2030      	movs	r0, #48	; 0x30
 80036ee:	18e1      	adds	r1, r4, r3
 80036f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036fa:	4422      	add	r2, r4
 80036fc:	3302      	adds	r3, #2
 80036fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003702:	e7c4      	b.n	800368e <_printf_common+0x62>
 8003704:	2301      	movs	r3, #1
 8003706:	4622      	mov	r2, r4
 8003708:	4639      	mov	r1, r7
 800370a:	4630      	mov	r0, r6
 800370c:	47c0      	blx	r8
 800370e:	3001      	adds	r0, #1
 8003710:	d0e6      	beq.n	80036e0 <_printf_common+0xb4>
 8003712:	f109 0901 	add.w	r9, r9, #1
 8003716:	e7d8      	b.n	80036ca <_printf_common+0x9e>

08003718 <_printf_i>:
 8003718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800371c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003720:	460c      	mov	r4, r1
 8003722:	7e09      	ldrb	r1, [r1, #24]
 8003724:	b085      	sub	sp, #20
 8003726:	296e      	cmp	r1, #110	; 0x6e
 8003728:	4617      	mov	r7, r2
 800372a:	4606      	mov	r6, r0
 800372c:	4698      	mov	r8, r3
 800372e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003730:	f000 80b3 	beq.w	800389a <_printf_i+0x182>
 8003734:	d822      	bhi.n	800377c <_printf_i+0x64>
 8003736:	2963      	cmp	r1, #99	; 0x63
 8003738:	d036      	beq.n	80037a8 <_printf_i+0x90>
 800373a:	d80a      	bhi.n	8003752 <_printf_i+0x3a>
 800373c:	2900      	cmp	r1, #0
 800373e:	f000 80b9 	beq.w	80038b4 <_printf_i+0x19c>
 8003742:	2958      	cmp	r1, #88	; 0x58
 8003744:	f000 8083 	beq.w	800384e <_printf_i+0x136>
 8003748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800374c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003750:	e032      	b.n	80037b8 <_printf_i+0xa0>
 8003752:	2964      	cmp	r1, #100	; 0x64
 8003754:	d001      	beq.n	800375a <_printf_i+0x42>
 8003756:	2969      	cmp	r1, #105	; 0x69
 8003758:	d1f6      	bne.n	8003748 <_printf_i+0x30>
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	6813      	ldr	r3, [r2, #0]
 800375e:	0605      	lsls	r5, r0, #24
 8003760:	f103 0104 	add.w	r1, r3, #4
 8003764:	d52a      	bpl.n	80037bc <_printf_i+0xa4>
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6011      	str	r1, [r2, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da03      	bge.n	8003776 <_printf_i+0x5e>
 800376e:	222d      	movs	r2, #45	; 0x2d
 8003770:	425b      	negs	r3, r3
 8003772:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003776:	486f      	ldr	r0, [pc, #444]	; (8003934 <_printf_i+0x21c>)
 8003778:	220a      	movs	r2, #10
 800377a:	e039      	b.n	80037f0 <_printf_i+0xd8>
 800377c:	2973      	cmp	r1, #115	; 0x73
 800377e:	f000 809d 	beq.w	80038bc <_printf_i+0x1a4>
 8003782:	d808      	bhi.n	8003796 <_printf_i+0x7e>
 8003784:	296f      	cmp	r1, #111	; 0x6f
 8003786:	d020      	beq.n	80037ca <_printf_i+0xb2>
 8003788:	2970      	cmp	r1, #112	; 0x70
 800378a:	d1dd      	bne.n	8003748 <_printf_i+0x30>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f043 0320 	orr.w	r3, r3, #32
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	e003      	b.n	800379e <_printf_i+0x86>
 8003796:	2975      	cmp	r1, #117	; 0x75
 8003798:	d017      	beq.n	80037ca <_printf_i+0xb2>
 800379a:	2978      	cmp	r1, #120	; 0x78
 800379c:	d1d4      	bne.n	8003748 <_printf_i+0x30>
 800379e:	2378      	movs	r3, #120	; 0x78
 80037a0:	4865      	ldr	r0, [pc, #404]	; (8003938 <_printf_i+0x220>)
 80037a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037a6:	e055      	b.n	8003854 <_printf_i+0x13c>
 80037a8:	6813      	ldr	r3, [r2, #0]
 80037aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ae:	1d19      	adds	r1, r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6011      	str	r1, [r2, #0]
 80037b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b8:	2301      	movs	r3, #1
 80037ba:	e08c      	b.n	80038d6 <_printf_i+0x1be>
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80037c2:	6011      	str	r1, [r2, #0]
 80037c4:	bf18      	it	ne
 80037c6:	b21b      	sxthne	r3, r3
 80037c8:	e7cf      	b.n	800376a <_printf_i+0x52>
 80037ca:	6813      	ldr	r3, [r2, #0]
 80037cc:	6825      	ldr	r5, [r4, #0]
 80037ce:	1d18      	adds	r0, r3, #4
 80037d0:	6010      	str	r0, [r2, #0]
 80037d2:	0628      	lsls	r0, r5, #24
 80037d4:	d501      	bpl.n	80037da <_printf_i+0xc2>
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	e002      	b.n	80037e0 <_printf_i+0xc8>
 80037da:	0668      	lsls	r0, r5, #25
 80037dc:	d5fb      	bpl.n	80037d6 <_printf_i+0xbe>
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	296f      	cmp	r1, #111	; 0x6f
 80037e2:	bf14      	ite	ne
 80037e4:	220a      	movne	r2, #10
 80037e6:	2208      	moveq	r2, #8
 80037e8:	4852      	ldr	r0, [pc, #328]	; (8003934 <_printf_i+0x21c>)
 80037ea:	2100      	movs	r1, #0
 80037ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037f0:	6865      	ldr	r5, [r4, #4]
 80037f2:	2d00      	cmp	r5, #0
 80037f4:	60a5      	str	r5, [r4, #8]
 80037f6:	f2c0 8095 	blt.w	8003924 <_printf_i+0x20c>
 80037fa:	6821      	ldr	r1, [r4, #0]
 80037fc:	f021 0104 	bic.w	r1, r1, #4
 8003800:	6021      	str	r1, [r4, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d13d      	bne.n	8003882 <_printf_i+0x16a>
 8003806:	2d00      	cmp	r5, #0
 8003808:	f040 808e 	bne.w	8003928 <_printf_i+0x210>
 800380c:	4665      	mov	r5, ip
 800380e:	2a08      	cmp	r2, #8
 8003810:	d10b      	bne.n	800382a <_printf_i+0x112>
 8003812:	6823      	ldr	r3, [r4, #0]
 8003814:	07db      	lsls	r3, r3, #31
 8003816:	d508      	bpl.n	800382a <_printf_i+0x112>
 8003818:	6923      	ldr	r3, [r4, #16]
 800381a:	6862      	ldr	r2, [r4, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	bfde      	ittt	le
 8003820:	2330      	movle	r3, #48	; 0x30
 8003822:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003826:	f105 35ff 	addle.w	r5, r5, #4294967295
 800382a:	ebac 0305 	sub.w	r3, ip, r5
 800382e:	6123      	str	r3, [r4, #16]
 8003830:	f8cd 8000 	str.w	r8, [sp]
 8003834:	463b      	mov	r3, r7
 8003836:	aa03      	add	r2, sp, #12
 8003838:	4621      	mov	r1, r4
 800383a:	4630      	mov	r0, r6
 800383c:	f7ff fef6 	bl	800362c <_printf_common>
 8003840:	3001      	adds	r0, #1
 8003842:	d14d      	bne.n	80038e0 <_printf_i+0x1c8>
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	b005      	add	sp, #20
 800384a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800384e:	4839      	ldr	r0, [pc, #228]	; (8003934 <_printf_i+0x21c>)
 8003850:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	1d1d      	adds	r5, r3, #4
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6015      	str	r5, [r2, #0]
 800385e:	060a      	lsls	r2, r1, #24
 8003860:	d50b      	bpl.n	800387a <_printf_i+0x162>
 8003862:	07ca      	lsls	r2, r1, #31
 8003864:	bf44      	itt	mi
 8003866:	f041 0120 	orrmi.w	r1, r1, #32
 800386a:	6021      	strmi	r1, [r4, #0]
 800386c:	b91b      	cbnz	r3, 8003876 <_printf_i+0x15e>
 800386e:	6822      	ldr	r2, [r4, #0]
 8003870:	f022 0220 	bic.w	r2, r2, #32
 8003874:	6022      	str	r2, [r4, #0]
 8003876:	2210      	movs	r2, #16
 8003878:	e7b7      	b.n	80037ea <_printf_i+0xd2>
 800387a:	064d      	lsls	r5, r1, #25
 800387c:	bf48      	it	mi
 800387e:	b29b      	uxthmi	r3, r3
 8003880:	e7ef      	b.n	8003862 <_printf_i+0x14a>
 8003882:	4665      	mov	r5, ip
 8003884:	fbb3 f1f2 	udiv	r1, r3, r2
 8003888:	fb02 3311 	mls	r3, r2, r1, r3
 800388c:	5cc3      	ldrb	r3, [r0, r3]
 800388e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003892:	460b      	mov	r3, r1
 8003894:	2900      	cmp	r1, #0
 8003896:	d1f5      	bne.n	8003884 <_printf_i+0x16c>
 8003898:	e7b9      	b.n	800380e <_printf_i+0xf6>
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	1d18      	adds	r0, r3, #4
 80038a0:	6961      	ldr	r1, [r4, #20]
 80038a2:	6010      	str	r0, [r2, #0]
 80038a4:	0628      	lsls	r0, r5, #24
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	d501      	bpl.n	80038ae <_printf_i+0x196>
 80038aa:	6019      	str	r1, [r3, #0]
 80038ac:	e002      	b.n	80038b4 <_printf_i+0x19c>
 80038ae:	066a      	lsls	r2, r5, #25
 80038b0:	d5fb      	bpl.n	80038aa <_printf_i+0x192>
 80038b2:	8019      	strh	r1, [r3, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	4665      	mov	r5, ip
 80038b8:	6123      	str	r3, [r4, #16]
 80038ba:	e7b9      	b.n	8003830 <_printf_i+0x118>
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	1d19      	adds	r1, r3, #4
 80038c0:	6011      	str	r1, [r2, #0]
 80038c2:	681d      	ldr	r5, [r3, #0]
 80038c4:	6862      	ldr	r2, [r4, #4]
 80038c6:	2100      	movs	r1, #0
 80038c8:	4628      	mov	r0, r5
 80038ca:	f002 fc41 	bl	8006150 <memchr>
 80038ce:	b108      	cbz	r0, 80038d4 <_printf_i+0x1bc>
 80038d0:	1b40      	subs	r0, r0, r5
 80038d2:	6060      	str	r0, [r4, #4]
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	6123      	str	r3, [r4, #16]
 80038d8:	2300      	movs	r3, #0
 80038da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038de:	e7a7      	b.n	8003830 <_printf_i+0x118>
 80038e0:	6923      	ldr	r3, [r4, #16]
 80038e2:	462a      	mov	r2, r5
 80038e4:	4639      	mov	r1, r7
 80038e6:	4630      	mov	r0, r6
 80038e8:	47c0      	blx	r8
 80038ea:	3001      	adds	r0, #1
 80038ec:	d0aa      	beq.n	8003844 <_printf_i+0x12c>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	079b      	lsls	r3, r3, #30
 80038f2:	d413      	bmi.n	800391c <_printf_i+0x204>
 80038f4:	68e0      	ldr	r0, [r4, #12]
 80038f6:	9b03      	ldr	r3, [sp, #12]
 80038f8:	4298      	cmp	r0, r3
 80038fa:	bfb8      	it	lt
 80038fc:	4618      	movlt	r0, r3
 80038fe:	e7a3      	b.n	8003848 <_printf_i+0x130>
 8003900:	2301      	movs	r3, #1
 8003902:	464a      	mov	r2, r9
 8003904:	4639      	mov	r1, r7
 8003906:	4630      	mov	r0, r6
 8003908:	47c0      	blx	r8
 800390a:	3001      	adds	r0, #1
 800390c:	d09a      	beq.n	8003844 <_printf_i+0x12c>
 800390e:	3501      	adds	r5, #1
 8003910:	68e3      	ldr	r3, [r4, #12]
 8003912:	9a03      	ldr	r2, [sp, #12]
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	42ab      	cmp	r3, r5
 8003918:	dcf2      	bgt.n	8003900 <_printf_i+0x1e8>
 800391a:	e7eb      	b.n	80038f4 <_printf_i+0x1dc>
 800391c:	2500      	movs	r5, #0
 800391e:	f104 0919 	add.w	r9, r4, #25
 8003922:	e7f5      	b.n	8003910 <_printf_i+0x1f8>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1ac      	bne.n	8003882 <_printf_i+0x16a>
 8003928:	7803      	ldrb	r3, [r0, #0]
 800392a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800392e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003932:	e76c      	b.n	800380e <_printf_i+0xf6>
 8003934:	08007f14 	.word	0x08007f14
 8003938:	08007f25 	.word	0x08007f25

0800393c <_scanf_float>:
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	469a      	mov	sl, r3
 8003942:	688b      	ldr	r3, [r1, #8]
 8003944:	4616      	mov	r6, r2
 8003946:	1e5a      	subs	r2, r3, #1
 8003948:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800394c:	bf88      	it	hi
 800394e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003952:	b087      	sub	sp, #28
 8003954:	bf85      	ittet	hi
 8003956:	189b      	addhi	r3, r3, r2
 8003958:	9301      	strhi	r3, [sp, #4]
 800395a:	2300      	movls	r3, #0
 800395c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003960:	4688      	mov	r8, r1
 8003962:	f04f 0b00 	mov.w	fp, #0
 8003966:	bf8c      	ite	hi
 8003968:	608b      	strhi	r3, [r1, #8]
 800396a:	9301      	strls	r3, [sp, #4]
 800396c:	680b      	ldr	r3, [r1, #0]
 800396e:	4607      	mov	r7, r0
 8003970:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003974:	f848 3b1c 	str.w	r3, [r8], #28
 8003978:	460c      	mov	r4, r1
 800397a:	4645      	mov	r5, r8
 800397c:	465a      	mov	r2, fp
 800397e:	46d9      	mov	r9, fp
 8003980:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003984:	f8cd b008 	str.w	fp, [sp, #8]
 8003988:	68a1      	ldr	r1, [r4, #8]
 800398a:	b181      	cbz	r1, 80039ae <_scanf_float+0x72>
 800398c:	6833      	ldr	r3, [r6, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b49      	cmp	r3, #73	; 0x49
 8003992:	d071      	beq.n	8003a78 <_scanf_float+0x13c>
 8003994:	d84d      	bhi.n	8003a32 <_scanf_float+0xf6>
 8003996:	2b39      	cmp	r3, #57	; 0x39
 8003998:	d840      	bhi.n	8003a1c <_scanf_float+0xe0>
 800399a:	2b31      	cmp	r3, #49	; 0x31
 800399c:	f080 8088 	bcs.w	8003ab0 <_scanf_float+0x174>
 80039a0:	2b2d      	cmp	r3, #45	; 0x2d
 80039a2:	f000 8090 	beq.w	8003ac6 <_scanf_float+0x18a>
 80039a6:	d815      	bhi.n	80039d4 <_scanf_float+0x98>
 80039a8:	2b2b      	cmp	r3, #43	; 0x2b
 80039aa:	f000 808c 	beq.w	8003ac6 <_scanf_float+0x18a>
 80039ae:	f1b9 0f00 	cmp.w	r9, #0
 80039b2:	d003      	beq.n	80039bc <_scanf_float+0x80>
 80039b4:	6823      	ldr	r3, [r4, #0]
 80039b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ba:	6023      	str	r3, [r4, #0]
 80039bc:	3a01      	subs	r2, #1
 80039be:	2a01      	cmp	r2, #1
 80039c0:	f200 80ea 	bhi.w	8003b98 <_scanf_float+0x25c>
 80039c4:	4545      	cmp	r5, r8
 80039c6:	f200 80dc 	bhi.w	8003b82 <_scanf_float+0x246>
 80039ca:	2601      	movs	r6, #1
 80039cc:	4630      	mov	r0, r6
 80039ce:	b007      	add	sp, #28
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d4:	2b2e      	cmp	r3, #46	; 0x2e
 80039d6:	f000 809f 	beq.w	8003b18 <_scanf_float+0x1dc>
 80039da:	2b30      	cmp	r3, #48	; 0x30
 80039dc:	d1e7      	bne.n	80039ae <_scanf_float+0x72>
 80039de:	6820      	ldr	r0, [r4, #0]
 80039e0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80039e4:	d064      	beq.n	8003ab0 <_scanf_float+0x174>
 80039e6:	9b01      	ldr	r3, [sp, #4]
 80039e8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80039ec:	6020      	str	r0, [r4, #0]
 80039ee:	f109 0901 	add.w	r9, r9, #1
 80039f2:	b11b      	cbz	r3, 80039fc <_scanf_float+0xc0>
 80039f4:	3b01      	subs	r3, #1
 80039f6:	3101      	adds	r1, #1
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	60a1      	str	r1, [r4, #8]
 80039fc:	68a3      	ldr	r3, [r4, #8]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	60a3      	str	r3, [r4, #8]
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	3301      	adds	r3, #1
 8003a06:	6123      	str	r3, [r4, #16]
 8003a08:	6873      	ldr	r3, [r6, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	6073      	str	r3, [r6, #4]
 8003a10:	f340 80ac 	ble.w	8003b6c <_scanf_float+0x230>
 8003a14:	6833      	ldr	r3, [r6, #0]
 8003a16:	3301      	adds	r3, #1
 8003a18:	6033      	str	r3, [r6, #0]
 8003a1a:	e7b5      	b.n	8003988 <_scanf_float+0x4c>
 8003a1c:	2b45      	cmp	r3, #69	; 0x45
 8003a1e:	f000 8085 	beq.w	8003b2c <_scanf_float+0x1f0>
 8003a22:	2b46      	cmp	r3, #70	; 0x46
 8003a24:	d06a      	beq.n	8003afc <_scanf_float+0x1c0>
 8003a26:	2b41      	cmp	r3, #65	; 0x41
 8003a28:	d1c1      	bne.n	80039ae <_scanf_float+0x72>
 8003a2a:	2a01      	cmp	r2, #1
 8003a2c:	d1bf      	bne.n	80039ae <_scanf_float+0x72>
 8003a2e:	2202      	movs	r2, #2
 8003a30:	e046      	b.n	8003ac0 <_scanf_float+0x184>
 8003a32:	2b65      	cmp	r3, #101	; 0x65
 8003a34:	d07a      	beq.n	8003b2c <_scanf_float+0x1f0>
 8003a36:	d818      	bhi.n	8003a6a <_scanf_float+0x12e>
 8003a38:	2b54      	cmp	r3, #84	; 0x54
 8003a3a:	d066      	beq.n	8003b0a <_scanf_float+0x1ce>
 8003a3c:	d811      	bhi.n	8003a62 <_scanf_float+0x126>
 8003a3e:	2b4e      	cmp	r3, #78	; 0x4e
 8003a40:	d1b5      	bne.n	80039ae <_scanf_float+0x72>
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d146      	bne.n	8003ad4 <_scanf_float+0x198>
 8003a46:	f1b9 0f00 	cmp.w	r9, #0
 8003a4a:	d145      	bne.n	8003ad8 <_scanf_float+0x19c>
 8003a4c:	6821      	ldr	r1, [r4, #0]
 8003a4e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003a52:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003a56:	d13f      	bne.n	8003ad8 <_scanf_float+0x19c>
 8003a58:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003a5c:	6021      	str	r1, [r4, #0]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	e02e      	b.n	8003ac0 <_scanf_float+0x184>
 8003a62:	2b59      	cmp	r3, #89	; 0x59
 8003a64:	d01e      	beq.n	8003aa4 <_scanf_float+0x168>
 8003a66:	2b61      	cmp	r3, #97	; 0x61
 8003a68:	e7de      	b.n	8003a28 <_scanf_float+0xec>
 8003a6a:	2b6e      	cmp	r3, #110	; 0x6e
 8003a6c:	d0e9      	beq.n	8003a42 <_scanf_float+0x106>
 8003a6e:	d815      	bhi.n	8003a9c <_scanf_float+0x160>
 8003a70:	2b66      	cmp	r3, #102	; 0x66
 8003a72:	d043      	beq.n	8003afc <_scanf_float+0x1c0>
 8003a74:	2b69      	cmp	r3, #105	; 0x69
 8003a76:	d19a      	bne.n	80039ae <_scanf_float+0x72>
 8003a78:	f1bb 0f00 	cmp.w	fp, #0
 8003a7c:	d138      	bne.n	8003af0 <_scanf_float+0x1b4>
 8003a7e:	f1b9 0f00 	cmp.w	r9, #0
 8003a82:	d197      	bne.n	80039b4 <_scanf_float+0x78>
 8003a84:	6821      	ldr	r1, [r4, #0]
 8003a86:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003a8a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003a8e:	d195      	bne.n	80039bc <_scanf_float+0x80>
 8003a90:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003a94:	6021      	str	r1, [r4, #0]
 8003a96:	f04f 0b01 	mov.w	fp, #1
 8003a9a:	e011      	b.n	8003ac0 <_scanf_float+0x184>
 8003a9c:	2b74      	cmp	r3, #116	; 0x74
 8003a9e:	d034      	beq.n	8003b0a <_scanf_float+0x1ce>
 8003aa0:	2b79      	cmp	r3, #121	; 0x79
 8003aa2:	d184      	bne.n	80039ae <_scanf_float+0x72>
 8003aa4:	f1bb 0f07 	cmp.w	fp, #7
 8003aa8:	d181      	bne.n	80039ae <_scanf_float+0x72>
 8003aaa:	f04f 0b08 	mov.w	fp, #8
 8003aae:	e007      	b.n	8003ac0 <_scanf_float+0x184>
 8003ab0:	eb12 0f0b 	cmn.w	r2, fp
 8003ab4:	f47f af7b 	bne.w	80039ae <_scanf_float+0x72>
 8003ab8:	6821      	ldr	r1, [r4, #0]
 8003aba:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003abe:	6021      	str	r1, [r4, #0]
 8003ac0:	702b      	strb	r3, [r5, #0]
 8003ac2:	3501      	adds	r5, #1
 8003ac4:	e79a      	b.n	80039fc <_scanf_float+0xc0>
 8003ac6:	6821      	ldr	r1, [r4, #0]
 8003ac8:	0608      	lsls	r0, r1, #24
 8003aca:	f57f af70 	bpl.w	80039ae <_scanf_float+0x72>
 8003ace:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ad2:	e7f4      	b.n	8003abe <_scanf_float+0x182>
 8003ad4:	2a02      	cmp	r2, #2
 8003ad6:	d047      	beq.n	8003b68 <_scanf_float+0x22c>
 8003ad8:	f1bb 0f01 	cmp.w	fp, #1
 8003adc:	d003      	beq.n	8003ae6 <_scanf_float+0x1aa>
 8003ade:	f1bb 0f04 	cmp.w	fp, #4
 8003ae2:	f47f af64 	bne.w	80039ae <_scanf_float+0x72>
 8003ae6:	f10b 0b01 	add.w	fp, fp, #1
 8003aea:	fa5f fb8b 	uxtb.w	fp, fp
 8003aee:	e7e7      	b.n	8003ac0 <_scanf_float+0x184>
 8003af0:	f1bb 0f03 	cmp.w	fp, #3
 8003af4:	d0f7      	beq.n	8003ae6 <_scanf_float+0x1aa>
 8003af6:	f1bb 0f05 	cmp.w	fp, #5
 8003afa:	e7f2      	b.n	8003ae2 <_scanf_float+0x1a6>
 8003afc:	f1bb 0f02 	cmp.w	fp, #2
 8003b00:	f47f af55 	bne.w	80039ae <_scanf_float+0x72>
 8003b04:	f04f 0b03 	mov.w	fp, #3
 8003b08:	e7da      	b.n	8003ac0 <_scanf_float+0x184>
 8003b0a:	f1bb 0f06 	cmp.w	fp, #6
 8003b0e:	f47f af4e 	bne.w	80039ae <_scanf_float+0x72>
 8003b12:	f04f 0b07 	mov.w	fp, #7
 8003b16:	e7d3      	b.n	8003ac0 <_scanf_float+0x184>
 8003b18:	6821      	ldr	r1, [r4, #0]
 8003b1a:	0588      	lsls	r0, r1, #22
 8003b1c:	f57f af47 	bpl.w	80039ae <_scanf_float+0x72>
 8003b20:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003b24:	6021      	str	r1, [r4, #0]
 8003b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8003b2a:	e7c9      	b.n	8003ac0 <_scanf_float+0x184>
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003b32:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003b36:	d006      	beq.n	8003b46 <_scanf_float+0x20a>
 8003b38:	0548      	lsls	r0, r1, #21
 8003b3a:	f57f af38 	bpl.w	80039ae <_scanf_float+0x72>
 8003b3e:	f1b9 0f00 	cmp.w	r9, #0
 8003b42:	f43f af3b 	beq.w	80039bc <_scanf_float+0x80>
 8003b46:	0588      	lsls	r0, r1, #22
 8003b48:	bf58      	it	pl
 8003b4a:	9802      	ldrpl	r0, [sp, #8]
 8003b4c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b50:	bf58      	it	pl
 8003b52:	eba9 0000 	subpl.w	r0, r9, r0
 8003b56:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003b5a:	bf58      	it	pl
 8003b5c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003b60:	6021      	str	r1, [r4, #0]
 8003b62:	f04f 0900 	mov.w	r9, #0
 8003b66:	e7ab      	b.n	8003ac0 <_scanf_float+0x184>
 8003b68:	2203      	movs	r2, #3
 8003b6a:	e7a9      	b.n	8003ac0 <_scanf_float+0x184>
 8003b6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003b70:	4631      	mov	r1, r6
 8003b72:	4638      	mov	r0, r7
 8003b74:	9205      	str	r2, [sp, #20]
 8003b76:	4798      	blx	r3
 8003b78:	9a05      	ldr	r2, [sp, #20]
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	f43f af04 	beq.w	8003988 <_scanf_float+0x4c>
 8003b80:	e715      	b.n	80039ae <_scanf_float+0x72>
 8003b82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003b86:	4632      	mov	r2, r6
 8003b88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003b8c:	4638      	mov	r0, r7
 8003b8e:	4798      	blx	r3
 8003b90:	6923      	ldr	r3, [r4, #16]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	e715      	b.n	80039c4 <_scanf_float+0x88>
 8003b98:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003b9c:	2b06      	cmp	r3, #6
 8003b9e:	d80a      	bhi.n	8003bb6 <_scanf_float+0x27a>
 8003ba0:	f1bb 0f02 	cmp.w	fp, #2
 8003ba4:	d967      	bls.n	8003c76 <_scanf_float+0x33a>
 8003ba6:	f1ab 0b03 	sub.w	fp, fp, #3
 8003baa:	fa5f fb8b 	uxtb.w	fp, fp
 8003bae:	eba5 0b0b 	sub.w	fp, r5, fp
 8003bb2:	455d      	cmp	r5, fp
 8003bb4:	d14a      	bne.n	8003c4c <_scanf_float+0x310>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	05da      	lsls	r2, r3, #23
 8003bba:	d51f      	bpl.n	8003bfc <_scanf_float+0x2c0>
 8003bbc:	055b      	lsls	r3, r3, #21
 8003bbe:	d467      	bmi.n	8003c90 <_scanf_float+0x354>
 8003bc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003bc4:	6923      	ldr	r3, [r4, #16]
 8003bc6:	2965      	cmp	r1, #101	; 0x65
 8003bc8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bcc:	f105 3bff 	add.w	fp, r5, #4294967295
 8003bd0:	6123      	str	r3, [r4, #16]
 8003bd2:	d00d      	beq.n	8003bf0 <_scanf_float+0x2b4>
 8003bd4:	2945      	cmp	r1, #69	; 0x45
 8003bd6:	d00b      	beq.n	8003bf0 <_scanf_float+0x2b4>
 8003bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bdc:	4632      	mov	r2, r6
 8003bde:	4638      	mov	r0, r7
 8003be0:	4798      	blx	r3
 8003be2:	6923      	ldr	r3, [r4, #16]
 8003be4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	f1a5 0b02 	sub.w	fp, r5, #2
 8003bee:	6123      	str	r3, [r4, #16]
 8003bf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003bf4:	4632      	mov	r2, r6
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	4798      	blx	r3
 8003bfa:	465d      	mov	r5, fp
 8003bfc:	6826      	ldr	r6, [r4, #0]
 8003bfe:	f016 0610 	ands.w	r6, r6, #16
 8003c02:	d176      	bne.n	8003cf2 <_scanf_float+0x3b6>
 8003c04:	702e      	strb	r6, [r5, #0]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c10:	d141      	bne.n	8003c96 <_scanf_float+0x35a>
 8003c12:	9b02      	ldr	r3, [sp, #8]
 8003c14:	eba9 0303 	sub.w	r3, r9, r3
 8003c18:	425a      	negs	r2, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d148      	bne.n	8003cb0 <_scanf_float+0x374>
 8003c1e:	4641      	mov	r1, r8
 8003c20:	2200      	movs	r2, #0
 8003c22:	4638      	mov	r0, r7
 8003c24:	f000 ff50 	bl	8004ac8 <_strtod_r>
 8003c28:	6825      	ldr	r5, [r4, #0]
 8003c2a:	4680      	mov	r8, r0
 8003c2c:	f015 0f02 	tst.w	r5, #2
 8003c30:	4689      	mov	r9, r1
 8003c32:	f8da 3000 	ldr.w	r3, [sl]
 8003c36:	d046      	beq.n	8003cc6 <_scanf_float+0x38a>
 8003c38:	1d1a      	adds	r2, r3, #4
 8003c3a:	f8ca 2000 	str.w	r2, [sl]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	e9c3 8900 	strd	r8, r9, [r3]
 8003c44:	68e3      	ldr	r3, [r4, #12]
 8003c46:	3301      	adds	r3, #1
 8003c48:	60e3      	str	r3, [r4, #12]
 8003c4a:	e6bf      	b.n	80039cc <_scanf_float+0x90>
 8003c4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c50:	4632      	mov	r2, r6
 8003c52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c56:	4638      	mov	r0, r7
 8003c58:	4798      	blx	r3
 8003c5a:	6923      	ldr	r3, [r4, #16]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	6123      	str	r3, [r4, #16]
 8003c60:	e7a7      	b.n	8003bb2 <_scanf_float+0x276>
 8003c62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c66:	4632      	mov	r2, r6
 8003c68:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c6c:	4638      	mov	r0, r7
 8003c6e:	4798      	blx	r3
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	4545      	cmp	r5, r8
 8003c78:	d8f3      	bhi.n	8003c62 <_scanf_float+0x326>
 8003c7a:	e6a6      	b.n	80039ca <_scanf_float+0x8e>
 8003c7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c80:	4632      	mov	r2, r6
 8003c82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c86:	4638      	mov	r0, r7
 8003c88:	4798      	blx	r3
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	6123      	str	r3, [r4, #16]
 8003c90:	4545      	cmp	r5, r8
 8003c92:	d8f3      	bhi.n	8003c7c <_scanf_float+0x340>
 8003c94:	e699      	b.n	80039ca <_scanf_float+0x8e>
 8003c96:	9b03      	ldr	r3, [sp, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0c0      	beq.n	8003c1e <_scanf_float+0x2e2>
 8003c9c:	9904      	ldr	r1, [sp, #16]
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	3101      	adds	r1, #1
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f000 ff9b 	bl	8004be0 <_strtol_r>
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	9d04      	ldr	r5, [sp, #16]
 8003cae:	1ac2      	subs	r2, r0, r3
 8003cb0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003cb4:	429d      	cmp	r5, r3
 8003cb6:	bf28      	it	cs
 8003cb8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003cbc:	490e      	ldr	r1, [pc, #56]	; (8003cf8 <_scanf_float+0x3bc>)
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f000 f838 	bl	8003d34 <siprintf>
 8003cc4:	e7ab      	b.n	8003c1e <_scanf_float+0x2e2>
 8003cc6:	1d1f      	adds	r7, r3, #4
 8003cc8:	f015 0504 	ands.w	r5, r5, #4
 8003ccc:	f8ca 7000 	str.w	r7, [sl]
 8003cd0:	d1b5      	bne.n	8003c3e <_scanf_float+0x302>
 8003cd2:	681f      	ldr	r7, [r3, #0]
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	f7fc fe98 	bl	8000a0c <__aeabi_dcmpun>
 8003cdc:	b120      	cbz	r0, 8003ce8 <_scanf_float+0x3ac>
 8003cde:	4628      	mov	r0, r5
 8003ce0:	f000 f824 	bl	8003d2c <nanf>
 8003ce4:	6038      	str	r0, [r7, #0]
 8003ce6:	e7ad      	b.n	8003c44 <_scanf_float+0x308>
 8003ce8:	4640      	mov	r0, r8
 8003cea:	4649      	mov	r1, r9
 8003cec:	f7fc feec 	bl	8000ac8 <__aeabi_d2f>
 8003cf0:	e7f8      	b.n	8003ce4 <_scanf_float+0x3a8>
 8003cf2:	2600      	movs	r6, #0
 8003cf4:	e66a      	b.n	80039cc <_scanf_float+0x90>
 8003cf6:	bf00      	nop
 8003cf8:	08007f36 	.word	0x08007f36

08003cfc <iprintf>:
 8003cfc:	b40f      	push	{r0, r1, r2, r3}
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <iprintf+0x2c>)
 8003d00:	b513      	push	{r0, r1, r4, lr}
 8003d02:	681c      	ldr	r4, [r3, #0]
 8003d04:	b124      	cbz	r4, 8003d10 <iprintf+0x14>
 8003d06:	69a3      	ldr	r3, [r4, #24]
 8003d08:	b913      	cbnz	r3, 8003d10 <iprintf+0x14>
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f001 fe20 	bl	8005950 <__sinit>
 8003d10:	ab05      	add	r3, sp, #20
 8003d12:	9a04      	ldr	r2, [sp, #16]
 8003d14:	68a1      	ldr	r1, [r4, #8]
 8003d16:	4620      	mov	r0, r4
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	f003 fa03 	bl	8007124 <_vfiprintf_r>
 8003d1e:	b002      	add	sp, #8
 8003d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d24:	b004      	add	sp, #16
 8003d26:	4770      	bx	lr
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <nanf>:
 8003d2c:	4800      	ldr	r0, [pc, #0]	; (8003d30 <nanf+0x4>)
 8003d2e:	4770      	bx	lr
 8003d30:	7fc00000 	.word	0x7fc00000

08003d34 <siprintf>:
 8003d34:	b40e      	push	{r1, r2, r3}
 8003d36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d3a:	b500      	push	{lr}
 8003d3c:	b09c      	sub	sp, #112	; 0x70
 8003d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d40:	9002      	str	r0, [sp, #8]
 8003d42:	9006      	str	r0, [sp, #24]
 8003d44:	9107      	str	r1, [sp, #28]
 8003d46:	9104      	str	r1, [sp, #16]
 8003d48:	4808      	ldr	r0, [pc, #32]	; (8003d6c <siprintf+0x38>)
 8003d4a:	4909      	ldr	r1, [pc, #36]	; (8003d70 <siprintf+0x3c>)
 8003d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d50:	9105      	str	r1, [sp, #20]
 8003d52:	6800      	ldr	r0, [r0, #0]
 8003d54:	a902      	add	r1, sp, #8
 8003d56:	9301      	str	r3, [sp, #4]
 8003d58:	f002 ff1a 	bl	8006b90 <_svfiprintf_r>
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	9b02      	ldr	r3, [sp, #8]
 8003d60:	701a      	strb	r2, [r3, #0]
 8003d62:	b01c      	add	sp, #112	; 0x70
 8003d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d68:	b003      	add	sp, #12
 8003d6a:	4770      	bx	lr
 8003d6c:	2000000c 	.word	0x2000000c
 8003d70:	ffff0208 	.word	0xffff0208

08003d74 <siscanf>:
 8003d74:	b40e      	push	{r1, r2, r3}
 8003d76:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003d7a:	b530      	push	{r4, r5, lr}
 8003d7c:	b09c      	sub	sp, #112	; 0x70
 8003d7e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003d80:	f854 5b04 	ldr.w	r5, [r4], #4
 8003d84:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003d88:	9002      	str	r0, [sp, #8]
 8003d8a:	9006      	str	r0, [sp, #24]
 8003d8c:	f7fc f9e0 	bl	8000150 <strlen>
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <siscanf+0x4c>)
 8003d92:	9003      	str	r0, [sp, #12]
 8003d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d96:	2300      	movs	r3, #0
 8003d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d9a:	9314      	str	r3, [sp, #80]	; 0x50
 8003d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da0:	9007      	str	r0, [sp, #28]
 8003da2:	4808      	ldr	r0, [pc, #32]	; (8003dc4 <siscanf+0x50>)
 8003da4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003da8:	462a      	mov	r2, r5
 8003daa:	4623      	mov	r3, r4
 8003dac:	a902      	add	r1, sp, #8
 8003dae:	6800      	ldr	r0, [r0, #0]
 8003db0:	9401      	str	r4, [sp, #4]
 8003db2:	f003 f83f 	bl	8006e34 <__ssvfiscanf_r>
 8003db6:	b01c      	add	sp, #112	; 0x70
 8003db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dbc:	b003      	add	sp, #12
 8003dbe:	4770      	bx	lr
 8003dc0:	08003deb 	.word	0x08003deb
 8003dc4:	2000000c 	.word	0x2000000c

08003dc8 <__sread>:
 8003dc8:	b510      	push	{r4, lr}
 8003dca:	460c      	mov	r4, r1
 8003dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dd0:	f003 fc16 	bl	8007600 <_read_r>
 8003dd4:	2800      	cmp	r0, #0
 8003dd6:	bfab      	itete	ge
 8003dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dda:	89a3      	ldrhlt	r3, [r4, #12]
 8003ddc:	181b      	addge	r3, r3, r0
 8003dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003de2:	bfac      	ite	ge
 8003de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003de6:	81a3      	strhlt	r3, [r4, #12]
 8003de8:	bd10      	pop	{r4, pc}

08003dea <__seofread>:
 8003dea:	2000      	movs	r0, #0
 8003dec:	4770      	bx	lr

08003dee <__swrite>:
 8003dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df2:	461f      	mov	r7, r3
 8003df4:	898b      	ldrh	r3, [r1, #12]
 8003df6:	4605      	mov	r5, r0
 8003df8:	05db      	lsls	r3, r3, #23
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	d505      	bpl.n	8003e0c <__swrite+0x1e>
 8003e00:	2302      	movs	r3, #2
 8003e02:	2200      	movs	r2, #0
 8003e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e08:	f002 f976 	bl	80060f8 <_lseek_r>
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	4632      	mov	r2, r6
 8003e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e1a:	463b      	mov	r3, r7
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e22:	f000 beef 	b.w	8004c04 <_write_r>

08003e26 <__sseek>:
 8003e26:	b510      	push	{r4, lr}
 8003e28:	460c      	mov	r4, r1
 8003e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2e:	f002 f963 	bl	80060f8 <_lseek_r>
 8003e32:	1c43      	adds	r3, r0, #1
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	bf15      	itete	ne
 8003e38:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e42:	81a3      	strheq	r3, [r4, #12]
 8003e44:	bf18      	it	ne
 8003e46:	81a3      	strhne	r3, [r4, #12]
 8003e48:	bd10      	pop	{r4, pc}

08003e4a <__sclose>:
 8003e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4e:	f000 beeb 	b.w	8004c28 <_close_r>

08003e52 <strstr>:
 8003e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e54:	7803      	ldrb	r3, [r0, #0]
 8003e56:	b17b      	cbz	r3, 8003e78 <strstr+0x26>
 8003e58:	4604      	mov	r4, r0
 8003e5a:	7823      	ldrb	r3, [r4, #0]
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	1c66      	adds	r6, r4, #1
 8003e60:	b17b      	cbz	r3, 8003e82 <strstr+0x30>
 8003e62:	1e4a      	subs	r2, r1, #1
 8003e64:	1e63      	subs	r3, r4, #1
 8003e66:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8003e6a:	b14d      	cbz	r5, 8003e80 <strstr+0x2e>
 8003e6c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003e70:	4634      	mov	r4, r6
 8003e72:	42af      	cmp	r7, r5
 8003e74:	d0f7      	beq.n	8003e66 <strstr+0x14>
 8003e76:	e7f0      	b.n	8003e5a <strstr+0x8>
 8003e78:	780b      	ldrb	r3, [r1, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf18      	it	ne
 8003e7e:	2000      	movne	r0, #0
 8003e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e82:	4618      	mov	r0, r3
 8003e84:	e7fc      	b.n	8003e80 <strstr+0x2e>

08003e86 <sulp>:
 8003e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	4690      	mov	r8, r2
 8003e8e:	f002 fc43 	bl	8006718 <__ulp>
 8003e92:	4604      	mov	r4, r0
 8003e94:	460d      	mov	r5, r1
 8003e96:	f1b8 0f00 	cmp.w	r8, #0
 8003e9a:	d011      	beq.n	8003ec0 <sulp+0x3a>
 8003e9c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003ea0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	dd0b      	ble.n	8003ec0 <sulp+0x3a>
 8003ea8:	2400      	movs	r4, #0
 8003eaa:	051b      	lsls	r3, r3, #20
 8003eac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003eb0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003eb4:	4622      	mov	r2, r4
 8003eb6:	462b      	mov	r3, r5
 8003eb8:	f7fc fb0e 	bl	80004d8 <__aeabi_dmul>
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	460d      	mov	r5, r1
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ec8 <_strtod_l>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	461f      	mov	r7, r3
 8003ece:	2300      	movs	r3, #0
 8003ed0:	b0a1      	sub	sp, #132	; 0x84
 8003ed2:	4683      	mov	fp, r0
 8003ed4:	4638      	mov	r0, r7
 8003ed6:	460e      	mov	r6, r1
 8003ed8:	9217      	str	r2, [sp, #92]	; 0x5c
 8003eda:	931c      	str	r3, [sp, #112]	; 0x70
 8003edc:	f002 f8fc 	bl	80060d8 <__localeconv_l>
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	f7fc f934 	bl	8000150 <strlen>
 8003ee8:	f04f 0900 	mov.w	r9, #0
 8003eec:	4604      	mov	r4, r0
 8003eee:	f04f 0a00 	mov.w	sl, #0
 8003ef2:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	2a0d      	cmp	r2, #13
 8003efa:	d832      	bhi.n	8003f62 <_strtod_l+0x9a>
 8003efc:	2a09      	cmp	r2, #9
 8003efe:	d236      	bcs.n	8003f6e <_strtod_l+0xa6>
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	d03e      	beq.n	8003f82 <_strtod_l+0xba>
 8003f04:	2300      	movs	r3, #0
 8003f06:	930d      	str	r3, [sp, #52]	; 0x34
 8003f08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f0a:	782b      	ldrb	r3, [r5, #0]
 8003f0c:	2b30      	cmp	r3, #48	; 0x30
 8003f0e:	f040 80ac 	bne.w	800406a <_strtod_l+0x1a2>
 8003f12:	786b      	ldrb	r3, [r5, #1]
 8003f14:	2b58      	cmp	r3, #88	; 0x58
 8003f16:	d001      	beq.n	8003f1c <_strtod_l+0x54>
 8003f18:	2b78      	cmp	r3, #120	; 0x78
 8003f1a:	d167      	bne.n	8003fec <_strtod_l+0x124>
 8003f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f1e:	9702      	str	r7, [sp, #8]
 8003f20:	9301      	str	r3, [sp, #4]
 8003f22:	ab1c      	add	r3, sp, #112	; 0x70
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4a89      	ldr	r2, [pc, #548]	; (800414c <_strtod_l+0x284>)
 8003f28:	ab1d      	add	r3, sp, #116	; 0x74
 8003f2a:	a91b      	add	r1, sp, #108	; 0x6c
 8003f2c:	4658      	mov	r0, fp
 8003f2e:	f001 fde9 	bl	8005b04 <__gethex>
 8003f32:	f010 0407 	ands.w	r4, r0, #7
 8003f36:	4606      	mov	r6, r0
 8003f38:	d005      	beq.n	8003f46 <_strtod_l+0x7e>
 8003f3a:	2c06      	cmp	r4, #6
 8003f3c:	d12b      	bne.n	8003f96 <_strtod_l+0xce>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	3501      	adds	r5, #1
 8003f42:	951b      	str	r5, [sp, #108]	; 0x6c
 8003f44:	930d      	str	r3, [sp, #52]	; 0x34
 8003f46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f040 85a6 	bne.w	8004a9a <_strtod_l+0xbd2>
 8003f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f50:	b1e3      	cbz	r3, 8003f8c <_strtod_l+0xc4>
 8003f52:	464a      	mov	r2, r9
 8003f54:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	b021      	add	sp, #132	; 0x84
 8003f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f62:	2a2b      	cmp	r2, #43	; 0x2b
 8003f64:	d015      	beq.n	8003f92 <_strtod_l+0xca>
 8003f66:	2a2d      	cmp	r2, #45	; 0x2d
 8003f68:	d004      	beq.n	8003f74 <_strtod_l+0xac>
 8003f6a:	2a20      	cmp	r2, #32
 8003f6c:	d1ca      	bne.n	8003f04 <_strtod_l+0x3c>
 8003f6e:	3301      	adds	r3, #1
 8003f70:	931b      	str	r3, [sp, #108]	; 0x6c
 8003f72:	e7bf      	b.n	8003ef4 <_strtod_l+0x2c>
 8003f74:	2201      	movs	r2, #1
 8003f76:	920d      	str	r2, [sp, #52]	; 0x34
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1c2      	bne.n	8003f08 <_strtod_l+0x40>
 8003f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f84:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 8585 	bne.w	8004a96 <_strtod_l+0xbce>
 8003f8c:	464a      	mov	r2, r9
 8003f8e:	4653      	mov	r3, sl
 8003f90:	e7e2      	b.n	8003f58 <_strtod_l+0x90>
 8003f92:	2200      	movs	r2, #0
 8003f94:	e7ef      	b.n	8003f76 <_strtod_l+0xae>
 8003f96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f98:	b13a      	cbz	r2, 8003faa <_strtod_l+0xe2>
 8003f9a:	2135      	movs	r1, #53	; 0x35
 8003f9c:	a81e      	add	r0, sp, #120	; 0x78
 8003f9e:	f002 fcae 	bl	80068fe <__copybits>
 8003fa2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003fa4:	4658      	mov	r0, fp
 8003fa6:	f002 f920 	bl	80061ea <_Bfree>
 8003faa:	3c01      	subs	r4, #1
 8003fac:	2c04      	cmp	r4, #4
 8003fae:	d806      	bhi.n	8003fbe <_strtod_l+0xf6>
 8003fb0:	e8df f004 	tbb	[pc, r4]
 8003fb4:	1714030a 	.word	0x1714030a
 8003fb8:	0a          	.byte	0x0a
 8003fb9:	00          	.byte	0x00
 8003fba:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8003fbe:	0731      	lsls	r1, r6, #28
 8003fc0:	d5c1      	bpl.n	8003f46 <_strtod_l+0x7e>
 8003fc2:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003fc6:	e7be      	b.n	8003f46 <_strtod_l+0x7e>
 8003fc8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003fca:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8003fce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003fd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003fd6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8003fda:	e7f0      	b.n	8003fbe <_strtod_l+0xf6>
 8003fdc:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004150 <_strtod_l+0x288>
 8003fe0:	e7ed      	b.n	8003fbe <_strtod_l+0xf6>
 8003fe2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003fe6:	f04f 39ff 	mov.w	r9, #4294967295
 8003fea:	e7e8      	b.n	8003fbe <_strtod_l+0xf6>
 8003fec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	921b      	str	r2, [sp, #108]	; 0x6c
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b30      	cmp	r3, #48	; 0x30
 8003ff6:	d0f9      	beq.n	8003fec <_strtod_l+0x124>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0a4      	beq.n	8003f46 <_strtod_l+0x7e>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	2500      	movs	r5, #0
 8004000:	220a      	movs	r2, #10
 8004002:	9307      	str	r3, [sp, #28]
 8004004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004006:	9506      	str	r5, [sp, #24]
 8004008:	9308      	str	r3, [sp, #32]
 800400a:	9504      	str	r5, [sp, #16]
 800400c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800400e:	7807      	ldrb	r7, [r0, #0]
 8004010:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004014:	b2d9      	uxtb	r1, r3
 8004016:	2909      	cmp	r1, #9
 8004018:	d929      	bls.n	800406e <_strtod_l+0x1a6>
 800401a:	4622      	mov	r2, r4
 800401c:	f8d8 1000 	ldr.w	r1, [r8]
 8004020:	f003 fb41 	bl	80076a6 <strncmp>
 8004024:	2800      	cmp	r0, #0
 8004026:	d031      	beq.n	800408c <_strtod_l+0x1c4>
 8004028:	2000      	movs	r0, #0
 800402a:	463b      	mov	r3, r7
 800402c:	4602      	mov	r2, r0
 800402e:	9c04      	ldr	r4, [sp, #16]
 8004030:	9005      	str	r0, [sp, #20]
 8004032:	2b65      	cmp	r3, #101	; 0x65
 8004034:	d001      	beq.n	800403a <_strtod_l+0x172>
 8004036:	2b45      	cmp	r3, #69	; 0x45
 8004038:	d114      	bne.n	8004064 <_strtod_l+0x19c>
 800403a:	b924      	cbnz	r4, 8004046 <_strtod_l+0x17e>
 800403c:	b910      	cbnz	r0, 8004044 <_strtod_l+0x17c>
 800403e:	9b07      	ldr	r3, [sp, #28]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d09e      	beq.n	8003f82 <_strtod_l+0xba>
 8004044:	2400      	movs	r4, #0
 8004046:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004048:	1c73      	adds	r3, r6, #1
 800404a:	931b      	str	r3, [sp, #108]	; 0x6c
 800404c:	7873      	ldrb	r3, [r6, #1]
 800404e:	2b2b      	cmp	r3, #43	; 0x2b
 8004050:	d078      	beq.n	8004144 <_strtod_l+0x27c>
 8004052:	2b2d      	cmp	r3, #45	; 0x2d
 8004054:	d070      	beq.n	8004138 <_strtod_l+0x270>
 8004056:	f04f 0c00 	mov.w	ip, #0
 800405a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800405e:	2f09      	cmp	r7, #9
 8004060:	d97c      	bls.n	800415c <_strtod_l+0x294>
 8004062:	961b      	str	r6, [sp, #108]	; 0x6c
 8004064:	f04f 0e00 	mov.w	lr, #0
 8004068:	e09a      	b.n	80041a0 <_strtod_l+0x2d8>
 800406a:	2300      	movs	r3, #0
 800406c:	e7c7      	b.n	8003ffe <_strtod_l+0x136>
 800406e:	9904      	ldr	r1, [sp, #16]
 8004070:	3001      	adds	r0, #1
 8004072:	2908      	cmp	r1, #8
 8004074:	bfd7      	itett	le
 8004076:	9906      	ldrle	r1, [sp, #24]
 8004078:	fb02 3505 	mlagt	r5, r2, r5, r3
 800407c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004080:	9306      	strle	r3, [sp, #24]
 8004082:	9b04      	ldr	r3, [sp, #16]
 8004084:	901b      	str	r0, [sp, #108]	; 0x6c
 8004086:	3301      	adds	r3, #1
 8004088:	9304      	str	r3, [sp, #16]
 800408a:	e7bf      	b.n	800400c <_strtod_l+0x144>
 800408c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800408e:	191a      	adds	r2, r3, r4
 8004090:	921b      	str	r2, [sp, #108]	; 0x6c
 8004092:	9a04      	ldr	r2, [sp, #16]
 8004094:	5d1b      	ldrb	r3, [r3, r4]
 8004096:	2a00      	cmp	r2, #0
 8004098:	d037      	beq.n	800410a <_strtod_l+0x242>
 800409a:	4602      	mov	r2, r0
 800409c:	9c04      	ldr	r4, [sp, #16]
 800409e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80040a2:	2909      	cmp	r1, #9
 80040a4:	d913      	bls.n	80040ce <_strtod_l+0x206>
 80040a6:	2101      	movs	r1, #1
 80040a8:	9105      	str	r1, [sp, #20]
 80040aa:	e7c2      	b.n	8004032 <_strtod_l+0x16a>
 80040ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040ae:	3001      	adds	r0, #1
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b30      	cmp	r3, #48	; 0x30
 80040b8:	d0f8      	beq.n	80040ac <_strtod_l+0x1e4>
 80040ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80040be:	2a08      	cmp	r2, #8
 80040c0:	f200 84f0 	bhi.w	8004aa4 <_strtod_l+0xbdc>
 80040c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80040c6:	9208      	str	r2, [sp, #32]
 80040c8:	4602      	mov	r2, r0
 80040ca:	2000      	movs	r0, #0
 80040cc:	4604      	mov	r4, r0
 80040ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80040d2:	f100 0101 	add.w	r1, r0, #1
 80040d6:	d012      	beq.n	80040fe <_strtod_l+0x236>
 80040d8:	440a      	add	r2, r1
 80040da:	270a      	movs	r7, #10
 80040dc:	4621      	mov	r1, r4
 80040de:	eb00 0c04 	add.w	ip, r0, r4
 80040e2:	458c      	cmp	ip, r1
 80040e4:	d113      	bne.n	800410e <_strtod_l+0x246>
 80040e6:	1821      	adds	r1, r4, r0
 80040e8:	2908      	cmp	r1, #8
 80040ea:	f104 0401 	add.w	r4, r4, #1
 80040ee:	4404      	add	r4, r0
 80040f0:	dc19      	bgt.n	8004126 <_strtod_l+0x25e>
 80040f2:	210a      	movs	r1, #10
 80040f4:	9b06      	ldr	r3, [sp, #24]
 80040f6:	fb01 e303 	mla	r3, r1, r3, lr
 80040fa:	9306      	str	r3, [sp, #24]
 80040fc:	2100      	movs	r1, #0
 80040fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004100:	1c58      	adds	r0, r3, #1
 8004102:	901b      	str	r0, [sp, #108]	; 0x6c
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	4608      	mov	r0, r1
 8004108:	e7c9      	b.n	800409e <_strtod_l+0x1d6>
 800410a:	9804      	ldr	r0, [sp, #16]
 800410c:	e7d3      	b.n	80040b6 <_strtod_l+0x1ee>
 800410e:	2908      	cmp	r1, #8
 8004110:	f101 0101 	add.w	r1, r1, #1
 8004114:	dc03      	bgt.n	800411e <_strtod_l+0x256>
 8004116:	9b06      	ldr	r3, [sp, #24]
 8004118:	437b      	muls	r3, r7
 800411a:	9306      	str	r3, [sp, #24]
 800411c:	e7e1      	b.n	80040e2 <_strtod_l+0x21a>
 800411e:	2910      	cmp	r1, #16
 8004120:	bfd8      	it	le
 8004122:	437d      	mulle	r5, r7
 8004124:	e7dd      	b.n	80040e2 <_strtod_l+0x21a>
 8004126:	2c10      	cmp	r4, #16
 8004128:	bfdc      	itt	le
 800412a:	210a      	movle	r1, #10
 800412c:	fb01 e505 	mlale	r5, r1, r5, lr
 8004130:	e7e4      	b.n	80040fc <_strtod_l+0x234>
 8004132:	2301      	movs	r3, #1
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	e781      	b.n	800403c <_strtod_l+0x174>
 8004138:	f04f 0c01 	mov.w	ip, #1
 800413c:	1cb3      	adds	r3, r6, #2
 800413e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004140:	78b3      	ldrb	r3, [r6, #2]
 8004142:	e78a      	b.n	800405a <_strtod_l+0x192>
 8004144:	f04f 0c00 	mov.w	ip, #0
 8004148:	e7f8      	b.n	800413c <_strtod_l+0x274>
 800414a:	bf00      	nop
 800414c:	08007f3c 	.word	0x08007f3c
 8004150:	7ff00000 	.word	0x7ff00000
 8004154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004156:	1c5f      	adds	r7, r3, #1
 8004158:	971b      	str	r7, [sp, #108]	; 0x6c
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b30      	cmp	r3, #48	; 0x30
 800415e:	d0f9      	beq.n	8004154 <_strtod_l+0x28c>
 8004160:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004164:	2f08      	cmp	r7, #8
 8004166:	f63f af7d 	bhi.w	8004064 <_strtod_l+0x19c>
 800416a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800416e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004174:	1c5f      	adds	r7, r3, #1
 8004176:	971b      	str	r7, [sp, #108]	; 0x6c
 8004178:	785b      	ldrb	r3, [r3, #1]
 800417a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800417e:	f1b8 0f09 	cmp.w	r8, #9
 8004182:	d937      	bls.n	80041f4 <_strtod_l+0x32c>
 8004184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004186:	1a7f      	subs	r7, r7, r1
 8004188:	2f08      	cmp	r7, #8
 800418a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800418e:	dc37      	bgt.n	8004200 <_strtod_l+0x338>
 8004190:	45be      	cmp	lr, r7
 8004192:	bfa8      	it	ge
 8004194:	46be      	movge	lr, r7
 8004196:	f1bc 0f00 	cmp.w	ip, #0
 800419a:	d001      	beq.n	80041a0 <_strtod_l+0x2d8>
 800419c:	f1ce 0e00 	rsb	lr, lr, #0
 80041a0:	2c00      	cmp	r4, #0
 80041a2:	d151      	bne.n	8004248 <_strtod_l+0x380>
 80041a4:	2800      	cmp	r0, #0
 80041a6:	f47f aece 	bne.w	8003f46 <_strtod_l+0x7e>
 80041aa:	9a07      	ldr	r2, [sp, #28]
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	f47f aeca 	bne.w	8003f46 <_strtod_l+0x7e>
 80041b2:	9a05      	ldr	r2, [sp, #20]
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	f47f aee4 	bne.w	8003f82 <_strtod_l+0xba>
 80041ba:	2b4e      	cmp	r3, #78	; 0x4e
 80041bc:	d027      	beq.n	800420e <_strtod_l+0x346>
 80041be:	dc21      	bgt.n	8004204 <_strtod_l+0x33c>
 80041c0:	2b49      	cmp	r3, #73	; 0x49
 80041c2:	f47f aede 	bne.w	8003f82 <_strtod_l+0xba>
 80041c6:	49a4      	ldr	r1, [pc, #656]	; (8004458 <_strtod_l+0x590>)
 80041c8:	a81b      	add	r0, sp, #108	; 0x6c
 80041ca:	f001 fecf 	bl	8005f6c <__match>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	f43f aed7 	beq.w	8003f82 <_strtod_l+0xba>
 80041d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041d6:	49a1      	ldr	r1, [pc, #644]	; (800445c <_strtod_l+0x594>)
 80041d8:	3b01      	subs	r3, #1
 80041da:	a81b      	add	r0, sp, #108	; 0x6c
 80041dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80041de:	f001 fec5 	bl	8005f6c <__match>
 80041e2:	b910      	cbnz	r0, 80041ea <_strtod_l+0x322>
 80041e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041e6:	3301      	adds	r3, #1
 80041e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80041ea:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004470 <_strtod_l+0x5a8>
 80041ee:	f04f 0900 	mov.w	r9, #0
 80041f2:	e6a8      	b.n	8003f46 <_strtod_l+0x7e>
 80041f4:	210a      	movs	r1, #10
 80041f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80041fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80041fe:	e7b8      	b.n	8004172 <_strtod_l+0x2aa>
 8004200:	46be      	mov	lr, r7
 8004202:	e7c8      	b.n	8004196 <_strtod_l+0x2ce>
 8004204:	2b69      	cmp	r3, #105	; 0x69
 8004206:	d0de      	beq.n	80041c6 <_strtod_l+0x2fe>
 8004208:	2b6e      	cmp	r3, #110	; 0x6e
 800420a:	f47f aeba 	bne.w	8003f82 <_strtod_l+0xba>
 800420e:	4994      	ldr	r1, [pc, #592]	; (8004460 <_strtod_l+0x598>)
 8004210:	a81b      	add	r0, sp, #108	; 0x6c
 8004212:	f001 feab 	bl	8005f6c <__match>
 8004216:	2800      	cmp	r0, #0
 8004218:	f43f aeb3 	beq.w	8003f82 <_strtod_l+0xba>
 800421c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b28      	cmp	r3, #40	; 0x28
 8004222:	d10e      	bne.n	8004242 <_strtod_l+0x37a>
 8004224:	aa1e      	add	r2, sp, #120	; 0x78
 8004226:	498f      	ldr	r1, [pc, #572]	; (8004464 <_strtod_l+0x59c>)
 8004228:	a81b      	add	r0, sp, #108	; 0x6c
 800422a:	f001 feb3 	bl	8005f94 <__hexnan>
 800422e:	2805      	cmp	r0, #5
 8004230:	d107      	bne.n	8004242 <_strtod_l+0x37a>
 8004232:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004234:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004238:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800423c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004240:	e681      	b.n	8003f46 <_strtod_l+0x7e>
 8004242:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004478 <_strtod_l+0x5b0>
 8004246:	e7d2      	b.n	80041ee <_strtod_l+0x326>
 8004248:	ebae 0302 	sub.w	r3, lr, r2
 800424c:	9307      	str	r3, [sp, #28]
 800424e:	9b04      	ldr	r3, [sp, #16]
 8004250:	9806      	ldr	r0, [sp, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	bf08      	it	eq
 8004256:	4623      	moveq	r3, r4
 8004258:	2c10      	cmp	r4, #16
 800425a:	9304      	str	r3, [sp, #16]
 800425c:	46a0      	mov	r8, r4
 800425e:	bfa8      	it	ge
 8004260:	f04f 0810 	movge.w	r8, #16
 8004264:	f7fc f8be 	bl	80003e4 <__aeabi_ui2d>
 8004268:	2c09      	cmp	r4, #9
 800426a:	4681      	mov	r9, r0
 800426c:	468a      	mov	sl, r1
 800426e:	dc13      	bgt.n	8004298 <_strtod_l+0x3d0>
 8004270:	9b07      	ldr	r3, [sp, #28]
 8004272:	2b00      	cmp	r3, #0
 8004274:	f43f ae67 	beq.w	8003f46 <_strtod_l+0x7e>
 8004278:	9b07      	ldr	r3, [sp, #28]
 800427a:	dd7e      	ble.n	800437a <_strtod_l+0x4b2>
 800427c:	2b16      	cmp	r3, #22
 800427e:	dc65      	bgt.n	800434c <_strtod_l+0x484>
 8004280:	4a79      	ldr	r2, [pc, #484]	; (8004468 <_strtod_l+0x5a0>)
 8004282:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004286:	464a      	mov	r2, r9
 8004288:	e9de 0100 	ldrd	r0, r1, [lr]
 800428c:	4653      	mov	r3, sl
 800428e:	f7fc f923 	bl	80004d8 <__aeabi_dmul>
 8004292:	4681      	mov	r9, r0
 8004294:	468a      	mov	sl, r1
 8004296:	e656      	b.n	8003f46 <_strtod_l+0x7e>
 8004298:	4b73      	ldr	r3, [pc, #460]	; (8004468 <_strtod_l+0x5a0>)
 800429a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800429e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042a2:	f7fc f919 	bl	80004d8 <__aeabi_dmul>
 80042a6:	4606      	mov	r6, r0
 80042a8:	4628      	mov	r0, r5
 80042aa:	460f      	mov	r7, r1
 80042ac:	f7fc f89a 	bl	80003e4 <__aeabi_ui2d>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4630      	mov	r0, r6
 80042b6:	4639      	mov	r1, r7
 80042b8:	f7fb ff58 	bl	800016c <__adddf3>
 80042bc:	2c0f      	cmp	r4, #15
 80042be:	4681      	mov	r9, r0
 80042c0:	468a      	mov	sl, r1
 80042c2:	ddd5      	ble.n	8004270 <_strtod_l+0x3a8>
 80042c4:	9b07      	ldr	r3, [sp, #28]
 80042c6:	eba4 0808 	sub.w	r8, r4, r8
 80042ca:	4498      	add	r8, r3
 80042cc:	f1b8 0f00 	cmp.w	r8, #0
 80042d0:	f340 809a 	ble.w	8004408 <_strtod_l+0x540>
 80042d4:	f018 030f 	ands.w	r3, r8, #15
 80042d8:	d00a      	beq.n	80042f0 <_strtod_l+0x428>
 80042da:	4963      	ldr	r1, [pc, #396]	; (8004468 <_strtod_l+0x5a0>)
 80042dc:	464a      	mov	r2, r9
 80042de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80042e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80042e6:	4653      	mov	r3, sl
 80042e8:	f7fc f8f6 	bl	80004d8 <__aeabi_dmul>
 80042ec:	4681      	mov	r9, r0
 80042ee:	468a      	mov	sl, r1
 80042f0:	f038 080f 	bics.w	r8, r8, #15
 80042f4:	d077      	beq.n	80043e6 <_strtod_l+0x51e>
 80042f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80042fa:	dd4b      	ble.n	8004394 <_strtod_l+0x4cc>
 80042fc:	f04f 0800 	mov.w	r8, #0
 8004300:	f8cd 8010 	str.w	r8, [sp, #16]
 8004304:	f8cd 8020 	str.w	r8, [sp, #32]
 8004308:	f8cd 8018 	str.w	r8, [sp, #24]
 800430c:	2322      	movs	r3, #34	; 0x22
 800430e:	f04f 0900 	mov.w	r9, #0
 8004312:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004470 <_strtod_l+0x5a8>
 8004316:	f8cb 3000 	str.w	r3, [fp]
 800431a:	9b08      	ldr	r3, [sp, #32]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f43f ae12 	beq.w	8003f46 <_strtod_l+0x7e>
 8004322:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004324:	4658      	mov	r0, fp
 8004326:	f001 ff60 	bl	80061ea <_Bfree>
 800432a:	9906      	ldr	r1, [sp, #24]
 800432c:	4658      	mov	r0, fp
 800432e:	f001 ff5c 	bl	80061ea <_Bfree>
 8004332:	9904      	ldr	r1, [sp, #16]
 8004334:	4658      	mov	r0, fp
 8004336:	f001 ff58 	bl	80061ea <_Bfree>
 800433a:	9908      	ldr	r1, [sp, #32]
 800433c:	4658      	mov	r0, fp
 800433e:	f001 ff54 	bl	80061ea <_Bfree>
 8004342:	4641      	mov	r1, r8
 8004344:	4658      	mov	r0, fp
 8004346:	f001 ff50 	bl	80061ea <_Bfree>
 800434a:	e5fc      	b.n	8003f46 <_strtod_l+0x7e>
 800434c:	9a07      	ldr	r2, [sp, #28]
 800434e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004352:	4293      	cmp	r3, r2
 8004354:	dbb6      	blt.n	80042c4 <_strtod_l+0x3fc>
 8004356:	4d44      	ldr	r5, [pc, #272]	; (8004468 <_strtod_l+0x5a0>)
 8004358:	f1c4 040f 	rsb	r4, r4, #15
 800435c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004360:	464a      	mov	r2, r9
 8004362:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004366:	4653      	mov	r3, sl
 8004368:	f7fc f8b6 	bl	80004d8 <__aeabi_dmul>
 800436c:	9b07      	ldr	r3, [sp, #28]
 800436e:	1b1c      	subs	r4, r3, r4
 8004370:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004374:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004378:	e789      	b.n	800428e <_strtod_l+0x3c6>
 800437a:	f113 0f16 	cmn.w	r3, #22
 800437e:	dba1      	blt.n	80042c4 <_strtod_l+0x3fc>
 8004380:	4a39      	ldr	r2, [pc, #228]	; (8004468 <_strtod_l+0x5a0>)
 8004382:	4648      	mov	r0, r9
 8004384:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004388:	e9d2 2300 	ldrd	r2, r3, [r2]
 800438c:	4651      	mov	r1, sl
 800438e:	f7fc f9cd 	bl	800072c <__aeabi_ddiv>
 8004392:	e77e      	b.n	8004292 <_strtod_l+0x3ca>
 8004394:	2300      	movs	r3, #0
 8004396:	4648      	mov	r0, r9
 8004398:	4651      	mov	r1, sl
 800439a:	461d      	mov	r5, r3
 800439c:	4e33      	ldr	r6, [pc, #204]	; (800446c <_strtod_l+0x5a4>)
 800439e:	ea4f 1828 	mov.w	r8, r8, asr #4
 80043a2:	f1b8 0f01 	cmp.w	r8, #1
 80043a6:	dc21      	bgt.n	80043ec <_strtod_l+0x524>
 80043a8:	b10b      	cbz	r3, 80043ae <_strtod_l+0x4e6>
 80043aa:	4681      	mov	r9, r0
 80043ac:	468a      	mov	sl, r1
 80043ae:	4b2f      	ldr	r3, [pc, #188]	; (800446c <_strtod_l+0x5a4>)
 80043b0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80043b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80043b8:	464a      	mov	r2, r9
 80043ba:	e9d5 0100 	ldrd	r0, r1, [r5]
 80043be:	4653      	mov	r3, sl
 80043c0:	f7fc f88a 	bl	80004d8 <__aeabi_dmul>
 80043c4:	4b2a      	ldr	r3, [pc, #168]	; (8004470 <_strtod_l+0x5a8>)
 80043c6:	460a      	mov	r2, r1
 80043c8:	400b      	ands	r3, r1
 80043ca:	492a      	ldr	r1, [pc, #168]	; (8004474 <_strtod_l+0x5ac>)
 80043cc:	4681      	mov	r9, r0
 80043ce:	428b      	cmp	r3, r1
 80043d0:	d894      	bhi.n	80042fc <_strtod_l+0x434>
 80043d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80043d6:	428b      	cmp	r3, r1
 80043d8:	bf86      	itte	hi
 80043da:	f04f 39ff 	movhi.w	r9, #4294967295
 80043de:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800447c <_strtod_l+0x5b4>
 80043e2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80043e6:	2300      	movs	r3, #0
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	e07b      	b.n	80044e4 <_strtod_l+0x61c>
 80043ec:	f018 0f01 	tst.w	r8, #1
 80043f0:	d006      	beq.n	8004400 <_strtod_l+0x538>
 80043f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80043f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fa:	f7fc f86d 	bl	80004d8 <__aeabi_dmul>
 80043fe:	2301      	movs	r3, #1
 8004400:	3501      	adds	r5, #1
 8004402:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004406:	e7cc      	b.n	80043a2 <_strtod_l+0x4da>
 8004408:	d0ed      	beq.n	80043e6 <_strtod_l+0x51e>
 800440a:	f1c8 0800 	rsb	r8, r8, #0
 800440e:	f018 020f 	ands.w	r2, r8, #15
 8004412:	d00a      	beq.n	800442a <_strtod_l+0x562>
 8004414:	4b14      	ldr	r3, [pc, #80]	; (8004468 <_strtod_l+0x5a0>)
 8004416:	4648      	mov	r0, r9
 8004418:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800441c:	4651      	mov	r1, sl
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	f7fc f983 	bl	800072c <__aeabi_ddiv>
 8004426:	4681      	mov	r9, r0
 8004428:	468a      	mov	sl, r1
 800442a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800442e:	d0da      	beq.n	80043e6 <_strtod_l+0x51e>
 8004430:	f1b8 0f1f 	cmp.w	r8, #31
 8004434:	dd24      	ble.n	8004480 <_strtod_l+0x5b8>
 8004436:	f04f 0800 	mov.w	r8, #0
 800443a:	f8cd 8010 	str.w	r8, [sp, #16]
 800443e:	f8cd 8020 	str.w	r8, [sp, #32]
 8004442:	f8cd 8018 	str.w	r8, [sp, #24]
 8004446:	2322      	movs	r3, #34	; 0x22
 8004448:	f04f 0900 	mov.w	r9, #0
 800444c:	f04f 0a00 	mov.w	sl, #0
 8004450:	f8cb 3000 	str.w	r3, [fp]
 8004454:	e761      	b.n	800431a <_strtod_l+0x452>
 8004456:	bf00      	nop
 8004458:	08007f09 	.word	0x08007f09
 800445c:	08007f93 	.word	0x08007f93
 8004460:	08007f11 	.word	0x08007f11
 8004464:	08007f50 	.word	0x08007f50
 8004468:	08008038 	.word	0x08008038
 800446c:	08008010 	.word	0x08008010
 8004470:	7ff00000 	.word	0x7ff00000
 8004474:	7ca00000 	.word	0x7ca00000
 8004478:	fff80000 	.word	0xfff80000
 800447c:	7fefffff 	.word	0x7fefffff
 8004480:	f018 0310 	ands.w	r3, r8, #16
 8004484:	bf18      	it	ne
 8004486:	236a      	movne	r3, #106	; 0x6a
 8004488:	4648      	mov	r0, r9
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	4651      	mov	r1, sl
 800448e:	2300      	movs	r3, #0
 8004490:	4da1      	ldr	r5, [pc, #644]	; (8004718 <_strtod_l+0x850>)
 8004492:	f1b8 0f00 	cmp.w	r8, #0
 8004496:	f300 8113 	bgt.w	80046c0 <_strtod_l+0x7f8>
 800449a:	b10b      	cbz	r3, 80044a0 <_strtod_l+0x5d8>
 800449c:	4681      	mov	r9, r0
 800449e:	468a      	mov	sl, r1
 80044a0:	9b05      	ldr	r3, [sp, #20]
 80044a2:	b1bb      	cbz	r3, 80044d4 <_strtod_l+0x60c>
 80044a4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80044a8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	4651      	mov	r1, sl
 80044b0:	dd10      	ble.n	80044d4 <_strtod_l+0x60c>
 80044b2:	2b1f      	cmp	r3, #31
 80044b4:	f340 8110 	ble.w	80046d8 <_strtod_l+0x810>
 80044b8:	2b34      	cmp	r3, #52	; 0x34
 80044ba:	bfd8      	it	le
 80044bc:	f04f 32ff 	movle.w	r2, #4294967295
 80044c0:	f04f 0900 	mov.w	r9, #0
 80044c4:	bfcf      	iteee	gt
 80044c6:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80044ca:	3b20      	suble	r3, #32
 80044cc:	fa02 f303 	lslle.w	r3, r2, r3
 80044d0:	ea03 0a01 	andle.w	sl, r3, r1
 80044d4:	2200      	movs	r2, #0
 80044d6:	2300      	movs	r3, #0
 80044d8:	4648      	mov	r0, r9
 80044da:	4651      	mov	r1, sl
 80044dc:	f7fc fa64 	bl	80009a8 <__aeabi_dcmpeq>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d1a8      	bne.n	8004436 <_strtod_l+0x56e>
 80044e4:	9b06      	ldr	r3, [sp, #24]
 80044e6:	9a04      	ldr	r2, [sp, #16]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	9908      	ldr	r1, [sp, #32]
 80044ec:	4623      	mov	r3, r4
 80044ee:	4658      	mov	r0, fp
 80044f0:	f001 fecd 	bl	800628e <__s2b>
 80044f4:	9008      	str	r0, [sp, #32]
 80044f6:	2800      	cmp	r0, #0
 80044f8:	f43f af00 	beq.w	80042fc <_strtod_l+0x434>
 80044fc:	9a07      	ldr	r2, [sp, #28]
 80044fe:	9b07      	ldr	r3, [sp, #28]
 8004500:	2a00      	cmp	r2, #0
 8004502:	f1c3 0300 	rsb	r3, r3, #0
 8004506:	bfa8      	it	ge
 8004508:	2300      	movge	r3, #0
 800450a:	f04f 0800 	mov.w	r8, #0
 800450e:	930e      	str	r3, [sp, #56]	; 0x38
 8004510:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004514:	9316      	str	r3, [sp, #88]	; 0x58
 8004516:	f8cd 8010 	str.w	r8, [sp, #16]
 800451a:	9b08      	ldr	r3, [sp, #32]
 800451c:	4658      	mov	r0, fp
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	f001 fe2f 	bl	8006182 <_Balloc>
 8004524:	9006      	str	r0, [sp, #24]
 8004526:	2800      	cmp	r0, #0
 8004528:	f43f aef0 	beq.w	800430c <_strtod_l+0x444>
 800452c:	9b08      	ldr	r3, [sp, #32]
 800452e:	300c      	adds	r0, #12
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	f103 010c 	add.w	r1, r3, #12
 8004536:	3202      	adds	r2, #2
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	f001 fe17 	bl	800616c <memcpy>
 800453e:	ab1e      	add	r3, sp, #120	; 0x78
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	ab1d      	add	r3, sp, #116	; 0x74
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	464a      	mov	r2, r9
 8004548:	4653      	mov	r3, sl
 800454a:	4658      	mov	r0, fp
 800454c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004550:	f002 f958 	bl	8006804 <__d2b>
 8004554:	901c      	str	r0, [sp, #112]	; 0x70
 8004556:	2800      	cmp	r0, #0
 8004558:	f43f aed8 	beq.w	800430c <_strtod_l+0x444>
 800455c:	2101      	movs	r1, #1
 800455e:	4658      	mov	r0, fp
 8004560:	f001 ff21 	bl	80063a6 <__i2b>
 8004564:	9004      	str	r0, [sp, #16]
 8004566:	4603      	mov	r3, r0
 8004568:	2800      	cmp	r0, #0
 800456a:	f43f aecf 	beq.w	800430c <_strtod_l+0x444>
 800456e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004570:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004572:	2d00      	cmp	r5, #0
 8004574:	bfab      	itete	ge
 8004576:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004578:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800457a:	18ee      	addge	r6, r5, r3
 800457c:	1b5c      	sublt	r4, r3, r5
 800457e:	9b05      	ldr	r3, [sp, #20]
 8004580:	bfa8      	it	ge
 8004582:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004584:	eba5 0503 	sub.w	r5, r5, r3
 8004588:	4415      	add	r5, r2
 800458a:	4b64      	ldr	r3, [pc, #400]	; (800471c <_strtod_l+0x854>)
 800458c:	f105 35ff 	add.w	r5, r5, #4294967295
 8004590:	bfb8      	it	lt
 8004592:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004594:	429d      	cmp	r5, r3
 8004596:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800459a:	f280 80af 	bge.w	80046fc <_strtod_l+0x834>
 800459e:	1b5b      	subs	r3, r3, r5
 80045a0:	2b1f      	cmp	r3, #31
 80045a2:	eba2 0203 	sub.w	r2, r2, r3
 80045a6:	f04f 0701 	mov.w	r7, #1
 80045aa:	f300 809c 	bgt.w	80046e6 <_strtod_l+0x81e>
 80045ae:	2500      	movs	r5, #0
 80045b0:	fa07 f303 	lsl.w	r3, r7, r3
 80045b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80045b6:	18b7      	adds	r7, r6, r2
 80045b8:	9b05      	ldr	r3, [sp, #20]
 80045ba:	42be      	cmp	r6, r7
 80045bc:	4414      	add	r4, r2
 80045be:	441c      	add	r4, r3
 80045c0:	4633      	mov	r3, r6
 80045c2:	bfa8      	it	ge
 80045c4:	463b      	movge	r3, r7
 80045c6:	42a3      	cmp	r3, r4
 80045c8:	bfa8      	it	ge
 80045ca:	4623      	movge	r3, r4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bfc2      	ittt	gt
 80045d0:	1aff      	subgt	r7, r7, r3
 80045d2:	1ae4      	subgt	r4, r4, r3
 80045d4:	1af6      	subgt	r6, r6, r3
 80045d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045d8:	b1bb      	cbz	r3, 800460a <_strtod_l+0x742>
 80045da:	461a      	mov	r2, r3
 80045dc:	9904      	ldr	r1, [sp, #16]
 80045de:	4658      	mov	r0, fp
 80045e0:	f001 ff80 	bl	80064e4 <__pow5mult>
 80045e4:	9004      	str	r0, [sp, #16]
 80045e6:	2800      	cmp	r0, #0
 80045e8:	f43f ae90 	beq.w	800430c <_strtod_l+0x444>
 80045ec:	4601      	mov	r1, r0
 80045ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80045f0:	4658      	mov	r0, fp
 80045f2:	f001 fee1 	bl	80063b8 <__multiply>
 80045f6:	9009      	str	r0, [sp, #36]	; 0x24
 80045f8:	2800      	cmp	r0, #0
 80045fa:	f43f ae87 	beq.w	800430c <_strtod_l+0x444>
 80045fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004600:	4658      	mov	r0, fp
 8004602:	f001 fdf2 	bl	80061ea <_Bfree>
 8004606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004608:	931c      	str	r3, [sp, #112]	; 0x70
 800460a:	2f00      	cmp	r7, #0
 800460c:	dc7a      	bgt.n	8004704 <_strtod_l+0x83c>
 800460e:	9b07      	ldr	r3, [sp, #28]
 8004610:	2b00      	cmp	r3, #0
 8004612:	dd08      	ble.n	8004626 <_strtod_l+0x75e>
 8004614:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004616:	9906      	ldr	r1, [sp, #24]
 8004618:	4658      	mov	r0, fp
 800461a:	f001 ff63 	bl	80064e4 <__pow5mult>
 800461e:	9006      	str	r0, [sp, #24]
 8004620:	2800      	cmp	r0, #0
 8004622:	f43f ae73 	beq.w	800430c <_strtod_l+0x444>
 8004626:	2c00      	cmp	r4, #0
 8004628:	dd08      	ble.n	800463c <_strtod_l+0x774>
 800462a:	4622      	mov	r2, r4
 800462c:	9906      	ldr	r1, [sp, #24]
 800462e:	4658      	mov	r0, fp
 8004630:	f001 ffa6 	bl	8006580 <__lshift>
 8004634:	9006      	str	r0, [sp, #24]
 8004636:	2800      	cmp	r0, #0
 8004638:	f43f ae68 	beq.w	800430c <_strtod_l+0x444>
 800463c:	2e00      	cmp	r6, #0
 800463e:	dd08      	ble.n	8004652 <_strtod_l+0x78a>
 8004640:	4632      	mov	r2, r6
 8004642:	9904      	ldr	r1, [sp, #16]
 8004644:	4658      	mov	r0, fp
 8004646:	f001 ff9b 	bl	8006580 <__lshift>
 800464a:	9004      	str	r0, [sp, #16]
 800464c:	2800      	cmp	r0, #0
 800464e:	f43f ae5d 	beq.w	800430c <_strtod_l+0x444>
 8004652:	9a06      	ldr	r2, [sp, #24]
 8004654:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004656:	4658      	mov	r0, fp
 8004658:	f002 f800 	bl	800665c <__mdiff>
 800465c:	4680      	mov	r8, r0
 800465e:	2800      	cmp	r0, #0
 8004660:	f43f ae54 	beq.w	800430c <_strtod_l+0x444>
 8004664:	2400      	movs	r4, #0
 8004666:	68c3      	ldr	r3, [r0, #12]
 8004668:	9904      	ldr	r1, [sp, #16]
 800466a:	60c4      	str	r4, [r0, #12]
 800466c:	930c      	str	r3, [sp, #48]	; 0x30
 800466e:	f001 ffdb 	bl	8006628 <__mcmp>
 8004672:	42a0      	cmp	r0, r4
 8004674:	da54      	bge.n	8004720 <_strtod_l+0x858>
 8004676:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004678:	b9f3      	cbnz	r3, 80046b8 <_strtod_l+0x7f0>
 800467a:	f1b9 0f00 	cmp.w	r9, #0
 800467e:	d11b      	bne.n	80046b8 <_strtod_l+0x7f0>
 8004680:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004684:	b9c3      	cbnz	r3, 80046b8 <_strtod_l+0x7f0>
 8004686:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800468a:	0d1b      	lsrs	r3, r3, #20
 800468c:	051b      	lsls	r3, r3, #20
 800468e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004692:	d911      	bls.n	80046b8 <_strtod_l+0x7f0>
 8004694:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004698:	b91b      	cbnz	r3, 80046a2 <_strtod_l+0x7da>
 800469a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	dd0a      	ble.n	80046b8 <_strtod_l+0x7f0>
 80046a2:	4641      	mov	r1, r8
 80046a4:	2201      	movs	r2, #1
 80046a6:	4658      	mov	r0, fp
 80046a8:	f001 ff6a 	bl	8006580 <__lshift>
 80046ac:	9904      	ldr	r1, [sp, #16]
 80046ae:	4680      	mov	r8, r0
 80046b0:	f001 ffba 	bl	8006628 <__mcmp>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	dc68      	bgt.n	800478a <_strtod_l+0x8c2>
 80046b8:	9b05      	ldr	r3, [sp, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d172      	bne.n	80047a4 <_strtod_l+0x8dc>
 80046be:	e630      	b.n	8004322 <_strtod_l+0x45a>
 80046c0:	f018 0f01 	tst.w	r8, #1
 80046c4:	d004      	beq.n	80046d0 <_strtod_l+0x808>
 80046c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046ca:	f7fb ff05 	bl	80004d8 <__aeabi_dmul>
 80046ce:	2301      	movs	r3, #1
 80046d0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80046d4:	3508      	adds	r5, #8
 80046d6:	e6dc      	b.n	8004492 <_strtod_l+0x5ca>
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	ea03 0909 	and.w	r9, r3, r9
 80046e4:	e6f6      	b.n	80044d4 <_strtod_l+0x60c>
 80046e6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80046ea:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80046ee:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80046f2:	35e2      	adds	r5, #226	; 0xe2
 80046f4:	fa07 f505 	lsl.w	r5, r7, r5
 80046f8:	970f      	str	r7, [sp, #60]	; 0x3c
 80046fa:	e75c      	b.n	80045b6 <_strtod_l+0x6ee>
 80046fc:	2301      	movs	r3, #1
 80046fe:	2500      	movs	r5, #0
 8004700:	930f      	str	r3, [sp, #60]	; 0x3c
 8004702:	e758      	b.n	80045b6 <_strtod_l+0x6ee>
 8004704:	463a      	mov	r2, r7
 8004706:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004708:	4658      	mov	r0, fp
 800470a:	f001 ff39 	bl	8006580 <__lshift>
 800470e:	901c      	str	r0, [sp, #112]	; 0x70
 8004710:	2800      	cmp	r0, #0
 8004712:	f47f af7c 	bne.w	800460e <_strtod_l+0x746>
 8004716:	e5f9      	b.n	800430c <_strtod_l+0x444>
 8004718:	08007f68 	.word	0x08007f68
 800471c:	fffffc02 	.word	0xfffffc02
 8004720:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004724:	f040 8089 	bne.w	800483a <_strtod_l+0x972>
 8004728:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800472a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800472e:	b342      	cbz	r2, 8004782 <_strtod_l+0x8ba>
 8004730:	4aaf      	ldr	r2, [pc, #700]	; (80049f0 <_strtod_l+0xb28>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d156      	bne.n	80047e4 <_strtod_l+0x91c>
 8004736:	9b05      	ldr	r3, [sp, #20]
 8004738:	4648      	mov	r0, r9
 800473a:	b1eb      	cbz	r3, 8004778 <_strtod_l+0x8b0>
 800473c:	4653      	mov	r3, sl
 800473e:	4aad      	ldr	r2, [pc, #692]	; (80049f4 <_strtod_l+0xb2c>)
 8004740:	f04f 31ff 	mov.w	r1, #4294967295
 8004744:	401a      	ands	r2, r3
 8004746:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800474a:	d818      	bhi.n	800477e <_strtod_l+0x8b6>
 800474c:	0d12      	lsrs	r2, r2, #20
 800474e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	4298      	cmp	r0, r3
 8004758:	d144      	bne.n	80047e4 <_strtod_l+0x91c>
 800475a:	4ba7      	ldr	r3, [pc, #668]	; (80049f8 <_strtod_l+0xb30>)
 800475c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800475e:	429a      	cmp	r2, r3
 8004760:	d102      	bne.n	8004768 <_strtod_l+0x8a0>
 8004762:	3001      	adds	r0, #1
 8004764:	f43f add2 	beq.w	800430c <_strtod_l+0x444>
 8004768:	4ba2      	ldr	r3, [pc, #648]	; (80049f4 <_strtod_l+0xb2c>)
 800476a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476c:	f04f 0900 	mov.w	r9, #0
 8004770:	401a      	ands	r2, r3
 8004772:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004776:	e79f      	b.n	80046b8 <_strtod_l+0x7f0>
 8004778:	f04f 33ff 	mov.w	r3, #4294967295
 800477c:	e7eb      	b.n	8004756 <_strtod_l+0x88e>
 800477e:	460b      	mov	r3, r1
 8004780:	e7e9      	b.n	8004756 <_strtod_l+0x88e>
 8004782:	bb7b      	cbnz	r3, 80047e4 <_strtod_l+0x91c>
 8004784:	f1b9 0f00 	cmp.w	r9, #0
 8004788:	d12c      	bne.n	80047e4 <_strtod_l+0x91c>
 800478a:	9905      	ldr	r1, [sp, #20]
 800478c:	4653      	mov	r3, sl
 800478e:	4a99      	ldr	r2, [pc, #612]	; (80049f4 <_strtod_l+0xb2c>)
 8004790:	b1f1      	cbz	r1, 80047d0 <_strtod_l+0x908>
 8004792:	ea02 010a 	and.w	r1, r2, sl
 8004796:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800479a:	dc19      	bgt.n	80047d0 <_strtod_l+0x908>
 800479c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80047a0:	f77f ae51 	ble.w	8004446 <_strtod_l+0x57e>
 80047a4:	2300      	movs	r3, #0
 80047a6:	4a95      	ldr	r2, [pc, #596]	; (80049fc <_strtod_l+0xb34>)
 80047a8:	4648      	mov	r0, r9
 80047aa:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80047ae:	4651      	mov	r1, sl
 80047b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80047b4:	f7fb fe90 	bl	80004d8 <__aeabi_dmul>
 80047b8:	4681      	mov	r9, r0
 80047ba:	468a      	mov	sl, r1
 80047bc:	2900      	cmp	r1, #0
 80047be:	f47f adb0 	bne.w	8004322 <_strtod_l+0x45a>
 80047c2:	2800      	cmp	r0, #0
 80047c4:	f47f adad 	bne.w	8004322 <_strtod_l+0x45a>
 80047c8:	2322      	movs	r3, #34	; 0x22
 80047ca:	f8cb 3000 	str.w	r3, [fp]
 80047ce:	e5a8      	b.n	8004322 <_strtod_l+0x45a>
 80047d0:	4013      	ands	r3, r2
 80047d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80047d6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 80047da:	f04f 39ff 	mov.w	r9, #4294967295
 80047de:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 80047e2:	e769      	b.n	80046b8 <_strtod_l+0x7f0>
 80047e4:	b19d      	cbz	r5, 800480e <_strtod_l+0x946>
 80047e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e8:	421d      	tst	r5, r3
 80047ea:	f43f af65 	beq.w	80046b8 <_strtod_l+0x7f0>
 80047ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047f0:	9a05      	ldr	r2, [sp, #20]
 80047f2:	4648      	mov	r0, r9
 80047f4:	4651      	mov	r1, sl
 80047f6:	b173      	cbz	r3, 8004816 <_strtod_l+0x94e>
 80047f8:	f7ff fb45 	bl	8003e86 <sulp>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004804:	f7fb fcb2 	bl	800016c <__adddf3>
 8004808:	4681      	mov	r9, r0
 800480a:	468a      	mov	sl, r1
 800480c:	e754      	b.n	80046b8 <_strtod_l+0x7f0>
 800480e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004810:	ea13 0f09 	tst.w	r3, r9
 8004814:	e7e9      	b.n	80047ea <_strtod_l+0x922>
 8004816:	f7ff fb36 	bl	8003e86 <sulp>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004822:	f7fb fca1 	bl	8000168 <__aeabi_dsub>
 8004826:	2200      	movs	r2, #0
 8004828:	2300      	movs	r3, #0
 800482a:	4681      	mov	r9, r0
 800482c:	468a      	mov	sl, r1
 800482e:	f7fc f8bb 	bl	80009a8 <__aeabi_dcmpeq>
 8004832:	2800      	cmp	r0, #0
 8004834:	f47f ae07 	bne.w	8004446 <_strtod_l+0x57e>
 8004838:	e73e      	b.n	80046b8 <_strtod_l+0x7f0>
 800483a:	9904      	ldr	r1, [sp, #16]
 800483c:	4640      	mov	r0, r8
 800483e:	f002 f830 	bl	80068a2 <__ratio>
 8004842:	2200      	movs	r2, #0
 8004844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	f7fc f8c0 	bl	80009d0 <__aeabi_dcmple>
 8004850:	2800      	cmp	r0, #0
 8004852:	d075      	beq.n	8004940 <_strtod_l+0xa78>
 8004854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004856:	2b00      	cmp	r3, #0
 8004858:	d047      	beq.n	80048ea <_strtod_l+0xa22>
 800485a:	2600      	movs	r6, #0
 800485c:	4f68      	ldr	r7, [pc, #416]	; (8004a00 <_strtod_l+0xb38>)
 800485e:	4d68      	ldr	r5, [pc, #416]	; (8004a00 <_strtod_l+0xb38>)
 8004860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004862:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004866:	0d1b      	lsrs	r3, r3, #20
 8004868:	051b      	lsls	r3, r3, #20
 800486a:	930f      	str	r3, [sp, #60]	; 0x3c
 800486c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800486e:	4b65      	ldr	r3, [pc, #404]	; (8004a04 <_strtod_l+0xb3c>)
 8004870:	429a      	cmp	r2, r3
 8004872:	f040 80cf 	bne.w	8004a14 <_strtod_l+0xb4c>
 8004876:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800487a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800487e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004880:	4648      	mov	r0, r9
 8004882:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004886:	4651      	mov	r1, sl
 8004888:	f001 ff46 	bl	8006718 <__ulp>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4630      	mov	r0, r6
 8004892:	4639      	mov	r1, r7
 8004894:	f7fb fe20 	bl	80004d8 <__aeabi_dmul>
 8004898:	464a      	mov	r2, r9
 800489a:	4653      	mov	r3, sl
 800489c:	f7fb fc66 	bl	800016c <__adddf3>
 80048a0:	460b      	mov	r3, r1
 80048a2:	4954      	ldr	r1, [pc, #336]	; (80049f4 <_strtod_l+0xb2c>)
 80048a4:	4a58      	ldr	r2, [pc, #352]	; (8004a08 <_strtod_l+0xb40>)
 80048a6:	4019      	ands	r1, r3
 80048a8:	4291      	cmp	r1, r2
 80048aa:	4681      	mov	r9, r0
 80048ac:	d95e      	bls.n	800496c <_strtod_l+0xaa4>
 80048ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d103      	bne.n	80048c0 <_strtod_l+0x9f8>
 80048b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ba:	3301      	adds	r3, #1
 80048bc:	f43f ad26 	beq.w	800430c <_strtod_l+0x444>
 80048c0:	f04f 39ff 	mov.w	r9, #4294967295
 80048c4:	f8df a130 	ldr.w	sl, [pc, #304]	; 80049f8 <_strtod_l+0xb30>
 80048c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80048ca:	4658      	mov	r0, fp
 80048cc:	f001 fc8d 	bl	80061ea <_Bfree>
 80048d0:	9906      	ldr	r1, [sp, #24]
 80048d2:	4658      	mov	r0, fp
 80048d4:	f001 fc89 	bl	80061ea <_Bfree>
 80048d8:	9904      	ldr	r1, [sp, #16]
 80048da:	4658      	mov	r0, fp
 80048dc:	f001 fc85 	bl	80061ea <_Bfree>
 80048e0:	4641      	mov	r1, r8
 80048e2:	4658      	mov	r0, fp
 80048e4:	f001 fc81 	bl	80061ea <_Bfree>
 80048e8:	e617      	b.n	800451a <_strtod_l+0x652>
 80048ea:	f1b9 0f00 	cmp.w	r9, #0
 80048ee:	d119      	bne.n	8004924 <_strtod_l+0xa5c>
 80048f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f6:	b9e3      	cbnz	r3, 8004932 <_strtod_l+0xa6a>
 80048f8:	2200      	movs	r2, #0
 80048fa:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <_strtod_l+0xb38>)
 80048fc:	4630      	mov	r0, r6
 80048fe:	4639      	mov	r1, r7
 8004900:	f7fc f85c 	bl	80009bc <__aeabi_dcmplt>
 8004904:	b9c8      	cbnz	r0, 800493a <_strtod_l+0xa72>
 8004906:	2200      	movs	r2, #0
 8004908:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <_strtod_l+0xb44>)
 800490a:	4630      	mov	r0, r6
 800490c:	4639      	mov	r1, r7
 800490e:	f7fb fde3 	bl	80004d8 <__aeabi_dmul>
 8004912:	4604      	mov	r4, r0
 8004914:	460d      	mov	r5, r1
 8004916:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800491a:	9418      	str	r4, [sp, #96]	; 0x60
 800491c:	9319      	str	r3, [sp, #100]	; 0x64
 800491e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004922:	e79d      	b.n	8004860 <_strtod_l+0x998>
 8004924:	f1b9 0f01 	cmp.w	r9, #1
 8004928:	d103      	bne.n	8004932 <_strtod_l+0xa6a>
 800492a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	f43f ad8a 	beq.w	8004446 <_strtod_l+0x57e>
 8004932:	2600      	movs	r6, #0
 8004934:	4f36      	ldr	r7, [pc, #216]	; (8004a10 <_strtod_l+0xb48>)
 8004936:	2400      	movs	r4, #0
 8004938:	e791      	b.n	800485e <_strtod_l+0x996>
 800493a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800493c:	4d33      	ldr	r5, [pc, #204]	; (8004a0c <_strtod_l+0xb44>)
 800493e:	e7ea      	b.n	8004916 <_strtod_l+0xa4e>
 8004940:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <_strtod_l+0xb44>)
 8004942:	2200      	movs	r2, #0
 8004944:	4630      	mov	r0, r6
 8004946:	4639      	mov	r1, r7
 8004948:	f7fb fdc6 	bl	80004d8 <__aeabi_dmul>
 800494c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800494e:	4604      	mov	r4, r0
 8004950:	460d      	mov	r5, r1
 8004952:	b933      	cbnz	r3, 8004962 <_strtod_l+0xa9a>
 8004954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004958:	9010      	str	r0, [sp, #64]	; 0x40
 800495a:	9311      	str	r3, [sp, #68]	; 0x44
 800495c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004960:	e77e      	b.n	8004860 <_strtod_l+0x998>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800496a:	e7f7      	b.n	800495c <_strtod_l+0xa94>
 800496c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004970:	9b05      	ldr	r3, [sp, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1a8      	bne.n	80048c8 <_strtod_l+0xa00>
 8004976:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800497a:	0d1b      	lsrs	r3, r3, #20
 800497c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800497e:	051b      	lsls	r3, r3, #20
 8004980:	429a      	cmp	r2, r3
 8004982:	4656      	mov	r6, sl
 8004984:	d1a0      	bne.n	80048c8 <_strtod_l+0xa00>
 8004986:	4629      	mov	r1, r5
 8004988:	4620      	mov	r0, r4
 800498a:	f7fc f855 	bl	8000a38 <__aeabi_d2iz>
 800498e:	f7fb fd39 	bl	8000404 <__aeabi_i2d>
 8004992:	460b      	mov	r3, r1
 8004994:	4602      	mov	r2, r0
 8004996:	4629      	mov	r1, r5
 8004998:	4620      	mov	r0, r4
 800499a:	f7fb fbe5 	bl	8000168 <__aeabi_dsub>
 800499e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049a0:	4604      	mov	r4, r0
 80049a2:	460d      	mov	r5, r1
 80049a4:	b933      	cbnz	r3, 80049b4 <_strtod_l+0xaec>
 80049a6:	f1b9 0f00 	cmp.w	r9, #0
 80049aa:	d103      	bne.n	80049b4 <_strtod_l+0xaec>
 80049ac:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80049b0:	2e00      	cmp	r6, #0
 80049b2:	d06a      	beq.n	8004a8a <_strtod_l+0xbc2>
 80049b4:	a30a      	add	r3, pc, #40	; (adr r3, 80049e0 <_strtod_l+0xb18>)
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	4620      	mov	r0, r4
 80049bc:	4629      	mov	r1, r5
 80049be:	f7fb fffd 	bl	80009bc <__aeabi_dcmplt>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	f47f acad 	bne.w	8004322 <_strtod_l+0x45a>
 80049c8:	a307      	add	r3, pc, #28	; (adr r3, 80049e8 <_strtod_l+0xb20>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	4620      	mov	r0, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7fc f811 	bl	80009f8 <__aeabi_dcmpgt>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f43f af76 	beq.w	80048c8 <_strtod_l+0xa00>
 80049dc:	e4a1      	b.n	8004322 <_strtod_l+0x45a>
 80049de:	bf00      	nop
 80049e0:	94a03595 	.word	0x94a03595
 80049e4:	3fdfffff 	.word	0x3fdfffff
 80049e8:	35afe535 	.word	0x35afe535
 80049ec:	3fe00000 	.word	0x3fe00000
 80049f0:	000fffff 	.word	0x000fffff
 80049f4:	7ff00000 	.word	0x7ff00000
 80049f8:	7fefffff 	.word	0x7fefffff
 80049fc:	39500000 	.word	0x39500000
 8004a00:	3ff00000 	.word	0x3ff00000
 8004a04:	7fe00000 	.word	0x7fe00000
 8004a08:	7c9fffff 	.word	0x7c9fffff
 8004a0c:	3fe00000 	.word	0x3fe00000
 8004a10:	bff00000 	.word	0xbff00000
 8004a14:	9b05      	ldr	r3, [sp, #20]
 8004a16:	b313      	cbz	r3, 8004a5e <_strtod_l+0xb96>
 8004a18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a1e:	d81e      	bhi.n	8004a5e <_strtod_l+0xb96>
 8004a20:	a325      	add	r3, pc, #148	; (adr r3, 8004ab8 <_strtod_l+0xbf0>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	4620      	mov	r0, r4
 8004a28:	4629      	mov	r1, r5
 8004a2a:	f7fb ffd1 	bl	80009d0 <__aeabi_dcmple>
 8004a2e:	b190      	cbz	r0, 8004a56 <_strtod_l+0xb8e>
 8004a30:	4629      	mov	r1, r5
 8004a32:	4620      	mov	r0, r4
 8004a34:	f7fc f828 	bl	8000a88 <__aeabi_d2uiz>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	bf08      	it	eq
 8004a3c:	2001      	moveq	r0, #1
 8004a3e:	f7fb fcd1 	bl	80003e4 <__aeabi_ui2d>
 8004a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a44:	4604      	mov	r4, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	b9d3      	cbnz	r3, 8004a80 <_strtod_l+0xbb8>
 8004a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a4e:	9012      	str	r0, [sp, #72]	; 0x48
 8004a50:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a52:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a58:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004a5c:	1a9f      	subs	r7, r3, r2
 8004a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a62:	f001 fe59 	bl	8006718 <__ulp>
 8004a66:	4602      	mov	r2, r0
 8004a68:	460b      	mov	r3, r1
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	f7fb fd33 	bl	80004d8 <__aeabi_dmul>
 8004a72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a76:	f7fb fb79 	bl	800016c <__adddf3>
 8004a7a:	4681      	mov	r9, r0
 8004a7c:	468a      	mov	sl, r1
 8004a7e:	e777      	b.n	8004970 <_strtod_l+0xaa8>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004a88:	e7e3      	b.n	8004a52 <_strtod_l+0xb8a>
 8004a8a:	a30d      	add	r3, pc, #52	; (adr r3, 8004ac0 <_strtod_l+0xbf8>)
 8004a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a90:	f7fb ff94 	bl	80009bc <__aeabi_dcmplt>
 8004a94:	e79f      	b.n	80049d6 <_strtod_l+0xb0e>
 8004a96:	2300      	movs	r3, #0
 8004a98:	930d      	str	r3, [sp, #52]	; 0x34
 8004a9a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004a9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	f7ff ba55 	b.w	8003f4e <_strtod_l+0x86>
 8004aa4:	2b65      	cmp	r3, #101	; 0x65
 8004aa6:	f04f 0200 	mov.w	r2, #0
 8004aaa:	f43f ab42 	beq.w	8004132 <_strtod_l+0x26a>
 8004aae:	2101      	movs	r1, #1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	9105      	str	r1, [sp, #20]
 8004ab4:	f7ff babf 	b.w	8004036 <_strtod_l+0x16e>
 8004ab8:	ffc00000 	.word	0xffc00000
 8004abc:	41dfffff 	.word	0x41dfffff
 8004ac0:	94a03595 	.word	0x94a03595
 8004ac4:	3fcfffff 	.word	0x3fcfffff

08004ac8 <_strtod_r>:
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <_strtod_r+0x18>)
 8004aca:	b410      	push	{r4}
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4c05      	ldr	r4, [pc, #20]	; (8004ae4 <_strtod_r+0x1c>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bf08      	it	eq
 8004ad6:	4623      	moveq	r3, r4
 8004ad8:	bc10      	pop	{r4}
 8004ada:	f7ff b9f5 	b.w	8003ec8 <_strtod_l>
 8004ade:	bf00      	nop
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	20000070 	.word	0x20000070

08004ae8 <_strtol_l.isra.0>:
 8004ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aec:	4680      	mov	r8, r0
 8004aee:	4689      	mov	r9, r1
 8004af0:	4692      	mov	sl, r2
 8004af2:	461e      	mov	r6, r3
 8004af4:	460f      	mov	r7, r1
 8004af6:	463d      	mov	r5, r7
 8004af8:	9808      	ldr	r0, [sp, #32]
 8004afa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004afe:	f001 fad9 	bl	80060b4 <__locale_ctype_ptr_l>
 8004b02:	4420      	add	r0, r4
 8004b04:	7843      	ldrb	r3, [r0, #1]
 8004b06:	f013 0308 	ands.w	r3, r3, #8
 8004b0a:	d132      	bne.n	8004b72 <_strtol_l.isra.0+0x8a>
 8004b0c:	2c2d      	cmp	r4, #45	; 0x2d
 8004b0e:	d132      	bne.n	8004b76 <_strtol_l.isra.0+0x8e>
 8004b10:	2201      	movs	r2, #1
 8004b12:	787c      	ldrb	r4, [r7, #1]
 8004b14:	1cbd      	adds	r5, r7, #2
 8004b16:	2e00      	cmp	r6, #0
 8004b18:	d05d      	beq.n	8004bd6 <_strtol_l.isra.0+0xee>
 8004b1a:	2e10      	cmp	r6, #16
 8004b1c:	d109      	bne.n	8004b32 <_strtol_l.isra.0+0x4a>
 8004b1e:	2c30      	cmp	r4, #48	; 0x30
 8004b20:	d107      	bne.n	8004b32 <_strtol_l.isra.0+0x4a>
 8004b22:	782b      	ldrb	r3, [r5, #0]
 8004b24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b28:	2b58      	cmp	r3, #88	; 0x58
 8004b2a:	d14f      	bne.n	8004bcc <_strtol_l.isra.0+0xe4>
 8004b2c:	2610      	movs	r6, #16
 8004b2e:	786c      	ldrb	r4, [r5, #1]
 8004b30:	3502      	adds	r5, #2
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	bf14      	ite	ne
 8004b36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004b3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004b3e:	2700      	movs	r7, #0
 8004b40:	fbb1 fcf6 	udiv	ip, r1, r6
 8004b44:	4638      	mov	r0, r7
 8004b46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004b4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004b4e:	2b09      	cmp	r3, #9
 8004b50:	d817      	bhi.n	8004b82 <_strtol_l.isra.0+0x9a>
 8004b52:	461c      	mov	r4, r3
 8004b54:	42a6      	cmp	r6, r4
 8004b56:	dd23      	ble.n	8004ba0 <_strtol_l.isra.0+0xb8>
 8004b58:	1c7b      	adds	r3, r7, #1
 8004b5a:	d007      	beq.n	8004b6c <_strtol_l.isra.0+0x84>
 8004b5c:	4584      	cmp	ip, r0
 8004b5e:	d31c      	bcc.n	8004b9a <_strtol_l.isra.0+0xb2>
 8004b60:	d101      	bne.n	8004b66 <_strtol_l.isra.0+0x7e>
 8004b62:	45a6      	cmp	lr, r4
 8004b64:	db19      	blt.n	8004b9a <_strtol_l.isra.0+0xb2>
 8004b66:	2701      	movs	r7, #1
 8004b68:	fb00 4006 	mla	r0, r0, r6, r4
 8004b6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b70:	e7eb      	b.n	8004b4a <_strtol_l.isra.0+0x62>
 8004b72:	462f      	mov	r7, r5
 8004b74:	e7bf      	b.n	8004af6 <_strtol_l.isra.0+0xe>
 8004b76:	2c2b      	cmp	r4, #43	; 0x2b
 8004b78:	bf04      	itt	eq
 8004b7a:	1cbd      	addeq	r5, r7, #2
 8004b7c:	787c      	ldrbeq	r4, [r7, #1]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	e7c9      	b.n	8004b16 <_strtol_l.isra.0+0x2e>
 8004b82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004b86:	2b19      	cmp	r3, #25
 8004b88:	d801      	bhi.n	8004b8e <_strtol_l.isra.0+0xa6>
 8004b8a:	3c37      	subs	r4, #55	; 0x37
 8004b8c:	e7e2      	b.n	8004b54 <_strtol_l.isra.0+0x6c>
 8004b8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004b92:	2b19      	cmp	r3, #25
 8004b94:	d804      	bhi.n	8004ba0 <_strtol_l.isra.0+0xb8>
 8004b96:	3c57      	subs	r4, #87	; 0x57
 8004b98:	e7dc      	b.n	8004b54 <_strtol_l.isra.0+0x6c>
 8004b9a:	f04f 37ff 	mov.w	r7, #4294967295
 8004b9e:	e7e5      	b.n	8004b6c <_strtol_l.isra.0+0x84>
 8004ba0:	1c7b      	adds	r3, r7, #1
 8004ba2:	d108      	bne.n	8004bb6 <_strtol_l.isra.0+0xce>
 8004ba4:	2322      	movs	r3, #34	; 0x22
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	f8c8 3000 	str.w	r3, [r8]
 8004bac:	f1ba 0f00 	cmp.w	sl, #0
 8004bb0:	d107      	bne.n	8004bc2 <_strtol_l.isra.0+0xda>
 8004bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb6:	b102      	cbz	r2, 8004bba <_strtol_l.isra.0+0xd2>
 8004bb8:	4240      	negs	r0, r0
 8004bba:	f1ba 0f00 	cmp.w	sl, #0
 8004bbe:	d0f8      	beq.n	8004bb2 <_strtol_l.isra.0+0xca>
 8004bc0:	b10f      	cbz	r7, 8004bc6 <_strtol_l.isra.0+0xde>
 8004bc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8004bc6:	f8ca 9000 	str.w	r9, [sl]
 8004bca:	e7f2      	b.n	8004bb2 <_strtol_l.isra.0+0xca>
 8004bcc:	2430      	movs	r4, #48	; 0x30
 8004bce:	2e00      	cmp	r6, #0
 8004bd0:	d1af      	bne.n	8004b32 <_strtol_l.isra.0+0x4a>
 8004bd2:	2608      	movs	r6, #8
 8004bd4:	e7ad      	b.n	8004b32 <_strtol_l.isra.0+0x4a>
 8004bd6:	2c30      	cmp	r4, #48	; 0x30
 8004bd8:	d0a3      	beq.n	8004b22 <_strtol_l.isra.0+0x3a>
 8004bda:	260a      	movs	r6, #10
 8004bdc:	e7a9      	b.n	8004b32 <_strtol_l.isra.0+0x4a>
	...

08004be0 <_strtol_r>:
 8004be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004be2:	4c06      	ldr	r4, [pc, #24]	; (8004bfc <_strtol_r+0x1c>)
 8004be4:	4d06      	ldr	r5, [pc, #24]	; (8004c00 <_strtol_r+0x20>)
 8004be6:	6824      	ldr	r4, [r4, #0]
 8004be8:	6a24      	ldr	r4, [r4, #32]
 8004bea:	2c00      	cmp	r4, #0
 8004bec:	bf08      	it	eq
 8004bee:	462c      	moveq	r4, r5
 8004bf0:	9400      	str	r4, [sp, #0]
 8004bf2:	f7ff ff79 	bl	8004ae8 <_strtol_l.isra.0>
 8004bf6:	b003      	add	sp, #12
 8004bf8:	bd30      	pop	{r4, r5, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2000000c 	.word	0x2000000c
 8004c00:	20000070 	.word	0x20000070

08004c04 <_write_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	4605      	mov	r5, r0
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4c05      	ldr	r4, [pc, #20]	; (8004c24 <_write_r+0x20>)
 8004c10:	6022      	str	r2, [r4, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f7fc fc43 	bl	800149e <_write>
 8004c18:	1c43      	adds	r3, r0, #1
 8004c1a:	d102      	bne.n	8004c22 <_write_r+0x1e>
 8004c1c:	6823      	ldr	r3, [r4, #0]
 8004c1e:	b103      	cbz	r3, 8004c22 <_write_r+0x1e>
 8004c20:	602b      	str	r3, [r5, #0]
 8004c22:	bd38      	pop	{r3, r4, r5, pc}
 8004c24:	20000564 	.word	0x20000564

08004c28 <_close_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	4c05      	ldr	r4, [pc, #20]	; (8004c44 <_close_r+0x1c>)
 8004c2e:	4605      	mov	r5, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	6023      	str	r3, [r4, #0]
 8004c34:	f7fc fc4f 	bl	80014d6 <_close>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d102      	bne.n	8004c42 <_close_r+0x1a>
 8004c3c:	6823      	ldr	r3, [r4, #0]
 8004c3e:	b103      	cbz	r3, 8004c42 <_close_r+0x1a>
 8004c40:	602b      	str	r3, [r5, #0]
 8004c42:	bd38      	pop	{r3, r4, r5, pc}
 8004c44:	20000564 	.word	0x20000564

08004c48 <quorem>:
 8004c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	6903      	ldr	r3, [r0, #16]
 8004c4e:	690c      	ldr	r4, [r1, #16]
 8004c50:	4680      	mov	r8, r0
 8004c52:	42a3      	cmp	r3, r4
 8004c54:	f2c0 8084 	blt.w	8004d60 <quorem+0x118>
 8004c58:	3c01      	subs	r4, #1
 8004c5a:	f101 0714 	add.w	r7, r1, #20
 8004c5e:	f100 0614 	add.w	r6, r0, #20
 8004c62:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c66:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c6a:	3501      	adds	r5, #1
 8004c6c:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c70:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c74:	eb06 030c 	add.w	r3, r6, ip
 8004c78:	eb07 090c 	add.w	r9, r7, ip
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	b39d      	cbz	r5, 8004ce8 <quorem+0xa0>
 8004c80:	f04f 0a00 	mov.w	sl, #0
 8004c84:	4638      	mov	r0, r7
 8004c86:	46b6      	mov	lr, r6
 8004c88:	46d3      	mov	fp, sl
 8004c8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c8e:	b293      	uxth	r3, r2
 8004c90:	fb05 a303 	mla	r3, r5, r3, sl
 8004c94:	0c12      	lsrs	r2, r2, #16
 8004c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c9a:	fb05 a202 	mla	r2, r5, r2, sl
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	ebab 0303 	sub.w	r3, fp, r3
 8004ca4:	f8de b000 	ldr.w	fp, [lr]
 8004ca8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004cac:	fa1f fb8b 	uxth.w	fp, fp
 8004cb0:	445b      	add	r3, fp
 8004cb2:	fa1f fb82 	uxth.w	fp, r2
 8004cb6:	f8de 2000 	ldr.w	r2, [lr]
 8004cba:	4581      	cmp	r9, r0
 8004cbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004cce:	f84e 3b04 	str.w	r3, [lr], #4
 8004cd2:	d2da      	bcs.n	8004c8a <quorem+0x42>
 8004cd4:	f856 300c 	ldr.w	r3, [r6, ip]
 8004cd8:	b933      	cbnz	r3, 8004ce8 <quorem+0xa0>
 8004cda:	9b01      	ldr	r3, [sp, #4]
 8004cdc:	3b04      	subs	r3, #4
 8004cde:	429e      	cmp	r6, r3
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	d331      	bcc.n	8004d48 <quorem+0x100>
 8004ce4:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ce8:	4640      	mov	r0, r8
 8004cea:	f001 fc9d 	bl	8006628 <__mcmp>
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	db26      	blt.n	8004d40 <quorem+0xf8>
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f04f 0c00 	mov.w	ip, #0
 8004cf8:	3501      	adds	r5, #1
 8004cfa:	f857 1b04 	ldr.w	r1, [r7], #4
 8004cfe:	f8d0 e000 	ldr.w	lr, [r0]
 8004d02:	b28b      	uxth	r3, r1
 8004d04:	ebac 0303 	sub.w	r3, ip, r3
 8004d08:	fa1f f28e 	uxth.w	r2, lr
 8004d0c:	4413      	add	r3, r2
 8004d0e:	0c0a      	lsrs	r2, r1, #16
 8004d10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d1e:	45b9      	cmp	r9, r7
 8004d20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d24:	f840 3b04 	str.w	r3, [r0], #4
 8004d28:	d2e7      	bcs.n	8004cfa <quorem+0xb2>
 8004d2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004d2e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004d32:	b92a      	cbnz	r2, 8004d40 <quorem+0xf8>
 8004d34:	3b04      	subs	r3, #4
 8004d36:	429e      	cmp	r6, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	d30b      	bcc.n	8004d54 <quorem+0x10c>
 8004d3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d40:	4628      	mov	r0, r5
 8004d42:	b003      	add	sp, #12
 8004d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	d1c9      	bne.n	8004ce4 <quorem+0x9c>
 8004d50:	3c01      	subs	r4, #1
 8004d52:	e7c4      	b.n	8004cde <quorem+0x96>
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	3b04      	subs	r3, #4
 8004d58:	2a00      	cmp	r2, #0
 8004d5a:	d1ef      	bne.n	8004d3c <quorem+0xf4>
 8004d5c:	3c01      	subs	r4, #1
 8004d5e:	e7ea      	b.n	8004d36 <quorem+0xee>
 8004d60:	2000      	movs	r0, #0
 8004d62:	e7ee      	b.n	8004d42 <quorem+0xfa>
 8004d64:	0000      	movs	r0, r0
	...

08004d68 <_dtoa_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	461f      	mov	r7, r3
 8004d70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d72:	b095      	sub	sp, #84	; 0x54
 8004d74:	4604      	mov	r4, r0
 8004d76:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004d7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004d7e:	b93d      	cbnz	r5, 8004d90 <_dtoa_r+0x28>
 8004d80:	2010      	movs	r0, #16
 8004d82:	f001 f9cb 	bl	800611c <malloc>
 8004d86:	6260      	str	r0, [r4, #36]	; 0x24
 8004d88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d8c:	6005      	str	r5, [r0, #0]
 8004d8e:	60c5      	str	r5, [r0, #12]
 8004d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	b151      	cbz	r1, 8004dac <_dtoa_r+0x44>
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4093      	lsls	r3, r2
 8004d9c:	604a      	str	r2, [r1, #4]
 8004d9e:	608b      	str	r3, [r1, #8]
 8004da0:	4620      	mov	r0, r4
 8004da2:	f001 fa22 	bl	80061ea <_Bfree>
 8004da6:	2200      	movs	r2, #0
 8004da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	1e3b      	subs	r3, r7, #0
 8004dae:	bfaf      	iteee	ge
 8004db0:	2300      	movge	r3, #0
 8004db2:	2201      	movlt	r2, #1
 8004db4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004db8:	9303      	strlt	r3, [sp, #12]
 8004dba:	bfac      	ite	ge
 8004dbc:	f8c8 3000 	strge.w	r3, [r8]
 8004dc0:	f8c8 2000 	strlt.w	r2, [r8]
 8004dc4:	4bae      	ldr	r3, [pc, #696]	; (8005080 <_dtoa_r+0x318>)
 8004dc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004dca:	ea33 0308 	bics.w	r3, r3, r8
 8004dce:	d11b      	bne.n	8004e08 <_dtoa_r+0xa0>
 8004dd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	b923      	cbnz	r3, 8004de6 <_dtoa_r+0x7e>
 8004ddc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f000 8545 	beq.w	8005870 <_dtoa_r+0xb08>
 8004de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004de8:	b953      	cbnz	r3, 8004e00 <_dtoa_r+0x98>
 8004dea:	4ba6      	ldr	r3, [pc, #664]	; (8005084 <_dtoa_r+0x31c>)
 8004dec:	e021      	b.n	8004e32 <_dtoa_r+0xca>
 8004dee:	4ba6      	ldr	r3, [pc, #664]	; (8005088 <_dtoa_r+0x320>)
 8004df0:	9306      	str	r3, [sp, #24]
 8004df2:	3308      	adds	r3, #8
 8004df4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	9806      	ldr	r0, [sp, #24]
 8004dfa:	b015      	add	sp, #84	; 0x54
 8004dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e00:	4ba0      	ldr	r3, [pc, #640]	; (8005084 <_dtoa_r+0x31c>)
 8004e02:	9306      	str	r3, [sp, #24]
 8004e04:	3303      	adds	r3, #3
 8004e06:	e7f5      	b.n	8004df4 <_dtoa_r+0x8c>
 8004e08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2300      	movs	r3, #0
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb fdc8 	bl	80009a8 <__aeabi_dcmpeq>
 8004e18:	4682      	mov	sl, r0
 8004e1a:	b160      	cbz	r0, 8004e36 <_dtoa_r+0xce>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8520 	beq.w	800586a <_dtoa_r+0xb02>
 8004e2a:	4b98      	ldr	r3, [pc, #608]	; (800508c <_dtoa_r+0x324>)
 8004e2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	9306      	str	r3, [sp, #24]
 8004e34:	e7e0      	b.n	8004df8 <_dtoa_r+0x90>
 8004e36:	ab12      	add	r3, sp, #72	; 0x48
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	ab13      	add	r3, sp, #76	; 0x4c
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	4632      	mov	r2, r6
 8004e40:	463b      	mov	r3, r7
 8004e42:	4620      	mov	r0, r4
 8004e44:	f001 fcde 	bl	8006804 <__d2b>
 8004e48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004e4c:	4683      	mov	fp, r0
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	d07d      	beq.n	8004f4e <_dtoa_r+0x1e6>
 8004e52:	46b0      	mov	r8, r6
 8004e54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e58:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004e5c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004e60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e64:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4b89      	ldr	r3, [pc, #548]	; (8005090 <_dtoa_r+0x328>)
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	f7fb f97a 	bl	8000168 <__aeabi_dsub>
 8004e74:	a37c      	add	r3, pc, #496	; (adr r3, 8005068 <_dtoa_r+0x300>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fb2d 	bl	80004d8 <__aeabi_dmul>
 8004e7e:	a37c      	add	r3, pc, #496	; (adr r3, 8005070 <_dtoa_r+0x308>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb f972 	bl	800016c <__adddf3>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	f7fb fab9 	bl	8000404 <__aeabi_i2d>
 8004e92:	a379      	add	r3, pc, #484	; (adr r3, 8005078 <_dtoa_r+0x310>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fb1e 	bl	80004d8 <__aeabi_dmul>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	f7fb f962 	bl	800016c <__adddf3>
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	f7fb fdc4 	bl	8000a38 <__aeabi_d2iz>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4682      	mov	sl, r0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7fb fd7f 	bl	80009bc <__aeabi_dcmplt>
 8004ebe:	b148      	cbz	r0, 8004ed4 <_dtoa_r+0x16c>
 8004ec0:	4650      	mov	r0, sl
 8004ec2:	f7fb fa9f 	bl	8000404 <__aeabi_i2d>
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	463b      	mov	r3, r7
 8004eca:	f7fb fd6d 	bl	80009a8 <__aeabi_dcmpeq>
 8004ece:	b908      	cbnz	r0, 8004ed4 <_dtoa_r+0x16c>
 8004ed0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ed4:	f1ba 0f16 	cmp.w	sl, #22
 8004ed8:	d85a      	bhi.n	8004f90 <_dtoa_r+0x228>
 8004eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ede:	496d      	ldr	r1, [pc, #436]	; (8005094 <_dtoa_r+0x32c>)
 8004ee0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee8:	f7fb fd86 	bl	80009f8 <__aeabi_dcmpgt>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d051      	beq.n	8004f94 <_dtoa_r+0x22c>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004efa:	1b5d      	subs	r5, r3, r5
 8004efc:	1e6b      	subs	r3, r5, #1
 8004efe:	9307      	str	r3, [sp, #28]
 8004f00:	bf43      	ittte	mi
 8004f02:	2300      	movmi	r3, #0
 8004f04:	f1c5 0901 	rsbmi	r9, r5, #1
 8004f08:	9307      	strmi	r3, [sp, #28]
 8004f0a:	f04f 0900 	movpl.w	r9, #0
 8004f0e:	f1ba 0f00 	cmp.w	sl, #0
 8004f12:	db41      	blt.n	8004f98 <_dtoa_r+0x230>
 8004f14:	9b07      	ldr	r3, [sp, #28]
 8004f16:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004f1a:	4453      	add	r3, sl
 8004f1c:	9307      	str	r3, [sp, #28]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	f200 808f 	bhi.w	8005048 <_dtoa_r+0x2e0>
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	bfc4      	itt	gt
 8004f2e:	3b04      	subgt	r3, #4
 8004f30:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004f32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f34:	bfc8      	it	gt
 8004f36:	2500      	movgt	r5, #0
 8004f38:	f1a3 0302 	sub.w	r3, r3, #2
 8004f3c:	bfd8      	it	le
 8004f3e:	2501      	movle	r5, #1
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	f200 808d 	bhi.w	8005060 <_dtoa_r+0x2f8>
 8004f46:	e8df f003 	tbb	[pc, r3]
 8004f4a:	7d7b      	.short	0x7d7b
 8004f4c:	6f2f      	.short	0x6f2f
 8004f4e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004f52:	441d      	add	r5, r3
 8004f54:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004f58:	2820      	cmp	r0, #32
 8004f5a:	dd13      	ble.n	8004f84 <_dtoa_r+0x21c>
 8004f5c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	fa08 f800 	lsl.w	r8, r8, r0
 8004f66:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004f6a:	fa23 f000 	lsr.w	r0, r3, r0
 8004f6e:	ea48 0000 	orr.w	r0, r8, r0
 8004f72:	f7fb fa37 	bl	80003e4 <__aeabi_ui2d>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4680      	mov	r8, r0
 8004f7a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004f7e:	3d01      	subs	r5, #1
 8004f80:	9310      	str	r3, [sp, #64]	; 0x40
 8004f82:	e771      	b.n	8004e68 <_dtoa_r+0x100>
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	f1c0 0020 	rsb	r0, r0, #32
 8004f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f8e:	e7f0      	b.n	8004f72 <_dtoa_r+0x20a>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e7b0      	b.n	8004ef6 <_dtoa_r+0x18e>
 8004f94:	900d      	str	r0, [sp, #52]	; 0x34
 8004f96:	e7af      	b.n	8004ef8 <_dtoa_r+0x190>
 8004f98:	f1ca 0300 	rsb	r3, sl, #0
 8004f9c:	9308      	str	r3, [sp, #32]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	eba9 090a 	sub.w	r9, r9, sl
 8004fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa6:	e7bc      	b.n	8004f22 <_dtoa_r+0x1ba>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	9309      	str	r3, [sp, #36]	; 0x24
 8004fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd74      	ble.n	800509c <_dtoa_r+0x334>
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fba:	6072      	str	r2, [r6, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	f102 0014 	add.w	r0, r2, #20
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	6871      	ldr	r1, [r6, #4]
 8004fc6:	d96e      	bls.n	80050a6 <_dtoa_r+0x33e>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f001 f8da 	bl	8006182 <_Balloc>
 8004fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd0:	6030      	str	r0, [r6, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f1b8 0f0e 	cmp.w	r8, #14
 8004fd8:	9306      	str	r3, [sp, #24]
 8004fda:	f200 80ed 	bhi.w	80051b8 <_dtoa_r+0x450>
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	f000 80ea 	beq.w	80051b8 <_dtoa_r+0x450>
 8004fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004ff0:	dd77      	ble.n	80050e2 <_dtoa_r+0x37a>
 8004ff2:	4a28      	ldr	r2, [pc, #160]	; (8005094 <_dtoa_r+0x32c>)
 8004ff4:	f00a 030f 	and.w	r3, sl, #15
 8004ff8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ffc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005000:	06f0      	lsls	r0, r6, #27
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800500a:	d568      	bpl.n	80050de <_dtoa_r+0x376>
 800500c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005010:	4b21      	ldr	r3, [pc, #132]	; (8005098 <_dtoa_r+0x330>)
 8005012:	2503      	movs	r5, #3
 8005014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005018:	f7fb fb88 	bl	800072c <__aeabi_ddiv>
 800501c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005020:	f006 060f 	and.w	r6, r6, #15
 8005024:	4f1c      	ldr	r7, [pc, #112]	; (8005098 <_dtoa_r+0x330>)
 8005026:	e04f      	b.n	80050c8 <_dtoa_r+0x360>
 8005028:	2301      	movs	r3, #1
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800502e:	4453      	add	r3, sl
 8005030:	f103 0801 	add.w	r8, r3, #1
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	4643      	mov	r3, r8
 8005038:	2b01      	cmp	r3, #1
 800503a:	bfb8      	it	lt
 800503c:	2301      	movlt	r3, #1
 800503e:	e7ba      	b.n	8004fb6 <_dtoa_r+0x24e>
 8005040:	2300      	movs	r3, #0
 8005042:	e7b2      	b.n	8004faa <_dtoa_r+0x242>
 8005044:	2300      	movs	r3, #0
 8005046:	e7f0      	b.n	800502a <_dtoa_r+0x2c2>
 8005048:	2501      	movs	r5, #1
 800504a:	2300      	movs	r3, #0
 800504c:	9509      	str	r5, [sp, #36]	; 0x24
 800504e:	931e      	str	r3, [sp, #120]	; 0x78
 8005050:	f04f 33ff 	mov.w	r3, #4294967295
 8005054:	2200      	movs	r2, #0
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	4698      	mov	r8, r3
 800505a:	2312      	movs	r3, #18
 800505c:	921f      	str	r2, [sp, #124]	; 0x7c
 800505e:	e7aa      	b.n	8004fb6 <_dtoa_r+0x24e>
 8005060:	2301      	movs	r3, #1
 8005062:	9309      	str	r3, [sp, #36]	; 0x24
 8005064:	e7f4      	b.n	8005050 <_dtoa_r+0x2e8>
 8005066:	bf00      	nop
 8005068:	636f4361 	.word	0x636f4361
 800506c:	3fd287a7 	.word	0x3fd287a7
 8005070:	8b60c8b3 	.word	0x8b60c8b3
 8005074:	3fc68a28 	.word	0x3fc68a28
 8005078:	509f79fb 	.word	0x509f79fb
 800507c:	3fd34413 	.word	0x3fd34413
 8005080:	7ff00000 	.word	0x7ff00000
 8005084:	08007f99 	.word	0x08007f99
 8005088:	08007f90 	.word	0x08007f90
 800508c:	08008134 	.word	0x08008134
 8005090:	3ff80000 	.word	0x3ff80000
 8005094:	08008038 	.word	0x08008038
 8005098:	08008010 	.word	0x08008010
 800509c:	2301      	movs	r3, #1
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	4698      	mov	r8, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	e7da      	b.n	800505c <_dtoa_r+0x2f4>
 80050a6:	3101      	adds	r1, #1
 80050a8:	6071      	str	r1, [r6, #4]
 80050aa:	0052      	lsls	r2, r2, #1
 80050ac:	e787      	b.n	8004fbe <_dtoa_r+0x256>
 80050ae:	07f1      	lsls	r1, r6, #31
 80050b0:	d508      	bpl.n	80050c4 <_dtoa_r+0x35c>
 80050b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ba:	f7fb fa0d 	bl	80004d8 <__aeabi_dmul>
 80050be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050c2:	3501      	adds	r5, #1
 80050c4:	1076      	asrs	r6, r6, #1
 80050c6:	3708      	adds	r7, #8
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	d1f0      	bne.n	80050ae <_dtoa_r+0x346>
 80050cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d4:	f7fb fb2a 	bl	800072c <__aeabi_ddiv>
 80050d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050dc:	e01b      	b.n	8005116 <_dtoa_r+0x3ae>
 80050de:	2502      	movs	r5, #2
 80050e0:	e7a0      	b.n	8005024 <_dtoa_r+0x2bc>
 80050e2:	f000 80a4 	beq.w	800522e <_dtoa_r+0x4c6>
 80050e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80050ea:	f1ca 0600 	rsb	r6, sl, #0
 80050ee:	4ba0      	ldr	r3, [pc, #640]	; (8005370 <_dtoa_r+0x608>)
 80050f0:	f006 020f 	and.w	r2, r6, #15
 80050f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f7fb f9ec 	bl	80004d8 <__aeabi_dmul>
 8005100:	2502      	movs	r5, #2
 8005102:	2300      	movs	r3, #0
 8005104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005108:	4f9a      	ldr	r7, [pc, #616]	; (8005374 <_dtoa_r+0x60c>)
 800510a:	1136      	asrs	r6, r6, #4
 800510c:	2e00      	cmp	r6, #0
 800510e:	f040 8083 	bne.w	8005218 <_dtoa_r+0x4b0>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e0      	bne.n	80050d8 <_dtoa_r+0x370>
 8005116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 808a 	beq.w	8005232 <_dtoa_r+0x4ca>
 800511e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005122:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800512a:	2200      	movs	r2, #0
 800512c:	4b92      	ldr	r3, [pc, #584]	; (8005378 <_dtoa_r+0x610>)
 800512e:	f7fb fc45 	bl	80009bc <__aeabi_dcmplt>
 8005132:	2800      	cmp	r0, #0
 8005134:	d07d      	beq.n	8005232 <_dtoa_r+0x4ca>
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	d07a      	beq.n	8005232 <_dtoa_r+0x4ca>
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	dd36      	ble.n	80051b0 <_dtoa_r+0x448>
 8005142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005146:	2200      	movs	r2, #0
 8005148:	4b8c      	ldr	r3, [pc, #560]	; (800537c <_dtoa_r+0x614>)
 800514a:	f7fb f9c5 	bl	80004d8 <__aeabi_dmul>
 800514e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005152:	9e04      	ldr	r6, [sp, #16]
 8005154:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005158:	3501      	adds	r5, #1
 800515a:	4628      	mov	r0, r5
 800515c:	f7fb f952 	bl	8000404 <__aeabi_i2d>
 8005160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005164:	f7fb f9b8 	bl	80004d8 <__aeabi_dmul>
 8005168:	2200      	movs	r2, #0
 800516a:	4b85      	ldr	r3, [pc, #532]	; (8005380 <_dtoa_r+0x618>)
 800516c:	f7fa fffe 	bl	800016c <__adddf3>
 8005170:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005174:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005178:	950b      	str	r5, [sp, #44]	; 0x2c
 800517a:	2e00      	cmp	r6, #0
 800517c:	d15c      	bne.n	8005238 <_dtoa_r+0x4d0>
 800517e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	4b7f      	ldr	r3, [pc, #508]	; (8005384 <_dtoa_r+0x61c>)
 8005186:	f7fa ffef 	bl	8000168 <__aeabi_dsub>
 800518a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800518c:	462b      	mov	r3, r5
 800518e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005192:	f7fb fc31 	bl	80009f8 <__aeabi_dcmpgt>
 8005196:	2800      	cmp	r0, #0
 8005198:	f040 8281 	bne.w	800569e <_dtoa_r+0x936>
 800519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80051a6:	f7fb fc09 	bl	80009bc <__aeabi_dcmplt>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f040 8275 	bne.w	800569a <_dtoa_r+0x932>
 80051b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80051b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f2c0 814b 	blt.w	8005456 <_dtoa_r+0x6ee>
 80051c0:	f1ba 0f0e 	cmp.w	sl, #14
 80051c4:	f300 8147 	bgt.w	8005456 <_dtoa_r+0x6ee>
 80051c8:	4b69      	ldr	r3, [pc, #420]	; (8005370 <_dtoa_r+0x608>)
 80051ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f280 80d7 	bge.w	800538c <_dtoa_r+0x624>
 80051de:	f1b8 0f00 	cmp.w	r8, #0
 80051e2:	f300 80d3 	bgt.w	800538c <_dtoa_r+0x624>
 80051e6:	f040 8257 	bne.w	8005698 <_dtoa_r+0x930>
 80051ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ee:	2200      	movs	r2, #0
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <_dtoa_r+0x61c>)
 80051f2:	f7fb f971 	bl	80004d8 <__aeabi_dmul>
 80051f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051fa:	f7fb fbf3 	bl	80009e4 <__aeabi_dcmpge>
 80051fe:	4646      	mov	r6, r8
 8005200:	4647      	mov	r7, r8
 8005202:	2800      	cmp	r0, #0
 8005204:	f040 822d 	bne.w	8005662 <_dtoa_r+0x8fa>
 8005208:	9b06      	ldr	r3, [sp, #24]
 800520a:	9a06      	ldr	r2, [sp, #24]
 800520c:	1c5d      	adds	r5, r3, #1
 800520e:	2331      	movs	r3, #49	; 0x31
 8005210:	f10a 0a01 	add.w	sl, sl, #1
 8005214:	7013      	strb	r3, [r2, #0]
 8005216:	e228      	b.n	800566a <_dtoa_r+0x902>
 8005218:	07f2      	lsls	r2, r6, #31
 800521a:	d505      	bpl.n	8005228 <_dtoa_r+0x4c0>
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	f7fb f95a 	bl	80004d8 <__aeabi_dmul>
 8005224:	2301      	movs	r3, #1
 8005226:	3501      	adds	r5, #1
 8005228:	1076      	asrs	r6, r6, #1
 800522a:	3708      	adds	r7, #8
 800522c:	e76e      	b.n	800510c <_dtoa_r+0x3a4>
 800522e:	2502      	movs	r5, #2
 8005230:	e771      	b.n	8005116 <_dtoa_r+0x3ae>
 8005232:	4657      	mov	r7, sl
 8005234:	4646      	mov	r6, r8
 8005236:	e790      	b.n	800515a <_dtoa_r+0x3f2>
 8005238:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <_dtoa_r+0x608>)
 800523a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800523e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d048      	beq.n	80052da <_dtoa_r+0x572>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	2000      	movs	r0, #0
 800524e:	494e      	ldr	r1, [pc, #312]	; (8005388 <_dtoa_r+0x620>)
 8005250:	f7fb fa6c 	bl	800072c <__aeabi_ddiv>
 8005254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005258:	f7fa ff86 	bl	8000168 <__aeabi_dsub>
 800525c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005260:	9d06      	ldr	r5, [sp, #24]
 8005262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005266:	f7fb fbe7 	bl	8000a38 <__aeabi_d2iz>
 800526a:	9011      	str	r0, [sp, #68]	; 0x44
 800526c:	f7fb f8ca 	bl	8000404 <__aeabi_i2d>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fa ff76 	bl	8000168 <__aeabi_dsub>
 800527c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800527e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005282:	3330      	adds	r3, #48	; 0x30
 8005284:	f805 3b01 	strb.w	r3, [r5], #1
 8005288:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800528c:	f7fb fb96 	bl	80009bc <__aeabi_dcmplt>
 8005290:	2800      	cmp	r0, #0
 8005292:	d163      	bne.n	800535c <_dtoa_r+0x5f4>
 8005294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005298:	2000      	movs	r0, #0
 800529a:	4937      	ldr	r1, [pc, #220]	; (8005378 <_dtoa_r+0x610>)
 800529c:	f7fa ff64 	bl	8000168 <__aeabi_dsub>
 80052a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052a4:	f7fb fb8a 	bl	80009bc <__aeabi_dcmplt>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f040 80b5 	bne.w	8005418 <_dtoa_r+0x6b0>
 80052ae:	9b06      	ldr	r3, [sp, #24]
 80052b0:	1aeb      	subs	r3, r5, r3
 80052b2:	429e      	cmp	r6, r3
 80052b4:	f77f af7c 	ble.w	80051b0 <_dtoa_r+0x448>
 80052b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052bc:	2200      	movs	r2, #0
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <_dtoa_r+0x614>)
 80052c0:	f7fb f90a 	bl	80004d8 <__aeabi_dmul>
 80052c4:	2200      	movs	r2, #0
 80052c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <_dtoa_r+0x614>)
 80052d0:	f7fb f902 	bl	80004d8 <__aeabi_dmul>
 80052d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d8:	e7c3      	b.n	8005262 <_dtoa_r+0x4fa>
 80052da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052de:	f7fb f8fb 	bl	80004d8 <__aeabi_dmul>
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052e8:	199d      	adds	r5, r3, r6
 80052ea:	461e      	mov	r6, r3
 80052ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f0:	f7fb fba2 	bl	8000a38 <__aeabi_d2iz>
 80052f4:	9011      	str	r0, [sp, #68]	; 0x44
 80052f6:	f7fb f885 	bl	8000404 <__aeabi_i2d>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005302:	f7fa ff31 	bl	8000168 <__aeabi_dsub>
 8005306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800530c:	3330      	adds	r3, #48	; 0x30
 800530e:	f806 3b01 	strb.w	r3, [r6], #1
 8005312:	42ae      	cmp	r6, r5
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	d124      	bne.n	8005364 <_dtoa_r+0x5fc>
 800531a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <_dtoa_r+0x620>)
 8005320:	f7fa ff24 	bl	800016c <__adddf3>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800532c:	f7fb fb64 	bl	80009f8 <__aeabi_dcmpgt>
 8005330:	2800      	cmp	r0, #0
 8005332:	d171      	bne.n	8005418 <_dtoa_r+0x6b0>
 8005334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005338:	2000      	movs	r0, #0
 800533a:	4913      	ldr	r1, [pc, #76]	; (8005388 <_dtoa_r+0x620>)
 800533c:	f7fa ff14 	bl	8000168 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005348:	f7fb fb38 	bl	80009bc <__aeabi_dcmplt>
 800534c:	2800      	cmp	r0, #0
 800534e:	f43f af2f 	beq.w	80051b0 <_dtoa_r+0x448>
 8005352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005356:	1e6a      	subs	r2, r5, #1
 8005358:	2b30      	cmp	r3, #48	; 0x30
 800535a:	d001      	beq.n	8005360 <_dtoa_r+0x5f8>
 800535c:	46ba      	mov	sl, r7
 800535e:	e04a      	b.n	80053f6 <_dtoa_r+0x68e>
 8005360:	4615      	mov	r5, r2
 8005362:	e7f6      	b.n	8005352 <_dtoa_r+0x5ea>
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <_dtoa_r+0x614>)
 8005366:	f7fb f8b7 	bl	80004d8 <__aeabi_dmul>
 800536a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800536e:	e7bd      	b.n	80052ec <_dtoa_r+0x584>
 8005370:	08008038 	.word	0x08008038
 8005374:	08008010 	.word	0x08008010
 8005378:	3ff00000 	.word	0x3ff00000
 800537c:	40240000 	.word	0x40240000
 8005380:	401c0000 	.word	0x401c0000
 8005384:	40140000 	.word	0x40140000
 8005388:	3fe00000 	.word	0x3fe00000
 800538c:	9d06      	ldr	r5, [sp, #24]
 800538e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005396:	4630      	mov	r0, r6
 8005398:	4639      	mov	r1, r7
 800539a:	f7fb f9c7 	bl	800072c <__aeabi_ddiv>
 800539e:	f7fb fb4b 	bl	8000a38 <__aeabi_d2iz>
 80053a2:	4681      	mov	r9, r0
 80053a4:	f7fb f82e 	bl	8000404 <__aeabi_i2d>
 80053a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ac:	f7fb f894 	bl	80004d8 <__aeabi_dmul>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4630      	mov	r0, r6
 80053b6:	4639      	mov	r1, r7
 80053b8:	f7fa fed6 	bl	8000168 <__aeabi_dsub>
 80053bc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80053c0:	f805 6b01 	strb.w	r6, [r5], #1
 80053c4:	9e06      	ldr	r6, [sp, #24]
 80053c6:	4602      	mov	r2, r0
 80053c8:	1bae      	subs	r6, r5, r6
 80053ca:	45b0      	cmp	r8, r6
 80053cc:	460b      	mov	r3, r1
 80053ce:	d135      	bne.n	800543c <_dtoa_r+0x6d4>
 80053d0:	f7fa fecc 	bl	800016c <__adddf3>
 80053d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d8:	4606      	mov	r6, r0
 80053da:	460f      	mov	r7, r1
 80053dc:	f7fb fb0c 	bl	80009f8 <__aeabi_dcmpgt>
 80053e0:	b9c8      	cbnz	r0, 8005416 <_dtoa_r+0x6ae>
 80053e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fb fadd 	bl	80009a8 <__aeabi_dcmpeq>
 80053ee:	b110      	cbz	r0, 80053f6 <_dtoa_r+0x68e>
 80053f0:	f019 0f01 	tst.w	r9, #1
 80053f4:	d10f      	bne.n	8005416 <_dtoa_r+0x6ae>
 80053f6:	4659      	mov	r1, fp
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fef6 	bl	80061ea <_Bfree>
 80053fe:	2300      	movs	r3, #0
 8005400:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005402:	702b      	strb	r3, [r5, #0]
 8005404:	f10a 0301 	add.w	r3, sl, #1
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800540c:	2b00      	cmp	r3, #0
 800540e:	f43f acf3 	beq.w	8004df8 <_dtoa_r+0x90>
 8005412:	601d      	str	r5, [r3, #0]
 8005414:	e4f0      	b.n	8004df8 <_dtoa_r+0x90>
 8005416:	4657      	mov	r7, sl
 8005418:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800541c:	1e6b      	subs	r3, r5, #1
 800541e:	2a39      	cmp	r2, #57	; 0x39
 8005420:	d106      	bne.n	8005430 <_dtoa_r+0x6c8>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d107      	bne.n	8005438 <_dtoa_r+0x6d0>
 8005428:	2330      	movs	r3, #48	; 0x30
 800542a:	7013      	strb	r3, [r2, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	3701      	adds	r7, #1
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	3201      	adds	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e791      	b.n	800535c <_dtoa_r+0x5f4>
 8005438:	461d      	mov	r5, r3
 800543a:	e7ed      	b.n	8005418 <_dtoa_r+0x6b0>
 800543c:	2200      	movs	r2, #0
 800543e:	4b99      	ldr	r3, [pc, #612]	; (80056a4 <_dtoa_r+0x93c>)
 8005440:	f7fb f84a 	bl	80004d8 <__aeabi_dmul>
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	f7fb faac 	bl	80009a8 <__aeabi_dcmpeq>
 8005450:	2800      	cmp	r0, #0
 8005452:	d09e      	beq.n	8005392 <_dtoa_r+0x62a>
 8005454:	e7cf      	b.n	80053f6 <_dtoa_r+0x68e>
 8005456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005458:	2a00      	cmp	r2, #0
 800545a:	f000 8088 	beq.w	800556e <_dtoa_r+0x806>
 800545e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005460:	2a01      	cmp	r2, #1
 8005462:	dc6d      	bgt.n	8005540 <_dtoa_r+0x7d8>
 8005464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005466:	2a00      	cmp	r2, #0
 8005468:	d066      	beq.n	8005538 <_dtoa_r+0x7d0>
 800546a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800546e:	464d      	mov	r5, r9
 8005470:	9e08      	ldr	r6, [sp, #32]
 8005472:	9a07      	ldr	r2, [sp, #28]
 8005474:	2101      	movs	r1, #1
 8005476:	441a      	add	r2, r3
 8005478:	4620      	mov	r0, r4
 800547a:	4499      	add	r9, r3
 800547c:	9207      	str	r2, [sp, #28]
 800547e:	f000 ff92 	bl	80063a6 <__i2b>
 8005482:	4607      	mov	r7, r0
 8005484:	2d00      	cmp	r5, #0
 8005486:	dd0b      	ble.n	80054a0 <_dtoa_r+0x738>
 8005488:	9b07      	ldr	r3, [sp, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd08      	ble.n	80054a0 <_dtoa_r+0x738>
 800548e:	42ab      	cmp	r3, r5
 8005490:	bfa8      	it	ge
 8005492:	462b      	movge	r3, r5
 8005494:	9a07      	ldr	r2, [sp, #28]
 8005496:	eba9 0903 	sub.w	r9, r9, r3
 800549a:	1aed      	subs	r5, r5, r3
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	9307      	str	r3, [sp, #28]
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	b1eb      	cbz	r3, 80054e0 <_dtoa_r+0x778>
 80054a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d065      	beq.n	8005576 <_dtoa_r+0x80e>
 80054aa:	b18e      	cbz	r6, 80054d0 <_dtoa_r+0x768>
 80054ac:	4639      	mov	r1, r7
 80054ae:	4632      	mov	r2, r6
 80054b0:	4620      	mov	r0, r4
 80054b2:	f001 f817 	bl	80064e4 <__pow5mult>
 80054b6:	465a      	mov	r2, fp
 80054b8:	4601      	mov	r1, r0
 80054ba:	4607      	mov	r7, r0
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 ff7b 	bl	80063b8 <__multiply>
 80054c2:	4659      	mov	r1, fp
 80054c4:	900a      	str	r0, [sp, #40]	; 0x28
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fe8f 	bl	80061ea <_Bfree>
 80054cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ce:	469b      	mov	fp, r3
 80054d0:	9b08      	ldr	r3, [sp, #32]
 80054d2:	1b9a      	subs	r2, r3, r6
 80054d4:	d004      	beq.n	80054e0 <_dtoa_r+0x778>
 80054d6:	4659      	mov	r1, fp
 80054d8:	4620      	mov	r0, r4
 80054da:	f001 f803 	bl	80064e4 <__pow5mult>
 80054de:	4683      	mov	fp, r0
 80054e0:	2101      	movs	r1, #1
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 ff5f 	bl	80063a6 <__i2b>
 80054e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ea:	4606      	mov	r6, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 81c6 	beq.w	800587e <_dtoa_r+0xb16>
 80054f2:	461a      	mov	r2, r3
 80054f4:	4601      	mov	r1, r0
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 fff4 	bl	80064e4 <__pow5mult>
 80054fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054fe:	4606      	mov	r6, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	dc3e      	bgt.n	8005582 <_dtoa_r+0x81a>
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d137      	bne.n	800557a <_dtoa_r+0x812>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005510:	2b00      	cmp	r3, #0
 8005512:	d134      	bne.n	800557e <_dtoa_r+0x816>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800551a:	0d1b      	lsrs	r3, r3, #20
 800551c:	051b      	lsls	r3, r3, #20
 800551e:	b12b      	cbz	r3, 800552c <_dtoa_r+0x7c4>
 8005520:	9b07      	ldr	r3, [sp, #28]
 8005522:	f109 0901 	add.w	r9, r9, #1
 8005526:	3301      	adds	r3, #1
 8005528:	9307      	str	r3, [sp, #28]
 800552a:	2301      	movs	r3, #1
 800552c:	9308      	str	r3, [sp, #32]
 800552e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005530:	2b00      	cmp	r3, #0
 8005532:	d128      	bne.n	8005586 <_dtoa_r+0x81e>
 8005534:	2001      	movs	r0, #1
 8005536:	e02e      	b.n	8005596 <_dtoa_r+0x82e>
 8005538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800553a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800553e:	e796      	b.n	800546e <_dtoa_r+0x706>
 8005540:	9b08      	ldr	r3, [sp, #32]
 8005542:	f108 36ff 	add.w	r6, r8, #4294967295
 8005546:	42b3      	cmp	r3, r6
 8005548:	bfb7      	itett	lt
 800554a:	9b08      	ldrlt	r3, [sp, #32]
 800554c:	1b9e      	subge	r6, r3, r6
 800554e:	1af2      	sublt	r2, r6, r3
 8005550:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005552:	bfbf      	itttt	lt
 8005554:	9608      	strlt	r6, [sp, #32]
 8005556:	189b      	addlt	r3, r3, r2
 8005558:	930c      	strlt	r3, [sp, #48]	; 0x30
 800555a:	2600      	movlt	r6, #0
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	bfb9      	ittee	lt
 8005562:	eba9 0508 	sublt.w	r5, r9, r8
 8005566:	2300      	movlt	r3, #0
 8005568:	464d      	movge	r5, r9
 800556a:	4643      	movge	r3, r8
 800556c:	e781      	b.n	8005472 <_dtoa_r+0x70a>
 800556e:	9e08      	ldr	r6, [sp, #32]
 8005570:	464d      	mov	r5, r9
 8005572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005574:	e786      	b.n	8005484 <_dtoa_r+0x71c>
 8005576:	9a08      	ldr	r2, [sp, #32]
 8005578:	e7ad      	b.n	80054d6 <_dtoa_r+0x76e>
 800557a:	2300      	movs	r3, #0
 800557c:	e7d6      	b.n	800552c <_dtoa_r+0x7c4>
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	e7d4      	b.n	800552c <_dtoa_r+0x7c4>
 8005582:	2300      	movs	r3, #0
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	6933      	ldr	r3, [r6, #16]
 8005588:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800558c:	6918      	ldr	r0, [r3, #16]
 800558e:	f000 febc 	bl	800630a <__hi0bits>
 8005592:	f1c0 0020 	rsb	r0, r0, #32
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	4418      	add	r0, r3
 800559a:	f010 001f 	ands.w	r0, r0, #31
 800559e:	d047      	beq.n	8005630 <_dtoa_r+0x8c8>
 80055a0:	f1c0 0320 	rsb	r3, r0, #32
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	dd3b      	ble.n	8005620 <_dtoa_r+0x8b8>
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	f1c0 001c 	rsb	r0, r0, #28
 80055ae:	4481      	add	r9, r0
 80055b0:	4405      	add	r5, r0
 80055b2:	4403      	add	r3, r0
 80055b4:	9307      	str	r3, [sp, #28]
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	dd05      	ble.n	80055c8 <_dtoa_r+0x860>
 80055bc:	4659      	mov	r1, fp
 80055be:	464a      	mov	r2, r9
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 ffdd 	bl	8006580 <__lshift>
 80055c6:	4683      	mov	fp, r0
 80055c8:	9b07      	ldr	r3, [sp, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dd05      	ble.n	80055da <_dtoa_r+0x872>
 80055ce:	4631      	mov	r1, r6
 80055d0:	461a      	mov	r2, r3
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 ffd4 	bl	8006580 <__lshift>
 80055d8:	4606      	mov	r6, r0
 80055da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055dc:	b353      	cbz	r3, 8005634 <_dtoa_r+0x8cc>
 80055de:	4631      	mov	r1, r6
 80055e0:	4658      	mov	r0, fp
 80055e2:	f001 f821 	bl	8006628 <__mcmp>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	da24      	bge.n	8005634 <_dtoa_r+0x8cc>
 80055ea:	2300      	movs	r3, #0
 80055ec:	4659      	mov	r1, fp
 80055ee:	220a      	movs	r2, #10
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fe11 	bl	8006218 <__multadd>
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fc:	4683      	mov	fp, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8144 	beq.w	800588c <_dtoa_r+0xb24>
 8005604:	2300      	movs	r3, #0
 8005606:	4639      	mov	r1, r7
 8005608:	220a      	movs	r2, #10
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fe04 	bl	8006218 <__multadd>
 8005610:	9b04      	ldr	r3, [sp, #16]
 8005612:	4607      	mov	r7, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc4d      	bgt.n	80056b4 <_dtoa_r+0x94c>
 8005618:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800561a:	2b02      	cmp	r3, #2
 800561c:	dd4a      	ble.n	80056b4 <_dtoa_r+0x94c>
 800561e:	e011      	b.n	8005644 <_dtoa_r+0x8dc>
 8005620:	d0c9      	beq.n	80055b6 <_dtoa_r+0x84e>
 8005622:	9a07      	ldr	r2, [sp, #28]
 8005624:	331c      	adds	r3, #28
 8005626:	441a      	add	r2, r3
 8005628:	4499      	add	r9, r3
 800562a:	441d      	add	r5, r3
 800562c:	4613      	mov	r3, r2
 800562e:	e7c1      	b.n	80055b4 <_dtoa_r+0x84c>
 8005630:	4603      	mov	r3, r0
 8005632:	e7f6      	b.n	8005622 <_dtoa_r+0x8ba>
 8005634:	f1b8 0f00 	cmp.w	r8, #0
 8005638:	dc36      	bgt.n	80056a8 <_dtoa_r+0x940>
 800563a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800563c:	2b02      	cmp	r3, #2
 800563e:	dd33      	ble.n	80056a8 <_dtoa_r+0x940>
 8005640:	f8cd 8010 	str.w	r8, [sp, #16]
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	b963      	cbnz	r3, 8005662 <_dtoa_r+0x8fa>
 8005648:	4631      	mov	r1, r6
 800564a:	2205      	movs	r2, #5
 800564c:	4620      	mov	r0, r4
 800564e:	f000 fde3 	bl	8006218 <__multadd>
 8005652:	4601      	mov	r1, r0
 8005654:	4606      	mov	r6, r0
 8005656:	4658      	mov	r0, fp
 8005658:	f000 ffe6 	bl	8006628 <__mcmp>
 800565c:	2800      	cmp	r0, #0
 800565e:	f73f add3 	bgt.w	8005208 <_dtoa_r+0x4a0>
 8005662:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005664:	9d06      	ldr	r5, [sp, #24]
 8005666:	ea6f 0a03 	mvn.w	sl, r3
 800566a:	f04f 0900 	mov.w	r9, #0
 800566e:	4631      	mov	r1, r6
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fdba 	bl	80061ea <_Bfree>
 8005676:	2f00      	cmp	r7, #0
 8005678:	f43f aebd 	beq.w	80053f6 <_dtoa_r+0x68e>
 800567c:	f1b9 0f00 	cmp.w	r9, #0
 8005680:	d005      	beq.n	800568e <_dtoa_r+0x926>
 8005682:	45b9      	cmp	r9, r7
 8005684:	d003      	beq.n	800568e <_dtoa_r+0x926>
 8005686:	4649      	mov	r1, r9
 8005688:	4620      	mov	r0, r4
 800568a:	f000 fdae 	bl	80061ea <_Bfree>
 800568e:	4639      	mov	r1, r7
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fdaa 	bl	80061ea <_Bfree>
 8005696:	e6ae      	b.n	80053f6 <_dtoa_r+0x68e>
 8005698:	2600      	movs	r6, #0
 800569a:	4637      	mov	r7, r6
 800569c:	e7e1      	b.n	8005662 <_dtoa_r+0x8fa>
 800569e:	46ba      	mov	sl, r7
 80056a0:	4637      	mov	r7, r6
 80056a2:	e5b1      	b.n	8005208 <_dtoa_r+0x4a0>
 80056a4:	40240000 	.word	0x40240000
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80f3 	beq.w	800589a <_dtoa_r+0xb32>
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	dd05      	ble.n	80056c4 <_dtoa_r+0x95c>
 80056b8:	4639      	mov	r1, r7
 80056ba:	462a      	mov	r2, r5
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 ff5f 	bl	8006580 <__lshift>
 80056c2:	4607      	mov	r7, r0
 80056c4:	9b08      	ldr	r3, [sp, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d04c      	beq.n	8005764 <_dtoa_r+0x9fc>
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fd58 	bl	8006182 <_Balloc>
 80056d2:	4605      	mov	r5, r0
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	f107 010c 	add.w	r1, r7, #12
 80056da:	3202      	adds	r2, #2
 80056dc:	0092      	lsls	r2, r2, #2
 80056de:	300c      	adds	r0, #12
 80056e0:	f000 fd44 	bl	800616c <memcpy>
 80056e4:	2201      	movs	r2, #1
 80056e6:	4629      	mov	r1, r5
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 ff49 	bl	8006580 <__lshift>
 80056ee:	46b9      	mov	r9, r7
 80056f0:	4607      	mov	r7, r0
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	9307      	str	r3, [sp, #28]
 80056f6:	9b02      	ldr	r3, [sp, #8]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	9308      	str	r3, [sp, #32]
 80056fe:	4631      	mov	r1, r6
 8005700:	4658      	mov	r0, fp
 8005702:	f7ff faa1 	bl	8004c48 <quorem>
 8005706:	4649      	mov	r1, r9
 8005708:	4605      	mov	r5, r0
 800570a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800570e:	4658      	mov	r0, fp
 8005710:	f000 ff8a 	bl	8006628 <__mcmp>
 8005714:	463a      	mov	r2, r7
 8005716:	9002      	str	r0, [sp, #8]
 8005718:	4631      	mov	r1, r6
 800571a:	4620      	mov	r0, r4
 800571c:	f000 ff9e 	bl	800665c <__mdiff>
 8005720:	68c3      	ldr	r3, [r0, #12]
 8005722:	4602      	mov	r2, r0
 8005724:	bb03      	cbnz	r3, 8005768 <_dtoa_r+0xa00>
 8005726:	4601      	mov	r1, r0
 8005728:	9009      	str	r0, [sp, #36]	; 0x24
 800572a:	4658      	mov	r0, fp
 800572c:	f000 ff7c 	bl	8006628 <__mcmp>
 8005730:	4603      	mov	r3, r0
 8005732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005734:	4611      	mov	r1, r2
 8005736:	4620      	mov	r0, r4
 8005738:	9309      	str	r3, [sp, #36]	; 0x24
 800573a:	f000 fd56 	bl	80061ea <_Bfree>
 800573e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005740:	b9a3      	cbnz	r3, 800576c <_dtoa_r+0xa04>
 8005742:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005744:	b992      	cbnz	r2, 800576c <_dtoa_r+0xa04>
 8005746:	9a08      	ldr	r2, [sp, #32]
 8005748:	b982      	cbnz	r2, 800576c <_dtoa_r+0xa04>
 800574a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800574e:	d029      	beq.n	80057a4 <_dtoa_r+0xa3c>
 8005750:	9b02      	ldr	r3, [sp, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	dd01      	ble.n	800575a <_dtoa_r+0x9f2>
 8005756:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800575a:	9b07      	ldr	r3, [sp, #28]
 800575c:	1c5d      	adds	r5, r3, #1
 800575e:	f883 8000 	strb.w	r8, [r3]
 8005762:	e784      	b.n	800566e <_dtoa_r+0x906>
 8005764:	4638      	mov	r0, r7
 8005766:	e7c2      	b.n	80056ee <_dtoa_r+0x986>
 8005768:	2301      	movs	r3, #1
 800576a:	e7e3      	b.n	8005734 <_dtoa_r+0x9cc>
 800576c:	9a02      	ldr	r2, [sp, #8]
 800576e:	2a00      	cmp	r2, #0
 8005770:	db04      	blt.n	800577c <_dtoa_r+0xa14>
 8005772:	d123      	bne.n	80057bc <_dtoa_r+0xa54>
 8005774:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005776:	bb0a      	cbnz	r2, 80057bc <_dtoa_r+0xa54>
 8005778:	9a08      	ldr	r2, [sp, #32]
 800577a:	b9fa      	cbnz	r2, 80057bc <_dtoa_r+0xa54>
 800577c:	2b00      	cmp	r3, #0
 800577e:	ddec      	ble.n	800575a <_dtoa_r+0x9f2>
 8005780:	4659      	mov	r1, fp
 8005782:	2201      	movs	r2, #1
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fefb 	bl	8006580 <__lshift>
 800578a:	4631      	mov	r1, r6
 800578c:	4683      	mov	fp, r0
 800578e:	f000 ff4b 	bl	8006628 <__mcmp>
 8005792:	2800      	cmp	r0, #0
 8005794:	dc03      	bgt.n	800579e <_dtoa_r+0xa36>
 8005796:	d1e0      	bne.n	800575a <_dtoa_r+0x9f2>
 8005798:	f018 0f01 	tst.w	r8, #1
 800579c:	d0dd      	beq.n	800575a <_dtoa_r+0x9f2>
 800579e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057a2:	d1d8      	bne.n	8005756 <_dtoa_r+0x9ee>
 80057a4:	9b07      	ldr	r3, [sp, #28]
 80057a6:	9a07      	ldr	r2, [sp, #28]
 80057a8:	1c5d      	adds	r5, r3, #1
 80057aa:	2339      	movs	r3, #57	; 0x39
 80057ac:	7013      	strb	r3, [r2, #0]
 80057ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057b2:	1e6a      	subs	r2, r5, #1
 80057b4:	2b39      	cmp	r3, #57	; 0x39
 80057b6:	d04d      	beq.n	8005854 <_dtoa_r+0xaec>
 80057b8:	3301      	adds	r3, #1
 80057ba:	e052      	b.n	8005862 <_dtoa_r+0xafa>
 80057bc:	9a07      	ldr	r2, [sp, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f102 0501 	add.w	r5, r2, #1
 80057c4:	dd06      	ble.n	80057d4 <_dtoa_r+0xa6c>
 80057c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057ca:	d0eb      	beq.n	80057a4 <_dtoa_r+0xa3c>
 80057cc:	f108 0801 	add.w	r8, r8, #1
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	e7c4      	b.n	800575e <_dtoa_r+0x9f6>
 80057d4:	9b06      	ldr	r3, [sp, #24]
 80057d6:	9a04      	ldr	r2, [sp, #16]
 80057d8:	1aeb      	subs	r3, r5, r3
 80057da:	4293      	cmp	r3, r2
 80057dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80057e0:	d021      	beq.n	8005826 <_dtoa_r+0xabe>
 80057e2:	4659      	mov	r1, fp
 80057e4:	2300      	movs	r3, #0
 80057e6:	220a      	movs	r2, #10
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 fd15 	bl	8006218 <__multadd>
 80057ee:	45b9      	cmp	r9, r7
 80057f0:	4683      	mov	fp, r0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f04f 020a 	mov.w	r2, #10
 80057fa:	4649      	mov	r1, r9
 80057fc:	4620      	mov	r0, r4
 80057fe:	d105      	bne.n	800580c <_dtoa_r+0xaa4>
 8005800:	f000 fd0a 	bl	8006218 <__multadd>
 8005804:	4681      	mov	r9, r0
 8005806:	4607      	mov	r7, r0
 8005808:	9507      	str	r5, [sp, #28]
 800580a:	e778      	b.n	80056fe <_dtoa_r+0x996>
 800580c:	f000 fd04 	bl	8006218 <__multadd>
 8005810:	4639      	mov	r1, r7
 8005812:	4681      	mov	r9, r0
 8005814:	2300      	movs	r3, #0
 8005816:	220a      	movs	r2, #10
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fcfd 	bl	8006218 <__multadd>
 800581e:	4607      	mov	r7, r0
 8005820:	e7f2      	b.n	8005808 <_dtoa_r+0xaa0>
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	4659      	mov	r1, fp
 8005828:	2201      	movs	r2, #1
 800582a:	4620      	mov	r0, r4
 800582c:	f000 fea8 	bl	8006580 <__lshift>
 8005830:	4631      	mov	r1, r6
 8005832:	4683      	mov	fp, r0
 8005834:	f000 fef8 	bl	8006628 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	dcb8      	bgt.n	80057ae <_dtoa_r+0xa46>
 800583c:	d102      	bne.n	8005844 <_dtoa_r+0xadc>
 800583e:	f018 0f01 	tst.w	r8, #1
 8005842:	d1b4      	bne.n	80057ae <_dtoa_r+0xa46>
 8005844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005848:	1e6a      	subs	r2, r5, #1
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	f47f af0f 	bne.w	800566e <_dtoa_r+0x906>
 8005850:	4615      	mov	r5, r2
 8005852:	e7f7      	b.n	8005844 <_dtoa_r+0xadc>
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	4293      	cmp	r3, r2
 8005858:	d105      	bne.n	8005866 <_dtoa_r+0xafe>
 800585a:	2331      	movs	r3, #49	; 0x31
 800585c:	9a06      	ldr	r2, [sp, #24]
 800585e:	f10a 0a01 	add.w	sl, sl, #1
 8005862:	7013      	strb	r3, [r2, #0]
 8005864:	e703      	b.n	800566e <_dtoa_r+0x906>
 8005866:	4615      	mov	r5, r2
 8005868:	e7a1      	b.n	80057ae <_dtoa_r+0xa46>
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <_dtoa_r+0xb60>)
 800586c:	f7ff bae1 	b.w	8004e32 <_dtoa_r+0xca>
 8005870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f aabb 	bne.w	8004dee <_dtoa_r+0x86>
 8005878:	4b14      	ldr	r3, [pc, #80]	; (80058cc <_dtoa_r+0xb64>)
 800587a:	f7ff bada 	b.w	8004e32 <_dtoa_r+0xca>
 800587e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005880:	2b01      	cmp	r3, #1
 8005882:	f77f ae3f 	ble.w	8005504 <_dtoa_r+0x79c>
 8005886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	e653      	b.n	8005534 <_dtoa_r+0x7cc>
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dc03      	bgt.n	800589a <_dtoa_r+0xb32>
 8005892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005894:	2b02      	cmp	r3, #2
 8005896:	f73f aed5 	bgt.w	8005644 <_dtoa_r+0x8dc>
 800589a:	9d06      	ldr	r5, [sp, #24]
 800589c:	4631      	mov	r1, r6
 800589e:	4658      	mov	r0, fp
 80058a0:	f7ff f9d2 	bl	8004c48 <quorem>
 80058a4:	9b06      	ldr	r3, [sp, #24]
 80058a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058aa:	f805 8b01 	strb.w	r8, [r5], #1
 80058ae:	9a04      	ldr	r2, [sp, #16]
 80058b0:	1aeb      	subs	r3, r5, r3
 80058b2:	429a      	cmp	r2, r3
 80058b4:	ddb5      	ble.n	8005822 <_dtoa_r+0xaba>
 80058b6:	4659      	mov	r1, fp
 80058b8:	2300      	movs	r3, #0
 80058ba:	220a      	movs	r2, #10
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fcab 	bl	8006218 <__multadd>
 80058c2:	4683      	mov	fp, r0
 80058c4:	e7ea      	b.n	800589c <_dtoa_r+0xb34>
 80058c6:	bf00      	nop
 80058c8:	08008133 	.word	0x08008133
 80058cc:	08007f90 	.word	0x08007f90

080058d0 <std>:
 80058d0:	2300      	movs	r3, #0
 80058d2:	b510      	push	{r4, lr}
 80058d4:	4604      	mov	r4, r0
 80058d6:	e9c0 3300 	strd	r3, r3, [r0]
 80058da:	6083      	str	r3, [r0, #8]
 80058dc:	8181      	strh	r1, [r0, #12]
 80058de:	6643      	str	r3, [r0, #100]	; 0x64
 80058e0:	81c2      	strh	r2, [r0, #14]
 80058e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058e6:	6183      	str	r3, [r0, #24]
 80058e8:	4619      	mov	r1, r3
 80058ea:	2208      	movs	r2, #8
 80058ec:	305c      	adds	r0, #92	; 0x5c
 80058ee:	f7fd fbcd 	bl	800308c <memset>
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <std+0x38>)
 80058f4:	6224      	str	r4, [r4, #32]
 80058f6:	6263      	str	r3, [r4, #36]	; 0x24
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <std+0x3c>)
 80058fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <std+0x40>)
 80058fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005900:	4b04      	ldr	r3, [pc, #16]	; (8005914 <std+0x44>)
 8005902:	6323      	str	r3, [r4, #48]	; 0x30
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	08003dc9 	.word	0x08003dc9
 800590c:	08003def 	.word	0x08003def
 8005910:	08003e27 	.word	0x08003e27
 8005914:	08003e4b 	.word	0x08003e4b

08005918 <_cleanup_r>:
 8005918:	4901      	ldr	r1, [pc, #4]	; (8005920 <_cleanup_r+0x8>)
 800591a:	f000 b885 	b.w	8005a28 <_fwalk_reent>
 800591e:	bf00      	nop
 8005920:	08007afd 	.word	0x08007afd

08005924 <__sfmoreglue>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	2568      	movs	r5, #104	; 0x68
 8005928:	1e4a      	subs	r2, r1, #1
 800592a:	4355      	muls	r5, r2
 800592c:	460e      	mov	r6, r1
 800592e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005932:	f001 f879 	bl	8006a28 <_malloc_r>
 8005936:	4604      	mov	r4, r0
 8005938:	b140      	cbz	r0, 800594c <__sfmoreglue+0x28>
 800593a:	2100      	movs	r1, #0
 800593c:	e9c0 1600 	strd	r1, r6, [r0]
 8005940:	300c      	adds	r0, #12
 8005942:	60a0      	str	r0, [r4, #8]
 8005944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005948:	f7fd fba0 	bl	800308c <memset>
 800594c:	4620      	mov	r0, r4
 800594e:	bd70      	pop	{r4, r5, r6, pc}

08005950 <__sinit>:
 8005950:	6983      	ldr	r3, [r0, #24]
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	bb33      	cbnz	r3, 80059a6 <__sinit+0x56>
 8005958:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800595c:	6503      	str	r3, [r0, #80]	; 0x50
 800595e:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <__sinit+0x58>)
 8005960:	4a12      	ldr	r2, [pc, #72]	; (80059ac <__sinit+0x5c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6282      	str	r2, [r0, #40]	; 0x28
 8005966:	4298      	cmp	r0, r3
 8005968:	bf04      	itt	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	6183      	streq	r3, [r0, #24]
 800596e:	f000 f81f 	bl	80059b0 <__sfp>
 8005972:	6060      	str	r0, [r4, #4]
 8005974:	4620      	mov	r0, r4
 8005976:	f000 f81b 	bl	80059b0 <__sfp>
 800597a:	60a0      	str	r0, [r4, #8]
 800597c:	4620      	mov	r0, r4
 800597e:	f000 f817 	bl	80059b0 <__sfp>
 8005982:	2200      	movs	r2, #0
 8005984:	60e0      	str	r0, [r4, #12]
 8005986:	2104      	movs	r1, #4
 8005988:	6860      	ldr	r0, [r4, #4]
 800598a:	f7ff ffa1 	bl	80058d0 <std>
 800598e:	2201      	movs	r2, #1
 8005990:	2109      	movs	r1, #9
 8005992:	68a0      	ldr	r0, [r4, #8]
 8005994:	f7ff ff9c 	bl	80058d0 <std>
 8005998:	2202      	movs	r2, #2
 800599a:	2112      	movs	r1, #18
 800599c:	68e0      	ldr	r0, [r4, #12]
 800599e:	f7ff ff97 	bl	80058d0 <std>
 80059a2:	2301      	movs	r3, #1
 80059a4:	61a3      	str	r3, [r4, #24]
 80059a6:	bd10      	pop	{r4, pc}
 80059a8:	08007f00 	.word	0x08007f00
 80059ac:	08005919 	.word	0x08005919

080059b0 <__sfp>:
 80059b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <__sfp+0x70>)
 80059b4:	4607      	mov	r7, r0
 80059b6:	681e      	ldr	r6, [r3, #0]
 80059b8:	69b3      	ldr	r3, [r6, #24]
 80059ba:	b913      	cbnz	r3, 80059c2 <__sfp+0x12>
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff ffc7 	bl	8005950 <__sinit>
 80059c2:	3648      	adds	r6, #72	; 0x48
 80059c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	d503      	bpl.n	80059d4 <__sfp+0x24>
 80059cc:	6833      	ldr	r3, [r6, #0]
 80059ce:	b133      	cbz	r3, 80059de <__sfp+0x2e>
 80059d0:	6836      	ldr	r6, [r6, #0]
 80059d2:	e7f7      	b.n	80059c4 <__sfp+0x14>
 80059d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059d8:	b16d      	cbz	r5, 80059f6 <__sfp+0x46>
 80059da:	3468      	adds	r4, #104	; 0x68
 80059dc:	e7f4      	b.n	80059c8 <__sfp+0x18>
 80059de:	2104      	movs	r1, #4
 80059e0:	4638      	mov	r0, r7
 80059e2:	f7ff ff9f 	bl	8005924 <__sfmoreglue>
 80059e6:	6030      	str	r0, [r6, #0]
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d1f1      	bne.n	80059d0 <__sfp+0x20>
 80059ec:	230c      	movs	r3, #12
 80059ee:	4604      	mov	r4, r0
 80059f0:	603b      	str	r3, [r7, #0]
 80059f2:	4620      	mov	r0, r4
 80059f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059f6:	4b0b      	ldr	r3, [pc, #44]	; (8005a24 <__sfp+0x74>)
 80059f8:	6665      	str	r5, [r4, #100]	; 0x64
 80059fa:	e9c4 5500 	strd	r5, r5, [r4]
 80059fe:	60a5      	str	r5, [r4, #8]
 8005a00:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005a04:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005a08:	2208      	movs	r2, #8
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a10:	f7fd fb3c 	bl	800308c <memset>
 8005a14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a1c:	e7e9      	b.n	80059f2 <__sfp+0x42>
 8005a1e:	bf00      	nop
 8005a20:	08007f00 	.word	0x08007f00
 8005a24:	ffff0001 	.word	0xffff0001

08005a28 <_fwalk_reent>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	4680      	mov	r8, r0
 8005a2e:	4689      	mov	r9, r1
 8005a30:	2600      	movs	r6, #0
 8005a32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a36:	b914      	cbnz	r4, 8005a3e <_fwalk_reent+0x16>
 8005a38:	4630      	mov	r0, r6
 8005a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a3e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005a42:	3f01      	subs	r7, #1
 8005a44:	d501      	bpl.n	8005a4a <_fwalk_reent+0x22>
 8005a46:	6824      	ldr	r4, [r4, #0]
 8005a48:	e7f5      	b.n	8005a36 <_fwalk_reent+0xe>
 8005a4a:	89ab      	ldrh	r3, [r5, #12]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d907      	bls.n	8005a60 <_fwalk_reent+0x38>
 8005a50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a54:	3301      	adds	r3, #1
 8005a56:	d003      	beq.n	8005a60 <_fwalk_reent+0x38>
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	47c8      	blx	r9
 8005a5e:	4306      	orrs	r6, r0
 8005a60:	3568      	adds	r5, #104	; 0x68
 8005a62:	e7ee      	b.n	8005a42 <_fwalk_reent+0x1a>

08005a64 <rshift>:
 8005a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a66:	6906      	ldr	r6, [r0, #16]
 8005a68:	114b      	asrs	r3, r1, #5
 8005a6a:	429e      	cmp	r6, r3
 8005a6c:	f100 0414 	add.w	r4, r0, #20
 8005a70:	dd31      	ble.n	8005ad6 <rshift+0x72>
 8005a72:	f011 011f 	ands.w	r1, r1, #31
 8005a76:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005a7a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005a7e:	d108      	bne.n	8005a92 <rshift+0x2e>
 8005a80:	4621      	mov	r1, r4
 8005a82:	42b2      	cmp	r2, r6
 8005a84:	460b      	mov	r3, r1
 8005a86:	d211      	bcs.n	8005aac <rshift+0x48>
 8005a88:	f852 3b04 	ldr.w	r3, [r2], #4
 8005a8c:	f841 3b04 	str.w	r3, [r1], #4
 8005a90:	e7f7      	b.n	8005a82 <rshift+0x1e>
 8005a92:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005a96:	4623      	mov	r3, r4
 8005a98:	f1c1 0c20 	rsb	ip, r1, #32
 8005a9c:	40cd      	lsrs	r5, r1
 8005a9e:	3204      	adds	r2, #4
 8005aa0:	42b2      	cmp	r2, r6
 8005aa2:	4617      	mov	r7, r2
 8005aa4:	d30d      	bcc.n	8005ac2 <rshift+0x5e>
 8005aa6:	601d      	str	r5, [r3, #0]
 8005aa8:	b105      	cbz	r5, 8005aac <rshift+0x48>
 8005aaa:	3304      	adds	r3, #4
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	eba3 0204 	sub.w	r2, r3, r4
 8005ab2:	bf08      	it	eq
 8005ab4:	2300      	moveq	r3, #0
 8005ab6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005aba:	6102      	str	r2, [r0, #16]
 8005abc:	bf08      	it	eq
 8005abe:	6143      	streq	r3, [r0, #20]
 8005ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ac2:	683f      	ldr	r7, [r7, #0]
 8005ac4:	fa07 f70c 	lsl.w	r7, r7, ip
 8005ac8:	433d      	orrs	r5, r7
 8005aca:	f843 5b04 	str.w	r5, [r3], #4
 8005ace:	f852 5b04 	ldr.w	r5, [r2], #4
 8005ad2:	40cd      	lsrs	r5, r1
 8005ad4:	e7e4      	b.n	8005aa0 <rshift+0x3c>
 8005ad6:	4623      	mov	r3, r4
 8005ad8:	e7e8      	b.n	8005aac <rshift+0x48>

08005ada <__hexdig_fun>:
 8005ada:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005ade:	2b09      	cmp	r3, #9
 8005ae0:	d802      	bhi.n	8005ae8 <__hexdig_fun+0xe>
 8005ae2:	3820      	subs	r0, #32
 8005ae4:	b2c0      	uxtb	r0, r0
 8005ae6:	4770      	bx	lr
 8005ae8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005aec:	2b05      	cmp	r3, #5
 8005aee:	d801      	bhi.n	8005af4 <__hexdig_fun+0x1a>
 8005af0:	3847      	subs	r0, #71	; 0x47
 8005af2:	e7f7      	b.n	8005ae4 <__hexdig_fun+0xa>
 8005af4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005af8:	2b05      	cmp	r3, #5
 8005afa:	d801      	bhi.n	8005b00 <__hexdig_fun+0x26>
 8005afc:	3827      	subs	r0, #39	; 0x27
 8005afe:	e7f1      	b.n	8005ae4 <__hexdig_fun+0xa>
 8005b00:	2000      	movs	r0, #0
 8005b02:	4770      	bx	lr

08005b04 <__gethex>:
 8005b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b08:	b08b      	sub	sp, #44	; 0x2c
 8005b0a:	9002      	str	r0, [sp, #8]
 8005b0c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005b0e:	468a      	mov	sl, r1
 8005b10:	4690      	mov	r8, r2
 8005b12:	9306      	str	r3, [sp, #24]
 8005b14:	f000 fae0 	bl	80060d8 <__localeconv_l>
 8005b18:	6803      	ldr	r3, [r0, #0]
 8005b1a:	f04f 0b00 	mov.w	fp, #0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	f7fa fb15 	bl	8000150 <strlen>
 8005b26:	9b03      	ldr	r3, [sp, #12]
 8005b28:	9001      	str	r0, [sp, #4]
 8005b2a:	4403      	add	r3, r0
 8005b2c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005b30:	9307      	str	r3, [sp, #28]
 8005b32:	f8da 3000 	ldr.w	r3, [sl]
 8005b36:	3302      	adds	r3, #2
 8005b38:	461f      	mov	r7, r3
 8005b3a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005b3e:	2830      	cmp	r0, #48	; 0x30
 8005b40:	d06c      	beq.n	8005c1c <__gethex+0x118>
 8005b42:	f7ff ffca 	bl	8005ada <__hexdig_fun>
 8005b46:	4604      	mov	r4, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d16a      	bne.n	8005c22 <__gethex+0x11e>
 8005b4c:	9a01      	ldr	r2, [sp, #4]
 8005b4e:	9903      	ldr	r1, [sp, #12]
 8005b50:	4638      	mov	r0, r7
 8005b52:	f001 fda8 	bl	80076a6 <strncmp>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d166      	bne.n	8005c28 <__gethex+0x124>
 8005b5a:	9b01      	ldr	r3, [sp, #4]
 8005b5c:	5cf8      	ldrb	r0, [r7, r3]
 8005b5e:	18fe      	adds	r6, r7, r3
 8005b60:	f7ff ffbb 	bl	8005ada <__hexdig_fun>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d062      	beq.n	8005c2e <__gethex+0x12a>
 8005b68:	4633      	mov	r3, r6
 8005b6a:	7818      	ldrb	r0, [r3, #0]
 8005b6c:	461f      	mov	r7, r3
 8005b6e:	2830      	cmp	r0, #48	; 0x30
 8005b70:	f103 0301 	add.w	r3, r3, #1
 8005b74:	d0f9      	beq.n	8005b6a <__gethex+0x66>
 8005b76:	f7ff ffb0 	bl	8005ada <__hexdig_fun>
 8005b7a:	fab0 f580 	clz	r5, r0
 8005b7e:	4634      	mov	r4, r6
 8005b80:	f04f 0b01 	mov.w	fp, #1
 8005b84:	096d      	lsrs	r5, r5, #5
 8005b86:	463a      	mov	r2, r7
 8005b88:	4616      	mov	r6, r2
 8005b8a:	7830      	ldrb	r0, [r6, #0]
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	f7ff ffa4 	bl	8005ada <__hexdig_fun>
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d1f8      	bne.n	8005b88 <__gethex+0x84>
 8005b96:	9a01      	ldr	r2, [sp, #4]
 8005b98:	9903      	ldr	r1, [sp, #12]
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	f001 fd83 	bl	80076a6 <strncmp>
 8005ba0:	b950      	cbnz	r0, 8005bb8 <__gethex+0xb4>
 8005ba2:	b954      	cbnz	r4, 8005bba <__gethex+0xb6>
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	18f4      	adds	r4, r6, r3
 8005ba8:	4622      	mov	r2, r4
 8005baa:	4616      	mov	r6, r2
 8005bac:	7830      	ldrb	r0, [r6, #0]
 8005bae:	3201      	adds	r2, #1
 8005bb0:	f7ff ff93 	bl	8005ada <__hexdig_fun>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d1f8      	bne.n	8005baa <__gethex+0xa6>
 8005bb8:	b10c      	cbz	r4, 8005bbe <__gethex+0xba>
 8005bba:	1ba4      	subs	r4, r4, r6
 8005bbc:	00a4      	lsls	r4, r4, #2
 8005bbe:	7833      	ldrb	r3, [r6, #0]
 8005bc0:	2b50      	cmp	r3, #80	; 0x50
 8005bc2:	d001      	beq.n	8005bc8 <__gethex+0xc4>
 8005bc4:	2b70      	cmp	r3, #112	; 0x70
 8005bc6:	d140      	bne.n	8005c4a <__gethex+0x146>
 8005bc8:	7873      	ldrb	r3, [r6, #1]
 8005bca:	2b2b      	cmp	r3, #43	; 0x2b
 8005bcc:	d031      	beq.n	8005c32 <__gethex+0x12e>
 8005bce:	2b2d      	cmp	r3, #45	; 0x2d
 8005bd0:	d033      	beq.n	8005c3a <__gethex+0x136>
 8005bd2:	f04f 0900 	mov.w	r9, #0
 8005bd6:	1c71      	adds	r1, r6, #1
 8005bd8:	7808      	ldrb	r0, [r1, #0]
 8005bda:	f7ff ff7e 	bl	8005ada <__hexdig_fun>
 8005bde:	1e43      	subs	r3, r0, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b18      	cmp	r3, #24
 8005be4:	d831      	bhi.n	8005c4a <__gethex+0x146>
 8005be6:	f1a0 0210 	sub.w	r2, r0, #16
 8005bea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005bee:	f7ff ff74 	bl	8005ada <__hexdig_fun>
 8005bf2:	1e43      	subs	r3, r0, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b18      	cmp	r3, #24
 8005bf8:	d922      	bls.n	8005c40 <__gethex+0x13c>
 8005bfa:	f1b9 0f00 	cmp.w	r9, #0
 8005bfe:	d000      	beq.n	8005c02 <__gethex+0xfe>
 8005c00:	4252      	negs	r2, r2
 8005c02:	4414      	add	r4, r2
 8005c04:	f8ca 1000 	str.w	r1, [sl]
 8005c08:	b30d      	cbz	r5, 8005c4e <__gethex+0x14a>
 8005c0a:	f1bb 0f00 	cmp.w	fp, #0
 8005c0e:	bf0c      	ite	eq
 8005c10:	2706      	moveq	r7, #6
 8005c12:	2700      	movne	r7, #0
 8005c14:	4638      	mov	r0, r7
 8005c16:	b00b      	add	sp, #44	; 0x2c
 8005c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1c:	f10b 0b01 	add.w	fp, fp, #1
 8005c20:	e78a      	b.n	8005b38 <__gethex+0x34>
 8005c22:	2500      	movs	r5, #0
 8005c24:	462c      	mov	r4, r5
 8005c26:	e7ae      	b.n	8005b86 <__gethex+0x82>
 8005c28:	463e      	mov	r6, r7
 8005c2a:	2501      	movs	r5, #1
 8005c2c:	e7c7      	b.n	8005bbe <__gethex+0xba>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	e7fb      	b.n	8005c2a <__gethex+0x126>
 8005c32:	f04f 0900 	mov.w	r9, #0
 8005c36:	1cb1      	adds	r1, r6, #2
 8005c38:	e7ce      	b.n	8005bd8 <__gethex+0xd4>
 8005c3a:	f04f 0901 	mov.w	r9, #1
 8005c3e:	e7fa      	b.n	8005c36 <__gethex+0x132>
 8005c40:	230a      	movs	r3, #10
 8005c42:	fb03 0202 	mla	r2, r3, r2, r0
 8005c46:	3a10      	subs	r2, #16
 8005c48:	e7cf      	b.n	8005bea <__gethex+0xe6>
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	e7da      	b.n	8005c04 <__gethex+0x100>
 8005c4e:	4629      	mov	r1, r5
 8005c50:	1bf3      	subs	r3, r6, r7
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b07      	cmp	r3, #7
 8005c56:	dc49      	bgt.n	8005cec <__gethex+0x1e8>
 8005c58:	9802      	ldr	r0, [sp, #8]
 8005c5a:	f000 fa92 	bl	8006182 <_Balloc>
 8005c5e:	f04f 0b00 	mov.w	fp, #0
 8005c62:	4605      	mov	r5, r0
 8005c64:	46da      	mov	sl, fp
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	f100 0914 	add.w	r9, r0, #20
 8005c6c:	f1c3 0301 	rsb	r3, r3, #1
 8005c70:	f8cd 9010 	str.w	r9, [sp, #16]
 8005c74:	9308      	str	r3, [sp, #32]
 8005c76:	42b7      	cmp	r7, r6
 8005c78:	d33b      	bcc.n	8005cf2 <__gethex+0x1ee>
 8005c7a:	9804      	ldr	r0, [sp, #16]
 8005c7c:	f840 ab04 	str.w	sl, [r0], #4
 8005c80:	eba0 0009 	sub.w	r0, r0, r9
 8005c84:	1080      	asrs	r0, r0, #2
 8005c86:	6128      	str	r0, [r5, #16]
 8005c88:	0147      	lsls	r7, r0, #5
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	f000 fb3d 	bl	800630a <__hi0bits>
 8005c90:	f8d8 6000 	ldr.w	r6, [r8]
 8005c94:	1a3f      	subs	r7, r7, r0
 8005c96:	42b7      	cmp	r7, r6
 8005c98:	dd64      	ble.n	8005d64 <__gethex+0x260>
 8005c9a:	1bbf      	subs	r7, r7, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 fe47 	bl	8006932 <__any_on>
 8005ca4:	4682      	mov	sl, r0
 8005ca6:	b178      	cbz	r0, 8005cc8 <__gethex+0x1c4>
 8005ca8:	f04f 0a01 	mov.w	sl, #1
 8005cac:	1e7b      	subs	r3, r7, #1
 8005cae:	1159      	asrs	r1, r3, #5
 8005cb0:	f003 021f 	and.w	r2, r3, #31
 8005cb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005cb8:	fa0a f202 	lsl.w	r2, sl, r2
 8005cbc:	420a      	tst	r2, r1
 8005cbe:	d003      	beq.n	8005cc8 <__gethex+0x1c4>
 8005cc0:	4553      	cmp	r3, sl
 8005cc2:	dc46      	bgt.n	8005d52 <__gethex+0x24e>
 8005cc4:	f04f 0a02 	mov.w	sl, #2
 8005cc8:	4639      	mov	r1, r7
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f7ff feca 	bl	8005a64 <rshift>
 8005cd0:	443c      	add	r4, r7
 8005cd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	da52      	bge.n	8005d80 <__gethex+0x27c>
 8005cda:	4629      	mov	r1, r5
 8005cdc:	9802      	ldr	r0, [sp, #8]
 8005cde:	f000 fa84 	bl	80061ea <_Bfree>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ce6:	27a3      	movs	r7, #163	; 0xa3
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	e793      	b.n	8005c14 <__gethex+0x110>
 8005cec:	3101      	adds	r1, #1
 8005cee:	105b      	asrs	r3, r3, #1
 8005cf0:	e7b0      	b.n	8005c54 <__gethex+0x150>
 8005cf2:	1e73      	subs	r3, r6, #1
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	9a07      	ldr	r2, [sp, #28]
 8005cf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <__gethex+0x22e>
 8005d00:	f1bb 0f20 	cmp.w	fp, #32
 8005d04:	d107      	bne.n	8005d16 <__gethex+0x212>
 8005d06:	9b04      	ldr	r3, [sp, #16]
 8005d08:	f8c3 a000 	str.w	sl, [r3]
 8005d0c:	f04f 0a00 	mov.w	sl, #0
 8005d10:	46d3      	mov	fp, sl
 8005d12:	3304      	adds	r3, #4
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005d1a:	f7ff fede 	bl	8005ada <__hexdig_fun>
 8005d1e:	f000 000f 	and.w	r0, r0, #15
 8005d22:	fa00 f00b 	lsl.w	r0, r0, fp
 8005d26:	ea4a 0a00 	orr.w	sl, sl, r0
 8005d2a:	f10b 0b04 	add.w	fp, fp, #4
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	e00d      	b.n	8005d4e <__gethex+0x24a>
 8005d32:	9b05      	ldr	r3, [sp, #20]
 8005d34:	9a08      	ldr	r2, [sp, #32]
 8005d36:	4413      	add	r3, r2
 8005d38:	42bb      	cmp	r3, r7
 8005d3a:	d3e1      	bcc.n	8005d00 <__gethex+0x1fc>
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	9a01      	ldr	r2, [sp, #4]
 8005d40:	9903      	ldr	r1, [sp, #12]
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	f001 fcaf 	bl	80076a6 <strncmp>
 8005d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d1d8      	bne.n	8005d00 <__gethex+0x1fc>
 8005d4e:	461e      	mov	r6, r3
 8005d50:	e791      	b.n	8005c76 <__gethex+0x172>
 8005d52:	1eb9      	subs	r1, r7, #2
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 fdec 	bl	8006932 <__any_on>
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d0b2      	beq.n	8005cc4 <__gethex+0x1c0>
 8005d5e:	f04f 0a03 	mov.w	sl, #3
 8005d62:	e7b1      	b.n	8005cc8 <__gethex+0x1c4>
 8005d64:	da09      	bge.n	8005d7a <__gethex+0x276>
 8005d66:	1bf7      	subs	r7, r6, r7
 8005d68:	4629      	mov	r1, r5
 8005d6a:	463a      	mov	r2, r7
 8005d6c:	9802      	ldr	r0, [sp, #8]
 8005d6e:	f000 fc07 	bl	8006580 <__lshift>
 8005d72:	4605      	mov	r5, r0
 8005d74:	1be4      	subs	r4, r4, r7
 8005d76:	f100 0914 	add.w	r9, r0, #20
 8005d7a:	f04f 0a00 	mov.w	sl, #0
 8005d7e:	e7a8      	b.n	8005cd2 <__gethex+0x1ce>
 8005d80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005d84:	42a0      	cmp	r0, r4
 8005d86:	dd6b      	ble.n	8005e60 <__gethex+0x35c>
 8005d88:	1b04      	subs	r4, r0, r4
 8005d8a:	42a6      	cmp	r6, r4
 8005d8c:	dc2e      	bgt.n	8005dec <__gethex+0x2e8>
 8005d8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d022      	beq.n	8005ddc <__gethex+0x2d8>
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d024      	beq.n	8005de4 <__gethex+0x2e0>
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d115      	bne.n	8005dca <__gethex+0x2c6>
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d113      	bne.n	8005dca <__gethex+0x2c6>
 8005da2:	2e01      	cmp	r6, #1
 8005da4:	dc0b      	bgt.n	8005dbe <__gethex+0x2ba>
 8005da6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005daa:	9a06      	ldr	r2, [sp, #24]
 8005dac:	2762      	movs	r7, #98	; 0x62
 8005dae:	6013      	str	r3, [r2, #0]
 8005db0:	2301      	movs	r3, #1
 8005db2:	612b      	str	r3, [r5, #16]
 8005db4:	f8c9 3000 	str.w	r3, [r9]
 8005db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005dba:	601d      	str	r5, [r3, #0]
 8005dbc:	e72a      	b.n	8005c14 <__gethex+0x110>
 8005dbe:	1e71      	subs	r1, r6, #1
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 fdb6 	bl	8006932 <__any_on>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	d1ed      	bne.n	8005da6 <__gethex+0x2a2>
 8005dca:	4629      	mov	r1, r5
 8005dcc:	9802      	ldr	r0, [sp, #8]
 8005dce:	f000 fa0c 	bl	80061ea <_Bfree>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005dd6:	2750      	movs	r7, #80	; 0x50
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e71b      	b.n	8005c14 <__gethex+0x110>
 8005ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0e1      	beq.n	8005da6 <__gethex+0x2a2>
 8005de2:	e7f2      	b.n	8005dca <__gethex+0x2c6>
 8005de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1dd      	bne.n	8005da6 <__gethex+0x2a2>
 8005dea:	e7ee      	b.n	8005dca <__gethex+0x2c6>
 8005dec:	1e67      	subs	r7, r4, #1
 8005dee:	f1ba 0f00 	cmp.w	sl, #0
 8005df2:	d132      	bne.n	8005e5a <__gethex+0x356>
 8005df4:	b127      	cbz	r7, 8005e00 <__gethex+0x2fc>
 8005df6:	4639      	mov	r1, r7
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 fd9a 	bl	8006932 <__any_on>
 8005dfe:	4682      	mov	sl, r0
 8005e00:	2301      	movs	r3, #1
 8005e02:	117a      	asrs	r2, r7, #5
 8005e04:	f007 071f 	and.w	r7, r7, #31
 8005e08:	fa03 f707 	lsl.w	r7, r3, r7
 8005e0c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005e10:	4621      	mov	r1, r4
 8005e12:	421f      	tst	r7, r3
 8005e14:	f04f 0702 	mov.w	r7, #2
 8005e18:	4628      	mov	r0, r5
 8005e1a:	bf18      	it	ne
 8005e1c:	f04a 0a02 	orrne.w	sl, sl, #2
 8005e20:	1b36      	subs	r6, r6, r4
 8005e22:	f7ff fe1f 	bl	8005a64 <rshift>
 8005e26:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005e2a:	f1ba 0f00 	cmp.w	sl, #0
 8005e2e:	d048      	beq.n	8005ec2 <__gethex+0x3be>
 8005e30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d015      	beq.n	8005e64 <__gethex+0x360>
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	d017      	beq.n	8005e6c <__gethex+0x368>
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d109      	bne.n	8005e54 <__gethex+0x350>
 8005e40:	f01a 0f02 	tst.w	sl, #2
 8005e44:	d006      	beq.n	8005e54 <__gethex+0x350>
 8005e46:	f8d9 3000 	ldr.w	r3, [r9]
 8005e4a:	ea4a 0a03 	orr.w	sl, sl, r3
 8005e4e:	f01a 0f01 	tst.w	sl, #1
 8005e52:	d10e      	bne.n	8005e72 <__gethex+0x36e>
 8005e54:	f047 0710 	orr.w	r7, r7, #16
 8005e58:	e033      	b.n	8005ec2 <__gethex+0x3be>
 8005e5a:	f04f 0a01 	mov.w	sl, #1
 8005e5e:	e7cf      	b.n	8005e00 <__gethex+0x2fc>
 8005e60:	2701      	movs	r7, #1
 8005e62:	e7e2      	b.n	8005e2a <__gethex+0x326>
 8005e64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e66:	f1c3 0301 	rsb	r3, r3, #1
 8005e6a:	9315      	str	r3, [sp, #84]	; 0x54
 8005e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <__gethex+0x350>
 8005e72:	f04f 0c00 	mov.w	ip, #0
 8005e76:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005e7a:	f105 0314 	add.w	r3, r5, #20
 8005e7e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005e82:	eb03 010a 	add.w	r1, r3, sl
 8005e86:	4618      	mov	r0, r3
 8005e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005e90:	d01c      	beq.n	8005ecc <__gethex+0x3c8>
 8005e92:	3201      	adds	r2, #1
 8005e94:	6002      	str	r2, [r0, #0]
 8005e96:	2f02      	cmp	r7, #2
 8005e98:	f105 0314 	add.w	r3, r5, #20
 8005e9c:	d138      	bne.n	8005f10 <__gethex+0x40c>
 8005e9e:	f8d8 2000 	ldr.w	r2, [r8]
 8005ea2:	3a01      	subs	r2, #1
 8005ea4:	42b2      	cmp	r2, r6
 8005ea6:	d10a      	bne.n	8005ebe <__gethex+0x3ba>
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	1171      	asrs	r1, r6, #5
 8005eac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005eb0:	f006 061f 	and.w	r6, r6, #31
 8005eb4:	fa02 f606 	lsl.w	r6, r2, r6
 8005eb8:	421e      	tst	r6, r3
 8005eba:	bf18      	it	ne
 8005ebc:	4617      	movne	r7, r2
 8005ebe:	f047 0720 	orr.w	r7, r7, #32
 8005ec2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ec4:	601d      	str	r5, [r3, #0]
 8005ec6:	9b06      	ldr	r3, [sp, #24]
 8005ec8:	601c      	str	r4, [r3, #0]
 8005eca:	e6a3      	b.n	8005c14 <__gethex+0x110>
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	f843 cc04 	str.w	ip, [r3, #-4]
 8005ed2:	d8d8      	bhi.n	8005e86 <__gethex+0x382>
 8005ed4:	68ab      	ldr	r3, [r5, #8]
 8005ed6:	4599      	cmp	r9, r3
 8005ed8:	db12      	blt.n	8005f00 <__gethex+0x3fc>
 8005eda:	6869      	ldr	r1, [r5, #4]
 8005edc:	9802      	ldr	r0, [sp, #8]
 8005ede:	3101      	adds	r1, #1
 8005ee0:	f000 f94f 	bl	8006182 <_Balloc>
 8005ee4:	4683      	mov	fp, r0
 8005ee6:	692a      	ldr	r2, [r5, #16]
 8005ee8:	f105 010c 	add.w	r1, r5, #12
 8005eec:	3202      	adds	r2, #2
 8005eee:	0092      	lsls	r2, r2, #2
 8005ef0:	300c      	adds	r0, #12
 8005ef2:	f000 f93b 	bl	800616c <memcpy>
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	9802      	ldr	r0, [sp, #8]
 8005efa:	f000 f976 	bl	80061ea <_Bfree>
 8005efe:	465d      	mov	r5, fp
 8005f00:	692b      	ldr	r3, [r5, #16]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	612a      	str	r2, [r5, #16]
 8005f06:	2201      	movs	r2, #1
 8005f08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005f0c:	615a      	str	r2, [r3, #20]
 8005f0e:	e7c2      	b.n	8005e96 <__gethex+0x392>
 8005f10:	692a      	ldr	r2, [r5, #16]
 8005f12:	454a      	cmp	r2, r9
 8005f14:	dd0b      	ble.n	8005f2e <__gethex+0x42a>
 8005f16:	2101      	movs	r1, #1
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7ff fda3 	bl	8005a64 <rshift>
 8005f1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f22:	3401      	adds	r4, #1
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	f6ff aed8 	blt.w	8005cda <__gethex+0x1d6>
 8005f2a:	2701      	movs	r7, #1
 8005f2c:	e7c7      	b.n	8005ebe <__gethex+0x3ba>
 8005f2e:	f016 061f 	ands.w	r6, r6, #31
 8005f32:	d0fa      	beq.n	8005f2a <__gethex+0x426>
 8005f34:	449a      	add	sl, r3
 8005f36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005f3a:	f000 f9e6 	bl	800630a <__hi0bits>
 8005f3e:	f1c6 0620 	rsb	r6, r6, #32
 8005f42:	42b0      	cmp	r0, r6
 8005f44:	dbe7      	blt.n	8005f16 <__gethex+0x412>
 8005f46:	e7f0      	b.n	8005f2a <__gethex+0x426>

08005f48 <L_shift>:
 8005f48:	f1c2 0208 	rsb	r2, r2, #8
 8005f4c:	0092      	lsls	r2, r2, #2
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	f1c2 0620 	rsb	r6, r2, #32
 8005f54:	6843      	ldr	r3, [r0, #4]
 8005f56:	6804      	ldr	r4, [r0, #0]
 8005f58:	fa03 f506 	lsl.w	r5, r3, r6
 8005f5c:	432c      	orrs	r4, r5
 8005f5e:	40d3      	lsrs	r3, r2
 8005f60:	6004      	str	r4, [r0, #0]
 8005f62:	f840 3f04 	str.w	r3, [r0, #4]!
 8005f66:	4288      	cmp	r0, r1
 8005f68:	d3f4      	bcc.n	8005f54 <L_shift+0xc>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}

08005f6c <__match>:
 8005f6c:	b530      	push	{r4, r5, lr}
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f76:	b914      	cbnz	r4, 8005f7e <__match+0x12>
 8005f78:	6003      	str	r3, [r0, #0]
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	bd30      	pop	{r4, r5, pc}
 8005f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005f86:	2d19      	cmp	r5, #25
 8005f88:	bf98      	it	ls
 8005f8a:	3220      	addls	r2, #32
 8005f8c:	42a2      	cmp	r2, r4
 8005f8e:	d0f0      	beq.n	8005f72 <__match+0x6>
 8005f90:	2000      	movs	r0, #0
 8005f92:	e7f3      	b.n	8005f7c <__match+0x10>

08005f94 <__hexnan>:
 8005f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f98:	2500      	movs	r5, #0
 8005f9a:	680b      	ldr	r3, [r1, #0]
 8005f9c:	4682      	mov	sl, r0
 8005f9e:	115f      	asrs	r7, r3, #5
 8005fa0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005fa4:	f013 031f 	ands.w	r3, r3, #31
 8005fa8:	bf18      	it	ne
 8005faa:	3704      	addne	r7, #4
 8005fac:	1f3e      	subs	r6, r7, #4
 8005fae:	4690      	mov	r8, r2
 8005fb0:	46b1      	mov	r9, r6
 8005fb2:	4634      	mov	r4, r6
 8005fb4:	46ab      	mov	fp, r5
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	6801      	ldr	r1, [r0, #0]
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	f847 5c04 	str.w	r5, [r7, #-4]
 8005fc0:	9502      	str	r5, [sp, #8]
 8005fc2:	784a      	ldrb	r2, [r1, #1]
 8005fc4:	1c4b      	adds	r3, r1, #1
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	b342      	cbz	r2, 800601c <__hexnan+0x88>
 8005fca:	4610      	mov	r0, r2
 8005fcc:	9105      	str	r1, [sp, #20]
 8005fce:	9204      	str	r2, [sp, #16]
 8005fd0:	f7ff fd83 	bl	8005ada <__hexdig_fun>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d143      	bne.n	8006060 <__hexnan+0xcc>
 8005fd8:	9a04      	ldr	r2, [sp, #16]
 8005fda:	9905      	ldr	r1, [sp, #20]
 8005fdc:	2a20      	cmp	r2, #32
 8005fde:	d818      	bhi.n	8006012 <__hexnan+0x7e>
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	459b      	cmp	fp, r3
 8005fe4:	dd13      	ble.n	800600e <__hexnan+0x7a>
 8005fe6:	454c      	cmp	r4, r9
 8005fe8:	d206      	bcs.n	8005ff8 <__hexnan+0x64>
 8005fea:	2d07      	cmp	r5, #7
 8005fec:	dc04      	bgt.n	8005ff8 <__hexnan+0x64>
 8005fee:	462a      	mov	r2, r5
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f7ff ffa8 	bl	8005f48 <L_shift>
 8005ff8:	4544      	cmp	r4, r8
 8005ffa:	d944      	bls.n	8006086 <__hexnan+0xf2>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f1a4 0904 	sub.w	r9, r4, #4
 8006002:	f844 3c04 	str.w	r3, [r4, #-4]
 8006006:	461d      	mov	r5, r3
 8006008:	464c      	mov	r4, r9
 800600a:	f8cd b008 	str.w	fp, [sp, #8]
 800600e:	9903      	ldr	r1, [sp, #12]
 8006010:	e7d7      	b.n	8005fc2 <__hexnan+0x2e>
 8006012:	2a29      	cmp	r2, #41	; 0x29
 8006014:	d14a      	bne.n	80060ac <__hexnan+0x118>
 8006016:	3102      	adds	r1, #2
 8006018:	f8ca 1000 	str.w	r1, [sl]
 800601c:	f1bb 0f00 	cmp.w	fp, #0
 8006020:	d044      	beq.n	80060ac <__hexnan+0x118>
 8006022:	454c      	cmp	r4, r9
 8006024:	d206      	bcs.n	8006034 <__hexnan+0xa0>
 8006026:	2d07      	cmp	r5, #7
 8006028:	dc04      	bgt.n	8006034 <__hexnan+0xa0>
 800602a:	462a      	mov	r2, r5
 800602c:	4649      	mov	r1, r9
 800602e:	4620      	mov	r0, r4
 8006030:	f7ff ff8a 	bl	8005f48 <L_shift>
 8006034:	4544      	cmp	r4, r8
 8006036:	d928      	bls.n	800608a <__hexnan+0xf6>
 8006038:	4643      	mov	r3, r8
 800603a:	f854 2b04 	ldr.w	r2, [r4], #4
 800603e:	42a6      	cmp	r6, r4
 8006040:	f843 2b04 	str.w	r2, [r3], #4
 8006044:	d2f9      	bcs.n	800603a <__hexnan+0xa6>
 8006046:	2200      	movs	r2, #0
 8006048:	f843 2b04 	str.w	r2, [r3], #4
 800604c:	429e      	cmp	r6, r3
 800604e:	d2fb      	bcs.n	8006048 <__hexnan+0xb4>
 8006050:	6833      	ldr	r3, [r6, #0]
 8006052:	b91b      	cbnz	r3, 800605c <__hexnan+0xc8>
 8006054:	4546      	cmp	r6, r8
 8006056:	d127      	bne.n	80060a8 <__hexnan+0x114>
 8006058:	2301      	movs	r3, #1
 800605a:	6033      	str	r3, [r6, #0]
 800605c:	2005      	movs	r0, #5
 800605e:	e026      	b.n	80060ae <__hexnan+0x11a>
 8006060:	3501      	adds	r5, #1
 8006062:	2d08      	cmp	r5, #8
 8006064:	f10b 0b01 	add.w	fp, fp, #1
 8006068:	dd06      	ble.n	8006078 <__hexnan+0xe4>
 800606a:	4544      	cmp	r4, r8
 800606c:	d9cf      	bls.n	800600e <__hexnan+0x7a>
 800606e:	2300      	movs	r3, #0
 8006070:	2501      	movs	r5, #1
 8006072:	f844 3c04 	str.w	r3, [r4, #-4]
 8006076:	3c04      	subs	r4, #4
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	f000 000f 	and.w	r0, r0, #15
 800607e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006082:	6020      	str	r0, [r4, #0]
 8006084:	e7c3      	b.n	800600e <__hexnan+0x7a>
 8006086:	2508      	movs	r5, #8
 8006088:	e7c1      	b.n	800600e <__hexnan+0x7a>
 800608a:	9b01      	ldr	r3, [sp, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0df      	beq.n	8006050 <__hexnan+0xbc>
 8006090:	f04f 32ff 	mov.w	r2, #4294967295
 8006094:	f1c3 0320 	rsb	r3, r3, #32
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
 800609c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80060a0:	401a      	ands	r2, r3
 80060a2:	f847 2c04 	str.w	r2, [r7, #-4]
 80060a6:	e7d3      	b.n	8006050 <__hexnan+0xbc>
 80060a8:	3e04      	subs	r6, #4
 80060aa:	e7d1      	b.n	8006050 <__hexnan+0xbc>
 80060ac:	2004      	movs	r0, #4
 80060ae:	b007      	add	sp, #28
 80060b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060b4 <__locale_ctype_ptr_l>:
 80060b4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80060b8:	4770      	bx	lr
	...

080060bc <__locale_ctype_ptr>:
 80060bc:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <__locale_ctype_ptr+0x14>)
 80060be:	4a05      	ldr	r2, [pc, #20]	; (80060d4 <__locale_ctype_ptr+0x18>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	bf08      	it	eq
 80060c8:	4613      	moveq	r3, r2
 80060ca:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80060ce:	4770      	bx	lr
 80060d0:	2000000c 	.word	0x2000000c
 80060d4:	20000070 	.word	0x20000070

080060d8 <__localeconv_l>:
 80060d8:	30f0      	adds	r0, #240	; 0xf0
 80060da:	4770      	bx	lr

080060dc <_localeconv_r>:
 80060dc:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <_localeconv_r+0x14>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6a18      	ldr	r0, [r3, #32]
 80060e2:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <_localeconv_r+0x18>)
 80060e4:	2800      	cmp	r0, #0
 80060e6:	bf08      	it	eq
 80060e8:	4618      	moveq	r0, r3
 80060ea:	30f0      	adds	r0, #240	; 0xf0
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	2000000c 	.word	0x2000000c
 80060f4:	20000070 	.word	0x20000070

080060f8 <_lseek_r>:
 80060f8:	b538      	push	{r3, r4, r5, lr}
 80060fa:	4605      	mov	r5, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	2200      	movs	r2, #0
 8006102:	4c05      	ldr	r4, [pc, #20]	; (8006118 <_lseek_r+0x20>)
 8006104:	6022      	str	r2, [r4, #0]
 8006106:	461a      	mov	r2, r3
 8006108:	f7fb fa09 	bl	800151e <_lseek>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d102      	bne.n	8006116 <_lseek_r+0x1e>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	b103      	cbz	r3, 8006116 <_lseek_r+0x1e>
 8006114:	602b      	str	r3, [r5, #0]
 8006116:	bd38      	pop	{r3, r4, r5, pc}
 8006118:	20000564 	.word	0x20000564

0800611c <malloc>:
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <malloc+0xc>)
 800611e:	4601      	mov	r1, r0
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f000 bc81 	b.w	8006a28 <_malloc_r>
 8006126:	bf00      	nop
 8006128:	2000000c 	.word	0x2000000c

0800612c <__ascii_mbtowc>:
 800612c:	b082      	sub	sp, #8
 800612e:	b901      	cbnz	r1, 8006132 <__ascii_mbtowc+0x6>
 8006130:	a901      	add	r1, sp, #4
 8006132:	b142      	cbz	r2, 8006146 <__ascii_mbtowc+0x1a>
 8006134:	b14b      	cbz	r3, 800614a <__ascii_mbtowc+0x1e>
 8006136:	7813      	ldrb	r3, [r2, #0]
 8006138:	600b      	str	r3, [r1, #0]
 800613a:	7812      	ldrb	r2, [r2, #0]
 800613c:	1c10      	adds	r0, r2, #0
 800613e:	bf18      	it	ne
 8006140:	2001      	movne	r0, #1
 8006142:	b002      	add	sp, #8
 8006144:	4770      	bx	lr
 8006146:	4610      	mov	r0, r2
 8006148:	e7fb      	b.n	8006142 <__ascii_mbtowc+0x16>
 800614a:	f06f 0001 	mvn.w	r0, #1
 800614e:	e7f8      	b.n	8006142 <__ascii_mbtowc+0x16>

08006150 <memchr>:
 8006150:	b510      	push	{r4, lr}
 8006152:	b2c9      	uxtb	r1, r1
 8006154:	4402      	add	r2, r0
 8006156:	4290      	cmp	r0, r2
 8006158:	4603      	mov	r3, r0
 800615a:	d101      	bne.n	8006160 <memchr+0x10>
 800615c:	2300      	movs	r3, #0
 800615e:	e003      	b.n	8006168 <memchr+0x18>
 8006160:	781c      	ldrb	r4, [r3, #0]
 8006162:	3001      	adds	r0, #1
 8006164:	428c      	cmp	r4, r1
 8006166:	d1f6      	bne.n	8006156 <memchr+0x6>
 8006168:	4618      	mov	r0, r3
 800616a:	bd10      	pop	{r4, pc}

0800616c <memcpy>:
 800616c:	b510      	push	{r4, lr}
 800616e:	1e43      	subs	r3, r0, #1
 8006170:	440a      	add	r2, r1
 8006172:	4291      	cmp	r1, r2
 8006174:	d100      	bne.n	8006178 <memcpy+0xc>
 8006176:	bd10      	pop	{r4, pc}
 8006178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800617c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006180:	e7f7      	b.n	8006172 <memcpy+0x6>

08006182 <_Balloc>:
 8006182:	b570      	push	{r4, r5, r6, lr}
 8006184:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006186:	4604      	mov	r4, r0
 8006188:	460e      	mov	r6, r1
 800618a:	b93d      	cbnz	r5, 800619c <_Balloc+0x1a>
 800618c:	2010      	movs	r0, #16
 800618e:	f7ff ffc5 	bl	800611c <malloc>
 8006192:	6260      	str	r0, [r4, #36]	; 0x24
 8006194:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006198:	6005      	str	r5, [r0, #0]
 800619a:	60c5      	str	r5, [r0, #12]
 800619c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800619e:	68eb      	ldr	r3, [r5, #12]
 80061a0:	b183      	cbz	r3, 80061c4 <_Balloc+0x42>
 80061a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80061aa:	b9b8      	cbnz	r0, 80061dc <_Balloc+0x5a>
 80061ac:	2101      	movs	r1, #1
 80061ae:	fa01 f506 	lsl.w	r5, r1, r6
 80061b2:	1d6a      	adds	r2, r5, #5
 80061b4:	0092      	lsls	r2, r2, #2
 80061b6:	4620      	mov	r0, r4
 80061b8:	f000 fbdc 	bl	8006974 <_calloc_r>
 80061bc:	b160      	cbz	r0, 80061d8 <_Balloc+0x56>
 80061be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80061c2:	e00e      	b.n	80061e2 <_Balloc+0x60>
 80061c4:	2221      	movs	r2, #33	; 0x21
 80061c6:	2104      	movs	r1, #4
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 fbd3 	bl	8006974 <_calloc_r>
 80061ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061d0:	60e8      	str	r0, [r5, #12]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e4      	bne.n	80061a2 <_Balloc+0x20>
 80061d8:	2000      	movs	r0, #0
 80061da:	bd70      	pop	{r4, r5, r6, pc}
 80061dc:	6802      	ldr	r2, [r0, #0]
 80061de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80061e2:	2300      	movs	r3, #0
 80061e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061e8:	e7f7      	b.n	80061da <_Balloc+0x58>

080061ea <_Bfree>:
 80061ea:	b570      	push	{r4, r5, r6, lr}
 80061ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061ee:	4606      	mov	r6, r0
 80061f0:	460d      	mov	r5, r1
 80061f2:	b93c      	cbnz	r4, 8006204 <_Bfree+0x1a>
 80061f4:	2010      	movs	r0, #16
 80061f6:	f7ff ff91 	bl	800611c <malloc>
 80061fa:	6270      	str	r0, [r6, #36]	; 0x24
 80061fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006200:	6004      	str	r4, [r0, #0]
 8006202:	60c4      	str	r4, [r0, #12]
 8006204:	b13d      	cbz	r5, 8006216 <_Bfree+0x2c>
 8006206:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006208:	686a      	ldr	r2, [r5, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006210:	6029      	str	r1, [r5, #0]
 8006212:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006216:	bd70      	pop	{r4, r5, r6, pc}

08006218 <__multadd>:
 8006218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800621c:	461f      	mov	r7, r3
 800621e:	4606      	mov	r6, r0
 8006220:	460c      	mov	r4, r1
 8006222:	2300      	movs	r3, #0
 8006224:	690d      	ldr	r5, [r1, #16]
 8006226:	f101 0c14 	add.w	ip, r1, #20
 800622a:	f8dc 0000 	ldr.w	r0, [ip]
 800622e:	3301      	adds	r3, #1
 8006230:	b281      	uxth	r1, r0
 8006232:	fb02 7101 	mla	r1, r2, r1, r7
 8006236:	0c00      	lsrs	r0, r0, #16
 8006238:	0c0f      	lsrs	r7, r1, #16
 800623a:	fb02 7000 	mla	r0, r2, r0, r7
 800623e:	b289      	uxth	r1, r1
 8006240:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006244:	429d      	cmp	r5, r3
 8006246:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800624a:	f84c 1b04 	str.w	r1, [ip], #4
 800624e:	dcec      	bgt.n	800622a <__multadd+0x12>
 8006250:	b1d7      	cbz	r7, 8006288 <__multadd+0x70>
 8006252:	68a3      	ldr	r3, [r4, #8]
 8006254:	42ab      	cmp	r3, r5
 8006256:	dc12      	bgt.n	800627e <__multadd+0x66>
 8006258:	6861      	ldr	r1, [r4, #4]
 800625a:	4630      	mov	r0, r6
 800625c:	3101      	adds	r1, #1
 800625e:	f7ff ff90 	bl	8006182 <_Balloc>
 8006262:	4680      	mov	r8, r0
 8006264:	6922      	ldr	r2, [r4, #16]
 8006266:	f104 010c 	add.w	r1, r4, #12
 800626a:	3202      	adds	r2, #2
 800626c:	0092      	lsls	r2, r2, #2
 800626e:	300c      	adds	r0, #12
 8006270:	f7ff ff7c 	bl	800616c <memcpy>
 8006274:	4621      	mov	r1, r4
 8006276:	4630      	mov	r0, r6
 8006278:	f7ff ffb7 	bl	80061ea <_Bfree>
 800627c:	4644      	mov	r4, r8
 800627e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006282:	3501      	adds	r5, #1
 8006284:	615f      	str	r7, [r3, #20]
 8006286:	6125      	str	r5, [r4, #16]
 8006288:	4620      	mov	r0, r4
 800628a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800628e <__s2b>:
 800628e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006292:	4615      	mov	r5, r2
 8006294:	2209      	movs	r2, #9
 8006296:	461f      	mov	r7, r3
 8006298:	3308      	adds	r3, #8
 800629a:	460c      	mov	r4, r1
 800629c:	fb93 f3f2 	sdiv	r3, r3, r2
 80062a0:	4606      	mov	r6, r0
 80062a2:	2201      	movs	r2, #1
 80062a4:	2100      	movs	r1, #0
 80062a6:	429a      	cmp	r2, r3
 80062a8:	db20      	blt.n	80062ec <__s2b+0x5e>
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7ff ff69 	bl	8006182 <_Balloc>
 80062b0:	9b08      	ldr	r3, [sp, #32]
 80062b2:	2d09      	cmp	r5, #9
 80062b4:	6143      	str	r3, [r0, #20]
 80062b6:	f04f 0301 	mov.w	r3, #1
 80062ba:	6103      	str	r3, [r0, #16]
 80062bc:	dd19      	ble.n	80062f2 <__s2b+0x64>
 80062be:	f104 0809 	add.w	r8, r4, #9
 80062c2:	46c1      	mov	r9, r8
 80062c4:	442c      	add	r4, r5
 80062c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80062ca:	4601      	mov	r1, r0
 80062cc:	3b30      	subs	r3, #48	; 0x30
 80062ce:	220a      	movs	r2, #10
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff ffa1 	bl	8006218 <__multadd>
 80062d6:	45a1      	cmp	r9, r4
 80062d8:	d1f5      	bne.n	80062c6 <__s2b+0x38>
 80062da:	eb08 0405 	add.w	r4, r8, r5
 80062de:	3c08      	subs	r4, #8
 80062e0:	1b2d      	subs	r5, r5, r4
 80062e2:	1963      	adds	r3, r4, r5
 80062e4:	42bb      	cmp	r3, r7
 80062e6:	db07      	blt.n	80062f8 <__s2b+0x6a>
 80062e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062ec:	0052      	lsls	r2, r2, #1
 80062ee:	3101      	adds	r1, #1
 80062f0:	e7d9      	b.n	80062a6 <__s2b+0x18>
 80062f2:	340a      	adds	r4, #10
 80062f4:	2509      	movs	r5, #9
 80062f6:	e7f3      	b.n	80062e0 <__s2b+0x52>
 80062f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80062fc:	4601      	mov	r1, r0
 80062fe:	3b30      	subs	r3, #48	; 0x30
 8006300:	220a      	movs	r2, #10
 8006302:	4630      	mov	r0, r6
 8006304:	f7ff ff88 	bl	8006218 <__multadd>
 8006308:	e7eb      	b.n	80062e2 <__s2b+0x54>

0800630a <__hi0bits>:
 800630a:	0c02      	lsrs	r2, r0, #16
 800630c:	0412      	lsls	r2, r2, #16
 800630e:	4603      	mov	r3, r0
 8006310:	b9b2      	cbnz	r2, 8006340 <__hi0bits+0x36>
 8006312:	0403      	lsls	r3, r0, #16
 8006314:	2010      	movs	r0, #16
 8006316:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800631a:	bf04      	itt	eq
 800631c:	021b      	lsleq	r3, r3, #8
 800631e:	3008      	addeq	r0, #8
 8006320:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006324:	bf04      	itt	eq
 8006326:	011b      	lsleq	r3, r3, #4
 8006328:	3004      	addeq	r0, #4
 800632a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800632e:	bf04      	itt	eq
 8006330:	009b      	lsleq	r3, r3, #2
 8006332:	3002      	addeq	r0, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	db06      	blt.n	8006346 <__hi0bits+0x3c>
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	d503      	bpl.n	8006344 <__hi0bits+0x3a>
 800633c:	3001      	adds	r0, #1
 800633e:	4770      	bx	lr
 8006340:	2000      	movs	r0, #0
 8006342:	e7e8      	b.n	8006316 <__hi0bits+0xc>
 8006344:	2020      	movs	r0, #32
 8006346:	4770      	bx	lr

08006348 <__lo0bits>:
 8006348:	6803      	ldr	r3, [r0, #0]
 800634a:	4601      	mov	r1, r0
 800634c:	f013 0207 	ands.w	r2, r3, #7
 8006350:	d00b      	beq.n	800636a <__lo0bits+0x22>
 8006352:	07da      	lsls	r2, r3, #31
 8006354:	d423      	bmi.n	800639e <__lo0bits+0x56>
 8006356:	0798      	lsls	r0, r3, #30
 8006358:	bf49      	itett	mi
 800635a:	085b      	lsrmi	r3, r3, #1
 800635c:	089b      	lsrpl	r3, r3, #2
 800635e:	2001      	movmi	r0, #1
 8006360:	600b      	strmi	r3, [r1, #0]
 8006362:	bf5c      	itt	pl
 8006364:	600b      	strpl	r3, [r1, #0]
 8006366:	2002      	movpl	r0, #2
 8006368:	4770      	bx	lr
 800636a:	b298      	uxth	r0, r3
 800636c:	b9a8      	cbnz	r0, 800639a <__lo0bits+0x52>
 800636e:	2010      	movs	r0, #16
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006376:	bf04      	itt	eq
 8006378:	0a1b      	lsreq	r3, r3, #8
 800637a:	3008      	addeq	r0, #8
 800637c:	071a      	lsls	r2, r3, #28
 800637e:	bf04      	itt	eq
 8006380:	091b      	lsreq	r3, r3, #4
 8006382:	3004      	addeq	r0, #4
 8006384:	079a      	lsls	r2, r3, #30
 8006386:	bf04      	itt	eq
 8006388:	089b      	lsreq	r3, r3, #2
 800638a:	3002      	addeq	r0, #2
 800638c:	07da      	lsls	r2, r3, #31
 800638e:	d402      	bmi.n	8006396 <__lo0bits+0x4e>
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	d006      	beq.n	80063a2 <__lo0bits+0x5a>
 8006394:	3001      	adds	r0, #1
 8006396:	600b      	str	r3, [r1, #0]
 8006398:	4770      	bx	lr
 800639a:	4610      	mov	r0, r2
 800639c:	e7e9      	b.n	8006372 <__lo0bits+0x2a>
 800639e:	2000      	movs	r0, #0
 80063a0:	4770      	bx	lr
 80063a2:	2020      	movs	r0, #32
 80063a4:	4770      	bx	lr

080063a6 <__i2b>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	2101      	movs	r1, #1
 80063ac:	f7ff fee9 	bl	8006182 <_Balloc>
 80063b0:	2201      	movs	r2, #1
 80063b2:	6144      	str	r4, [r0, #20]
 80063b4:	6102      	str	r2, [r0, #16]
 80063b6:	bd10      	pop	{r4, pc}

080063b8 <__multiply>:
 80063b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	4614      	mov	r4, r2
 80063be:	690a      	ldr	r2, [r1, #16]
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	4688      	mov	r8, r1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bfbe      	ittt	lt
 80063c8:	460b      	movlt	r3, r1
 80063ca:	46a0      	movlt	r8, r4
 80063cc:	461c      	movlt	r4, r3
 80063ce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80063d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80063da:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063de:	eb07 0609 	add.w	r6, r7, r9
 80063e2:	42b3      	cmp	r3, r6
 80063e4:	bfb8      	it	lt
 80063e6:	3101      	addlt	r1, #1
 80063e8:	f7ff fecb 	bl	8006182 <_Balloc>
 80063ec:	f100 0514 	add.w	r5, r0, #20
 80063f0:	462b      	mov	r3, r5
 80063f2:	2200      	movs	r2, #0
 80063f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80063f8:	4573      	cmp	r3, lr
 80063fa:	d316      	bcc.n	800642a <__multiply+0x72>
 80063fc:	f104 0214 	add.w	r2, r4, #20
 8006400:	f108 0114 	add.w	r1, r8, #20
 8006404:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006408:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	9b00      	ldr	r3, [sp, #0]
 8006410:	9201      	str	r2, [sp, #4]
 8006412:	4293      	cmp	r3, r2
 8006414:	d80c      	bhi.n	8006430 <__multiply+0x78>
 8006416:	2e00      	cmp	r6, #0
 8006418:	dd03      	ble.n	8006422 <__multiply+0x6a>
 800641a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800641e:	2b00      	cmp	r3, #0
 8006420:	d05d      	beq.n	80064de <__multiply+0x126>
 8006422:	6106      	str	r6, [r0, #16]
 8006424:	b003      	add	sp, #12
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	f843 2b04 	str.w	r2, [r3], #4
 800642e:	e7e3      	b.n	80063f8 <__multiply+0x40>
 8006430:	f8b2 b000 	ldrh.w	fp, [r2]
 8006434:	f1bb 0f00 	cmp.w	fp, #0
 8006438:	d023      	beq.n	8006482 <__multiply+0xca>
 800643a:	4689      	mov	r9, r1
 800643c:	46ac      	mov	ip, r5
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	f859 4b04 	ldr.w	r4, [r9], #4
 8006446:	f8dc a000 	ldr.w	sl, [ip]
 800644a:	b2a3      	uxth	r3, r4
 800644c:	fa1f fa8a 	uxth.w	sl, sl
 8006450:	fb0b a303 	mla	r3, fp, r3, sl
 8006454:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006458:	f8dc 4000 	ldr.w	r4, [ip]
 800645c:	4443      	add	r3, r8
 800645e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006462:	fb0b 840a 	mla	r4, fp, sl, r8
 8006466:	46e2      	mov	sl, ip
 8006468:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800646c:	b29b      	uxth	r3, r3
 800646e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006472:	454f      	cmp	r7, r9
 8006474:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006478:	f84a 3b04 	str.w	r3, [sl], #4
 800647c:	d82b      	bhi.n	80064d6 <__multiply+0x11e>
 800647e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006482:	9b01      	ldr	r3, [sp, #4]
 8006484:	3204      	adds	r2, #4
 8006486:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800648a:	f1ba 0f00 	cmp.w	sl, #0
 800648e:	d020      	beq.n	80064d2 <__multiply+0x11a>
 8006490:	4689      	mov	r9, r1
 8006492:	46a8      	mov	r8, r5
 8006494:	f04f 0b00 	mov.w	fp, #0
 8006498:	682b      	ldr	r3, [r5, #0]
 800649a:	f8b9 c000 	ldrh.w	ip, [r9]
 800649e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80064a8:	46c4      	mov	ip, r8
 80064aa:	445c      	add	r4, fp
 80064ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80064b0:	f84c 3b04 	str.w	r3, [ip], #4
 80064b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064b8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	fb0a b303 	mla	r3, sl, r3, fp
 80064c2:	454f      	cmp	r7, r9
 80064c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80064c8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80064cc:	d805      	bhi.n	80064da <__multiply+0x122>
 80064ce:	f8c8 3004 	str.w	r3, [r8, #4]
 80064d2:	3504      	adds	r5, #4
 80064d4:	e79b      	b.n	800640e <__multiply+0x56>
 80064d6:	46d4      	mov	ip, sl
 80064d8:	e7b3      	b.n	8006442 <__multiply+0x8a>
 80064da:	46e0      	mov	r8, ip
 80064dc:	e7dd      	b.n	800649a <__multiply+0xe2>
 80064de:	3e01      	subs	r6, #1
 80064e0:	e799      	b.n	8006416 <__multiply+0x5e>
	...

080064e4 <__pow5mult>:
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	4615      	mov	r5, r2
 80064ea:	f012 0203 	ands.w	r2, r2, #3
 80064ee:	4606      	mov	r6, r0
 80064f0:	460f      	mov	r7, r1
 80064f2:	d007      	beq.n	8006504 <__pow5mult+0x20>
 80064f4:	4c21      	ldr	r4, [pc, #132]	; (800657c <__pow5mult+0x98>)
 80064f6:	3a01      	subs	r2, #1
 80064f8:	2300      	movs	r3, #0
 80064fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064fe:	f7ff fe8b 	bl	8006218 <__multadd>
 8006502:	4607      	mov	r7, r0
 8006504:	10ad      	asrs	r5, r5, #2
 8006506:	d035      	beq.n	8006574 <__pow5mult+0x90>
 8006508:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800650a:	b93c      	cbnz	r4, 800651c <__pow5mult+0x38>
 800650c:	2010      	movs	r0, #16
 800650e:	f7ff fe05 	bl	800611c <malloc>
 8006512:	6270      	str	r0, [r6, #36]	; 0x24
 8006514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006518:	6004      	str	r4, [r0, #0]
 800651a:	60c4      	str	r4, [r0, #12]
 800651c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006524:	b94c      	cbnz	r4, 800653a <__pow5mult+0x56>
 8006526:	f240 2171 	movw	r1, #625	; 0x271
 800652a:	4630      	mov	r0, r6
 800652c:	f7ff ff3b 	bl	80063a6 <__i2b>
 8006530:	2300      	movs	r3, #0
 8006532:	4604      	mov	r4, r0
 8006534:	f8c8 0008 	str.w	r0, [r8, #8]
 8006538:	6003      	str	r3, [r0, #0]
 800653a:	f04f 0800 	mov.w	r8, #0
 800653e:	07eb      	lsls	r3, r5, #31
 8006540:	d50a      	bpl.n	8006558 <__pow5mult+0x74>
 8006542:	4639      	mov	r1, r7
 8006544:	4622      	mov	r2, r4
 8006546:	4630      	mov	r0, r6
 8006548:	f7ff ff36 	bl	80063b8 <__multiply>
 800654c:	4681      	mov	r9, r0
 800654e:	4639      	mov	r1, r7
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff fe4a 	bl	80061ea <_Bfree>
 8006556:	464f      	mov	r7, r9
 8006558:	106d      	asrs	r5, r5, #1
 800655a:	d00b      	beq.n	8006574 <__pow5mult+0x90>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	b938      	cbnz	r0, 8006570 <__pow5mult+0x8c>
 8006560:	4622      	mov	r2, r4
 8006562:	4621      	mov	r1, r4
 8006564:	4630      	mov	r0, r6
 8006566:	f7ff ff27 	bl	80063b8 <__multiply>
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	f8c0 8000 	str.w	r8, [r0]
 8006570:	4604      	mov	r4, r0
 8006572:	e7e4      	b.n	800653e <__pow5mult+0x5a>
 8006574:	4638      	mov	r0, r7
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	bf00      	nop
 800657c:	08008100 	.word	0x08008100

08006580 <__lshift>:
 8006580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006584:	460c      	mov	r4, r1
 8006586:	4607      	mov	r7, r0
 8006588:	4616      	mov	r6, r2
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006590:	eb0a 0903 	add.w	r9, sl, r3
 8006594:	6849      	ldr	r1, [r1, #4]
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	f109 0501 	add.w	r5, r9, #1
 800659c:	42ab      	cmp	r3, r5
 800659e:	db32      	blt.n	8006606 <__lshift+0x86>
 80065a0:	4638      	mov	r0, r7
 80065a2:	f7ff fdee 	bl	8006182 <_Balloc>
 80065a6:	2300      	movs	r3, #0
 80065a8:	4680      	mov	r8, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	f100 0114 	add.w	r1, r0, #20
 80065b0:	4553      	cmp	r3, sl
 80065b2:	db2b      	blt.n	800660c <__lshift+0x8c>
 80065b4:	6920      	ldr	r0, [r4, #16]
 80065b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065ba:	f104 0314 	add.w	r3, r4, #20
 80065be:	f016 021f 	ands.w	r2, r6, #31
 80065c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065ca:	d025      	beq.n	8006618 <__lshift+0x98>
 80065cc:	2000      	movs	r0, #0
 80065ce:	f1c2 0e20 	rsb	lr, r2, #32
 80065d2:	468a      	mov	sl, r1
 80065d4:	681e      	ldr	r6, [r3, #0]
 80065d6:	4096      	lsls	r6, r2
 80065d8:	4330      	orrs	r0, r6
 80065da:	f84a 0b04 	str.w	r0, [sl], #4
 80065de:	f853 0b04 	ldr.w	r0, [r3], #4
 80065e2:	459c      	cmp	ip, r3
 80065e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80065e8:	d814      	bhi.n	8006614 <__lshift+0x94>
 80065ea:	6048      	str	r0, [r1, #4]
 80065ec:	b108      	cbz	r0, 80065f2 <__lshift+0x72>
 80065ee:	f109 0502 	add.w	r5, r9, #2
 80065f2:	3d01      	subs	r5, #1
 80065f4:	4638      	mov	r0, r7
 80065f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80065fa:	4621      	mov	r1, r4
 80065fc:	f7ff fdf5 	bl	80061ea <_Bfree>
 8006600:	4640      	mov	r0, r8
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	3101      	adds	r1, #1
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	e7c7      	b.n	800659c <__lshift+0x1c>
 800660c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006610:	3301      	adds	r3, #1
 8006612:	e7cd      	b.n	80065b0 <__lshift+0x30>
 8006614:	4651      	mov	r1, sl
 8006616:	e7dc      	b.n	80065d2 <__lshift+0x52>
 8006618:	3904      	subs	r1, #4
 800661a:	f853 2b04 	ldr.w	r2, [r3], #4
 800661e:	459c      	cmp	ip, r3
 8006620:	f841 2f04 	str.w	r2, [r1, #4]!
 8006624:	d8f9      	bhi.n	800661a <__lshift+0x9a>
 8006626:	e7e4      	b.n	80065f2 <__lshift+0x72>

08006628 <__mcmp>:
 8006628:	6903      	ldr	r3, [r0, #16]
 800662a:	690a      	ldr	r2, [r1, #16]
 800662c:	b530      	push	{r4, r5, lr}
 800662e:	1a9b      	subs	r3, r3, r2
 8006630:	d10c      	bne.n	800664c <__mcmp+0x24>
 8006632:	0092      	lsls	r2, r2, #2
 8006634:	3014      	adds	r0, #20
 8006636:	3114      	adds	r1, #20
 8006638:	1884      	adds	r4, r0, r2
 800663a:	4411      	add	r1, r2
 800663c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006644:	4295      	cmp	r5, r2
 8006646:	d003      	beq.n	8006650 <__mcmp+0x28>
 8006648:	d305      	bcc.n	8006656 <__mcmp+0x2e>
 800664a:	2301      	movs	r3, #1
 800664c:	4618      	mov	r0, r3
 800664e:	bd30      	pop	{r4, r5, pc}
 8006650:	42a0      	cmp	r0, r4
 8006652:	d3f3      	bcc.n	800663c <__mcmp+0x14>
 8006654:	e7fa      	b.n	800664c <__mcmp+0x24>
 8006656:	f04f 33ff 	mov.w	r3, #4294967295
 800665a:	e7f7      	b.n	800664c <__mcmp+0x24>

0800665c <__mdiff>:
 800665c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006660:	460d      	mov	r5, r1
 8006662:	4607      	mov	r7, r0
 8006664:	4611      	mov	r1, r2
 8006666:	4628      	mov	r0, r5
 8006668:	4614      	mov	r4, r2
 800666a:	f7ff ffdd 	bl	8006628 <__mcmp>
 800666e:	1e06      	subs	r6, r0, #0
 8006670:	d108      	bne.n	8006684 <__mdiff+0x28>
 8006672:	4631      	mov	r1, r6
 8006674:	4638      	mov	r0, r7
 8006676:	f7ff fd84 	bl	8006182 <_Balloc>
 800667a:	2301      	movs	r3, #1
 800667c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006684:	bfa4      	itt	ge
 8006686:	4623      	movge	r3, r4
 8006688:	462c      	movge	r4, r5
 800668a:	4638      	mov	r0, r7
 800668c:	6861      	ldr	r1, [r4, #4]
 800668e:	bfa6      	itte	ge
 8006690:	461d      	movge	r5, r3
 8006692:	2600      	movge	r6, #0
 8006694:	2601      	movlt	r6, #1
 8006696:	f7ff fd74 	bl	8006182 <_Balloc>
 800669a:	f04f 0e00 	mov.w	lr, #0
 800669e:	60c6      	str	r6, [r0, #12]
 80066a0:	692b      	ldr	r3, [r5, #16]
 80066a2:	6926      	ldr	r6, [r4, #16]
 80066a4:	f104 0214 	add.w	r2, r4, #20
 80066a8:	f105 0914 	add.w	r9, r5, #20
 80066ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80066b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80066b4:	f100 0114 	add.w	r1, r0, #20
 80066b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80066bc:	f859 5b04 	ldr.w	r5, [r9], #4
 80066c0:	fa1f f38a 	uxth.w	r3, sl
 80066c4:	4473      	add	r3, lr
 80066c6:	b2ac      	uxth	r4, r5
 80066c8:	1b1b      	subs	r3, r3, r4
 80066ca:	0c2c      	lsrs	r4, r5, #16
 80066cc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80066d0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80066da:	45c8      	cmp	r8, r9
 80066dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80066e0:	4694      	mov	ip, r2
 80066e2:	f841 4b04 	str.w	r4, [r1], #4
 80066e6:	d8e7      	bhi.n	80066b8 <__mdiff+0x5c>
 80066e8:	45bc      	cmp	ip, r7
 80066ea:	d304      	bcc.n	80066f6 <__mdiff+0x9a>
 80066ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066f0:	b183      	cbz	r3, 8006714 <__mdiff+0xb8>
 80066f2:	6106      	str	r6, [r0, #16]
 80066f4:	e7c4      	b.n	8006680 <__mdiff+0x24>
 80066f6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80066fa:	b2a2      	uxth	r2, r4
 80066fc:	4472      	add	r2, lr
 80066fe:	1413      	asrs	r3, r2, #16
 8006700:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006704:	b292      	uxth	r2, r2
 8006706:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800670a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800670e:	f841 2b04 	str.w	r2, [r1], #4
 8006712:	e7e9      	b.n	80066e8 <__mdiff+0x8c>
 8006714:	3e01      	subs	r6, #1
 8006716:	e7e9      	b.n	80066ec <__mdiff+0x90>

08006718 <__ulp>:
 8006718:	4b10      	ldr	r3, [pc, #64]	; (800675c <__ulp+0x44>)
 800671a:	400b      	ands	r3, r1
 800671c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006720:	2b00      	cmp	r3, #0
 8006722:	dd02      	ble.n	800672a <__ulp+0x12>
 8006724:	2000      	movs	r0, #0
 8006726:	4619      	mov	r1, r3
 8006728:	4770      	bx	lr
 800672a:	425b      	negs	r3, r3
 800672c:	151b      	asrs	r3, r3, #20
 800672e:	2b13      	cmp	r3, #19
 8006730:	f04f 0000 	mov.w	r0, #0
 8006734:	f04f 0100 	mov.w	r1, #0
 8006738:	dc04      	bgt.n	8006744 <__ulp+0x2c>
 800673a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800673e:	fa42 f103 	asr.w	r1, r2, r3
 8006742:	4770      	bx	lr
 8006744:	2201      	movs	r2, #1
 8006746:	3b14      	subs	r3, #20
 8006748:	2b1e      	cmp	r3, #30
 800674a:	bfce      	itee	gt
 800674c:	4613      	movgt	r3, r2
 800674e:	f1c3 031f 	rsble	r3, r3, #31
 8006752:	fa02 f303 	lslle.w	r3, r2, r3
 8006756:	4618      	mov	r0, r3
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	7ff00000 	.word	0x7ff00000

08006760 <__b2d>:
 8006760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006764:	6907      	ldr	r7, [r0, #16]
 8006766:	f100 0914 	add.w	r9, r0, #20
 800676a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800676e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006772:	f1a7 0804 	sub.w	r8, r7, #4
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff fdc7 	bl	800630a <__hi0bits>
 800677c:	f1c0 0320 	rsb	r3, r0, #32
 8006780:	280a      	cmp	r0, #10
 8006782:	600b      	str	r3, [r1, #0]
 8006784:	491e      	ldr	r1, [pc, #120]	; (8006800 <__b2d+0xa0>)
 8006786:	dc17      	bgt.n	80067b8 <__b2d+0x58>
 8006788:	45c1      	cmp	r9, r8
 800678a:	bf28      	it	cs
 800678c:	2200      	movcs	r2, #0
 800678e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006792:	fa26 f30c 	lsr.w	r3, r6, ip
 8006796:	bf38      	it	cc
 8006798:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800679c:	ea43 0501 	orr.w	r5, r3, r1
 80067a0:	f100 0315 	add.w	r3, r0, #21
 80067a4:	fa06 f303 	lsl.w	r3, r6, r3
 80067a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80067ac:	ea43 0402 	orr.w	r4, r3, r2
 80067b0:	4620      	mov	r0, r4
 80067b2:	4629      	mov	r1, r5
 80067b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067b8:	45c1      	cmp	r9, r8
 80067ba:	bf3a      	itte	cc
 80067bc:	f1a7 0808 	subcc.w	r8, r7, #8
 80067c0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80067c4:	2200      	movcs	r2, #0
 80067c6:	f1b0 030b 	subs.w	r3, r0, #11
 80067ca:	d015      	beq.n	80067f8 <__b2d+0x98>
 80067cc:	409e      	lsls	r6, r3
 80067ce:	f1c3 0720 	rsb	r7, r3, #32
 80067d2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80067d6:	fa22 f107 	lsr.w	r1, r2, r7
 80067da:	45c8      	cmp	r8, r9
 80067dc:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80067e0:	ea46 0501 	orr.w	r5, r6, r1
 80067e4:	bf94      	ite	ls
 80067e6:	2100      	movls	r1, #0
 80067e8:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80067ec:	fa02 f003 	lsl.w	r0, r2, r3
 80067f0:	40f9      	lsrs	r1, r7
 80067f2:	ea40 0401 	orr.w	r4, r0, r1
 80067f6:	e7db      	b.n	80067b0 <__b2d+0x50>
 80067f8:	ea46 0501 	orr.w	r5, r6, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	e7d7      	b.n	80067b0 <__b2d+0x50>
 8006800:	3ff00000 	.word	0x3ff00000

08006804 <__d2b>:
 8006804:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006808:	461c      	mov	r4, r3
 800680a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800680e:	2101      	movs	r1, #1
 8006810:	4690      	mov	r8, r2
 8006812:	f7ff fcb6 	bl	8006182 <_Balloc>
 8006816:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800681a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800681e:	4607      	mov	r7, r0
 8006820:	bb34      	cbnz	r4, 8006870 <__d2b+0x6c>
 8006822:	9201      	str	r2, [sp, #4]
 8006824:	f1b8 0200 	subs.w	r2, r8, #0
 8006828:	d027      	beq.n	800687a <__d2b+0x76>
 800682a:	a802      	add	r0, sp, #8
 800682c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006830:	f7ff fd8a 	bl	8006348 <__lo0bits>
 8006834:	9900      	ldr	r1, [sp, #0]
 8006836:	b1f0      	cbz	r0, 8006876 <__d2b+0x72>
 8006838:	9a01      	ldr	r2, [sp, #4]
 800683a:	f1c0 0320 	rsb	r3, r0, #32
 800683e:	fa02 f303 	lsl.w	r3, r2, r3
 8006842:	430b      	orrs	r3, r1
 8006844:	40c2      	lsrs	r2, r0
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	9201      	str	r2, [sp, #4]
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf14      	ite	ne
 8006850:	2102      	movne	r1, #2
 8006852:	2101      	moveq	r1, #1
 8006854:	61bb      	str	r3, [r7, #24]
 8006856:	6139      	str	r1, [r7, #16]
 8006858:	b1c4      	cbz	r4, 800688c <__d2b+0x88>
 800685a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800685e:	4404      	add	r4, r0
 8006860:	6034      	str	r4, [r6, #0]
 8006862:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006866:	6028      	str	r0, [r5, #0]
 8006868:	4638      	mov	r0, r7
 800686a:	b002      	add	sp, #8
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006874:	e7d5      	b.n	8006822 <__d2b+0x1e>
 8006876:	6179      	str	r1, [r7, #20]
 8006878:	e7e7      	b.n	800684a <__d2b+0x46>
 800687a:	a801      	add	r0, sp, #4
 800687c:	f7ff fd64 	bl	8006348 <__lo0bits>
 8006880:	2101      	movs	r1, #1
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	6139      	str	r1, [r7, #16]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	3020      	adds	r0, #32
 800688a:	e7e5      	b.n	8006858 <__d2b+0x54>
 800688c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006890:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	6918      	ldr	r0, [r3, #16]
 8006898:	f7ff fd37 	bl	800630a <__hi0bits>
 800689c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068a0:	e7e1      	b.n	8006866 <__d2b+0x62>

080068a2 <__ratio>:
 80068a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a6:	4688      	mov	r8, r1
 80068a8:	4669      	mov	r1, sp
 80068aa:	4681      	mov	r9, r0
 80068ac:	f7ff ff58 	bl	8006760 <__b2d>
 80068b0:	468b      	mov	fp, r1
 80068b2:	4606      	mov	r6, r0
 80068b4:	460f      	mov	r7, r1
 80068b6:	4640      	mov	r0, r8
 80068b8:	a901      	add	r1, sp, #4
 80068ba:	f7ff ff51 	bl	8006760 <__b2d>
 80068be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80068c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80068c6:	460d      	mov	r5, r1
 80068c8:	eba3 0c02 	sub.w	ip, r3, r2
 80068cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80068d0:	1a9b      	subs	r3, r3, r2
 80068d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfd5      	itete	le
 80068da:	460a      	movle	r2, r1
 80068dc:	463a      	movgt	r2, r7
 80068de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80068e2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80068e6:	bfd8      	it	le
 80068e8:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80068ec:	462b      	mov	r3, r5
 80068ee:	4602      	mov	r2, r0
 80068f0:	4659      	mov	r1, fp
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7f9 ff1a 	bl	800072c <__aeabi_ddiv>
 80068f8:	b003      	add	sp, #12
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080068fe <__copybits>:
 80068fe:	3901      	subs	r1, #1
 8006900:	b510      	push	{r4, lr}
 8006902:	1149      	asrs	r1, r1, #5
 8006904:	6914      	ldr	r4, [r2, #16]
 8006906:	3101      	adds	r1, #1
 8006908:	f102 0314 	add.w	r3, r2, #20
 800690c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006910:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006914:	42a3      	cmp	r3, r4
 8006916:	4602      	mov	r2, r0
 8006918:	d303      	bcc.n	8006922 <__copybits+0x24>
 800691a:	2300      	movs	r3, #0
 800691c:	428a      	cmp	r2, r1
 800691e:	d305      	bcc.n	800692c <__copybits+0x2e>
 8006920:	bd10      	pop	{r4, pc}
 8006922:	f853 2b04 	ldr.w	r2, [r3], #4
 8006926:	f840 2b04 	str.w	r2, [r0], #4
 800692a:	e7f3      	b.n	8006914 <__copybits+0x16>
 800692c:	f842 3b04 	str.w	r3, [r2], #4
 8006930:	e7f4      	b.n	800691c <__copybits+0x1e>

08006932 <__any_on>:
 8006932:	f100 0214 	add.w	r2, r0, #20
 8006936:	6900      	ldr	r0, [r0, #16]
 8006938:	114b      	asrs	r3, r1, #5
 800693a:	4298      	cmp	r0, r3
 800693c:	b510      	push	{r4, lr}
 800693e:	db11      	blt.n	8006964 <__any_on+0x32>
 8006940:	dd0a      	ble.n	8006958 <__any_on+0x26>
 8006942:	f011 011f 	ands.w	r1, r1, #31
 8006946:	d007      	beq.n	8006958 <__any_on+0x26>
 8006948:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800694c:	fa24 f001 	lsr.w	r0, r4, r1
 8006950:	fa00 f101 	lsl.w	r1, r0, r1
 8006954:	428c      	cmp	r4, r1
 8006956:	d10b      	bne.n	8006970 <__any_on+0x3e>
 8006958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800695c:	4293      	cmp	r3, r2
 800695e:	d803      	bhi.n	8006968 <__any_on+0x36>
 8006960:	2000      	movs	r0, #0
 8006962:	bd10      	pop	{r4, pc}
 8006964:	4603      	mov	r3, r0
 8006966:	e7f7      	b.n	8006958 <__any_on+0x26>
 8006968:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800696c:	2900      	cmp	r1, #0
 800696e:	d0f5      	beq.n	800695c <__any_on+0x2a>
 8006970:	2001      	movs	r0, #1
 8006972:	e7f6      	b.n	8006962 <__any_on+0x30>

08006974 <_calloc_r>:
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	fb02 f401 	mul.w	r4, r2, r1
 800697a:	4621      	mov	r1, r4
 800697c:	f000 f854 	bl	8006a28 <_malloc_r>
 8006980:	4605      	mov	r5, r0
 8006982:	b118      	cbz	r0, 800698c <_calloc_r+0x18>
 8006984:	4622      	mov	r2, r4
 8006986:	2100      	movs	r1, #0
 8006988:	f7fc fb80 	bl	800308c <memset>
 800698c:	4628      	mov	r0, r5
 800698e:	bd38      	pop	{r3, r4, r5, pc}

08006990 <_free_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4605      	mov	r5, r0
 8006994:	2900      	cmp	r1, #0
 8006996:	d043      	beq.n	8006a20 <_free_r+0x90>
 8006998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699c:	1f0c      	subs	r4, r1, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bfb8      	it	lt
 80069a2:	18e4      	addlt	r4, r4, r3
 80069a4:	f001 f951 	bl	8007c4a <__malloc_lock>
 80069a8:	4a1e      	ldr	r2, [pc, #120]	; (8006a24 <_free_r+0x94>)
 80069aa:	6813      	ldr	r3, [r2, #0]
 80069ac:	4610      	mov	r0, r2
 80069ae:	b933      	cbnz	r3, 80069be <_free_r+0x2e>
 80069b0:	6063      	str	r3, [r4, #4]
 80069b2:	6014      	str	r4, [r2, #0]
 80069b4:	4628      	mov	r0, r5
 80069b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ba:	f001 b947 	b.w	8007c4c <__malloc_unlock>
 80069be:	42a3      	cmp	r3, r4
 80069c0:	d90b      	bls.n	80069da <_free_r+0x4a>
 80069c2:	6821      	ldr	r1, [r4, #0]
 80069c4:	1862      	adds	r2, r4, r1
 80069c6:	4293      	cmp	r3, r2
 80069c8:	bf01      	itttt	eq
 80069ca:	681a      	ldreq	r2, [r3, #0]
 80069cc:	685b      	ldreq	r3, [r3, #4]
 80069ce:	1852      	addeq	r2, r2, r1
 80069d0:	6022      	streq	r2, [r4, #0]
 80069d2:	6063      	str	r3, [r4, #4]
 80069d4:	6004      	str	r4, [r0, #0]
 80069d6:	e7ed      	b.n	80069b4 <_free_r+0x24>
 80069d8:	4613      	mov	r3, r2
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	b10a      	cbz	r2, 80069e2 <_free_r+0x52>
 80069de:	42a2      	cmp	r2, r4
 80069e0:	d9fa      	bls.n	80069d8 <_free_r+0x48>
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	1858      	adds	r0, r3, r1
 80069e6:	42a0      	cmp	r0, r4
 80069e8:	d10b      	bne.n	8006a02 <_free_r+0x72>
 80069ea:	6820      	ldr	r0, [r4, #0]
 80069ec:	4401      	add	r1, r0
 80069ee:	1858      	adds	r0, r3, r1
 80069f0:	4282      	cmp	r2, r0
 80069f2:	6019      	str	r1, [r3, #0]
 80069f4:	d1de      	bne.n	80069b4 <_free_r+0x24>
 80069f6:	6810      	ldr	r0, [r2, #0]
 80069f8:	6852      	ldr	r2, [r2, #4]
 80069fa:	4401      	add	r1, r0
 80069fc:	6019      	str	r1, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	e7d8      	b.n	80069b4 <_free_r+0x24>
 8006a02:	d902      	bls.n	8006a0a <_free_r+0x7a>
 8006a04:	230c      	movs	r3, #12
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	e7d4      	b.n	80069b4 <_free_r+0x24>
 8006a0a:	6820      	ldr	r0, [r4, #0]
 8006a0c:	1821      	adds	r1, r4, r0
 8006a0e:	428a      	cmp	r2, r1
 8006a10:	bf01      	itttt	eq
 8006a12:	6811      	ldreq	r1, [r2, #0]
 8006a14:	6852      	ldreq	r2, [r2, #4]
 8006a16:	1809      	addeq	r1, r1, r0
 8006a18:	6021      	streq	r1, [r4, #0]
 8006a1a:	6062      	str	r2, [r4, #4]
 8006a1c:	605c      	str	r4, [r3, #4]
 8006a1e:	e7c9      	b.n	80069b4 <_free_r+0x24>
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
 8006a22:	bf00      	nop
 8006a24:	20000200 	.word	0x20000200

08006a28 <_malloc_r>:
 8006a28:	b570      	push	{r4, r5, r6, lr}
 8006a2a:	1ccd      	adds	r5, r1, #3
 8006a2c:	f025 0503 	bic.w	r5, r5, #3
 8006a30:	3508      	adds	r5, #8
 8006a32:	2d0c      	cmp	r5, #12
 8006a34:	bf38      	it	cc
 8006a36:	250c      	movcc	r5, #12
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	4606      	mov	r6, r0
 8006a3c:	db01      	blt.n	8006a42 <_malloc_r+0x1a>
 8006a3e:	42a9      	cmp	r1, r5
 8006a40:	d903      	bls.n	8006a4a <_malloc_r+0x22>
 8006a42:	230c      	movs	r3, #12
 8006a44:	6033      	str	r3, [r6, #0]
 8006a46:	2000      	movs	r0, #0
 8006a48:	bd70      	pop	{r4, r5, r6, pc}
 8006a4a:	f001 f8fe 	bl	8007c4a <__malloc_lock>
 8006a4e:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <_malloc_r+0xac>)
 8006a50:	6814      	ldr	r4, [r2, #0]
 8006a52:	4621      	mov	r1, r4
 8006a54:	b991      	cbnz	r1, 8006a7c <_malloc_r+0x54>
 8006a56:	4c20      	ldr	r4, [pc, #128]	; (8006ad8 <_malloc_r+0xb0>)
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	b91b      	cbnz	r3, 8006a64 <_malloc_r+0x3c>
 8006a5c:	4630      	mov	r0, r6
 8006a5e:	f000 fde1 	bl	8007624 <_sbrk_r>
 8006a62:	6020      	str	r0, [r4, #0]
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 fddc 	bl	8007624 <_sbrk_r>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d124      	bne.n	8006aba <_malloc_r+0x92>
 8006a70:	230c      	movs	r3, #12
 8006a72:	4630      	mov	r0, r6
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	f001 f8e9 	bl	8007c4c <__malloc_unlock>
 8006a7a:	e7e4      	b.n	8006a46 <_malloc_r+0x1e>
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	1b5b      	subs	r3, r3, r5
 8006a80:	d418      	bmi.n	8006ab4 <_malloc_r+0x8c>
 8006a82:	2b0b      	cmp	r3, #11
 8006a84:	d90f      	bls.n	8006aa6 <_malloc_r+0x7e>
 8006a86:	600b      	str	r3, [r1, #0]
 8006a88:	18cc      	adds	r4, r1, r3
 8006a8a:	50cd      	str	r5, [r1, r3]
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f001 f8dd 	bl	8007c4c <__malloc_unlock>
 8006a92:	f104 000b 	add.w	r0, r4, #11
 8006a96:	1d23      	adds	r3, r4, #4
 8006a98:	f020 0007 	bic.w	r0, r0, #7
 8006a9c:	1ac3      	subs	r3, r0, r3
 8006a9e:	d0d3      	beq.n	8006a48 <_malloc_r+0x20>
 8006aa0:	425a      	negs	r2, r3
 8006aa2:	50e2      	str	r2, [r4, r3]
 8006aa4:	e7d0      	b.n	8006a48 <_malloc_r+0x20>
 8006aa6:	684b      	ldr	r3, [r1, #4]
 8006aa8:	428c      	cmp	r4, r1
 8006aaa:	bf16      	itet	ne
 8006aac:	6063      	strne	r3, [r4, #4]
 8006aae:	6013      	streq	r3, [r2, #0]
 8006ab0:	460c      	movne	r4, r1
 8006ab2:	e7eb      	b.n	8006a8c <_malloc_r+0x64>
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	6849      	ldr	r1, [r1, #4]
 8006ab8:	e7cc      	b.n	8006a54 <_malloc_r+0x2c>
 8006aba:	1cc4      	adds	r4, r0, #3
 8006abc:	f024 0403 	bic.w	r4, r4, #3
 8006ac0:	42a0      	cmp	r0, r4
 8006ac2:	d005      	beq.n	8006ad0 <_malloc_r+0xa8>
 8006ac4:	1a21      	subs	r1, r4, r0
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f000 fdac 	bl	8007624 <_sbrk_r>
 8006acc:	3001      	adds	r0, #1
 8006ace:	d0cf      	beq.n	8006a70 <_malloc_r+0x48>
 8006ad0:	6025      	str	r5, [r4, #0]
 8006ad2:	e7db      	b.n	8006a8c <_malloc_r+0x64>
 8006ad4:	20000200 	.word	0x20000200
 8006ad8:	20000204 	.word	0x20000204

08006adc <__ssputs_r>:
 8006adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae0:	688e      	ldr	r6, [r1, #8]
 8006ae2:	4682      	mov	sl, r0
 8006ae4:	429e      	cmp	r6, r3
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4690      	mov	r8, r2
 8006aea:	4699      	mov	r9, r3
 8006aec:	d837      	bhi.n	8006b5e <__ssputs_r+0x82>
 8006aee:	898a      	ldrh	r2, [r1, #12]
 8006af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006af4:	d031      	beq.n	8006b5a <__ssputs_r+0x7e>
 8006af6:	2302      	movs	r3, #2
 8006af8:	6825      	ldr	r5, [r4, #0]
 8006afa:	6909      	ldr	r1, [r1, #16]
 8006afc:	1a6f      	subs	r7, r5, r1
 8006afe:	6965      	ldr	r5, [r4, #20]
 8006b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b04:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b08:	f109 0301 	add.w	r3, r9, #1
 8006b0c:	443b      	add	r3, r7
 8006b0e:	429d      	cmp	r5, r3
 8006b10:	bf38      	it	cc
 8006b12:	461d      	movcc	r5, r3
 8006b14:	0553      	lsls	r3, r2, #21
 8006b16:	d530      	bpl.n	8006b7a <__ssputs_r+0x9e>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7ff ff85 	bl	8006a28 <_malloc_r>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	b950      	cbnz	r0, 8006b38 <__ssputs_r+0x5c>
 8006b22:	230c      	movs	r3, #12
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	f8ca 3000 	str.w	r3, [sl]
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	463a      	mov	r2, r7
 8006b3a:	6921      	ldr	r1, [r4, #16]
 8006b3c:	f7ff fb16 	bl	800616c <memcpy>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	6126      	str	r6, [r4, #16]
 8006b4e:	443e      	add	r6, r7
 8006b50:	6026      	str	r6, [r4, #0]
 8006b52:	464e      	mov	r6, r9
 8006b54:	6165      	str	r5, [r4, #20]
 8006b56:	1bed      	subs	r5, r5, r7
 8006b58:	60a5      	str	r5, [r4, #8]
 8006b5a:	454e      	cmp	r6, r9
 8006b5c:	d900      	bls.n	8006b60 <__ssputs_r+0x84>
 8006b5e:	464e      	mov	r6, r9
 8006b60:	4632      	mov	r2, r6
 8006b62:	4641      	mov	r1, r8
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	f001 f857 	bl	8007c18 <memmove>
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	1b9b      	subs	r3, r3, r6
 8006b70:	60a3      	str	r3, [r4, #8]
 8006b72:	6823      	ldr	r3, [r4, #0]
 8006b74:	441e      	add	r6, r3
 8006b76:	6026      	str	r6, [r4, #0]
 8006b78:	e7dc      	b.n	8006b34 <__ssputs_r+0x58>
 8006b7a:	462a      	mov	r2, r5
 8006b7c:	f001 f867 	bl	8007c4e <_realloc_r>
 8006b80:	4606      	mov	r6, r0
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d1e2      	bne.n	8006b4c <__ssputs_r+0x70>
 8006b86:	6921      	ldr	r1, [r4, #16]
 8006b88:	4650      	mov	r0, sl
 8006b8a:	f7ff ff01 	bl	8006990 <_free_r>
 8006b8e:	e7c8      	b.n	8006b22 <__ssputs_r+0x46>

08006b90 <_svfiprintf_r>:
 8006b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b94:	461d      	mov	r5, r3
 8006b96:	898b      	ldrh	r3, [r1, #12]
 8006b98:	b09d      	sub	sp, #116	; 0x74
 8006b9a:	061f      	lsls	r7, r3, #24
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	d50f      	bpl.n	8006bc4 <_svfiprintf_r+0x34>
 8006ba4:	690b      	ldr	r3, [r1, #16]
 8006ba6:	b96b      	cbnz	r3, 8006bc4 <_svfiprintf_r+0x34>
 8006ba8:	2140      	movs	r1, #64	; 0x40
 8006baa:	f7ff ff3d 	bl	8006a28 <_malloc_r>
 8006bae:	6020      	str	r0, [r4, #0]
 8006bb0:	6120      	str	r0, [r4, #16]
 8006bb2:	b928      	cbnz	r0, 8006bc0 <_svfiprintf_r+0x30>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	f8c8 3000 	str.w	r3, [r8]
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbe:	e0c8      	b.n	8006d52 <_svfiprintf_r+0x1c2>
 8006bc0:	2340      	movs	r3, #64	; 0x40
 8006bc2:	6163      	str	r3, [r4, #20]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc8:	2320      	movs	r3, #32
 8006bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bce:	2330      	movs	r3, #48	; 0x30
 8006bd0:	f04f 0b01 	mov.w	fp, #1
 8006bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bd8:	9503      	str	r5, [sp, #12]
 8006bda:	4637      	mov	r7, r6
 8006bdc:	463d      	mov	r5, r7
 8006bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006be2:	b10b      	cbz	r3, 8006be8 <_svfiprintf_r+0x58>
 8006be4:	2b25      	cmp	r3, #37	; 0x25
 8006be6:	d13e      	bne.n	8006c66 <_svfiprintf_r+0xd6>
 8006be8:	ebb7 0a06 	subs.w	sl, r7, r6
 8006bec:	d00b      	beq.n	8006c06 <_svfiprintf_r+0x76>
 8006bee:	4653      	mov	r3, sl
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4640      	mov	r0, r8
 8006bf6:	f7ff ff71 	bl	8006adc <__ssputs_r>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	f000 80a4 	beq.w	8006d48 <_svfiprintf_r+0x1b8>
 8006c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c02:	4453      	add	r3, sl
 8006c04:	9309      	str	r3, [sp, #36]	; 0x24
 8006c06:	783b      	ldrb	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 809d 	beq.w	8006d48 <_svfiprintf_r+0x1b8>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	f04f 32ff 	mov.w	r2, #4294967295
 8006c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9307      	str	r3, [sp, #28]
 8006c1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c20:	931a      	str	r3, [sp, #104]	; 0x68
 8006c22:	462f      	mov	r7, r5
 8006c24:	2205      	movs	r2, #5
 8006c26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c2a:	4850      	ldr	r0, [pc, #320]	; (8006d6c <_svfiprintf_r+0x1dc>)
 8006c2c:	f7ff fa90 	bl	8006150 <memchr>
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	b9d0      	cbnz	r0, 8006c6a <_svfiprintf_r+0xda>
 8006c34:	06d9      	lsls	r1, r3, #27
 8006c36:	bf44      	itt	mi
 8006c38:	2220      	movmi	r2, #32
 8006c3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c3e:	071a      	lsls	r2, r3, #28
 8006c40:	bf44      	itt	mi
 8006c42:	222b      	movmi	r2, #43	; 0x2b
 8006c44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c48:	782a      	ldrb	r2, [r5, #0]
 8006c4a:	2a2a      	cmp	r2, #42	; 0x2a
 8006c4c:	d015      	beq.n	8006c7a <_svfiprintf_r+0xea>
 8006c4e:	462f      	mov	r7, r5
 8006c50:	2000      	movs	r0, #0
 8006c52:	250a      	movs	r5, #10
 8006c54:	9a07      	ldr	r2, [sp, #28]
 8006c56:	4639      	mov	r1, r7
 8006c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c5c:	3b30      	subs	r3, #48	; 0x30
 8006c5e:	2b09      	cmp	r3, #9
 8006c60:	d94d      	bls.n	8006cfe <_svfiprintf_r+0x16e>
 8006c62:	b1b8      	cbz	r0, 8006c94 <_svfiprintf_r+0x104>
 8006c64:	e00f      	b.n	8006c86 <_svfiprintf_r+0xf6>
 8006c66:	462f      	mov	r7, r5
 8006c68:	e7b8      	b.n	8006bdc <_svfiprintf_r+0x4c>
 8006c6a:	4a40      	ldr	r2, [pc, #256]	; (8006d6c <_svfiprintf_r+0x1dc>)
 8006c6c:	463d      	mov	r5, r7
 8006c6e:	1a80      	subs	r0, r0, r2
 8006c70:	fa0b f000 	lsl.w	r0, fp, r0
 8006c74:	4318      	orrs	r0, r3
 8006c76:	9004      	str	r0, [sp, #16]
 8006c78:	e7d3      	b.n	8006c22 <_svfiprintf_r+0x92>
 8006c7a:	9a03      	ldr	r2, [sp, #12]
 8006c7c:	1d11      	adds	r1, r2, #4
 8006c7e:	6812      	ldr	r2, [r2, #0]
 8006c80:	9103      	str	r1, [sp, #12]
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	db01      	blt.n	8006c8a <_svfiprintf_r+0xfa>
 8006c86:	9207      	str	r2, [sp, #28]
 8006c88:	e004      	b.n	8006c94 <_svfiprintf_r+0x104>
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	f043 0302 	orr.w	r3, r3, #2
 8006c90:	9207      	str	r2, [sp, #28]
 8006c92:	9304      	str	r3, [sp, #16]
 8006c94:	783b      	ldrb	r3, [r7, #0]
 8006c96:	2b2e      	cmp	r3, #46	; 0x2e
 8006c98:	d10c      	bne.n	8006cb4 <_svfiprintf_r+0x124>
 8006c9a:	787b      	ldrb	r3, [r7, #1]
 8006c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c9e:	d133      	bne.n	8006d08 <_svfiprintf_r+0x178>
 8006ca0:	9b03      	ldr	r3, [sp, #12]
 8006ca2:	3702      	adds	r7, #2
 8006ca4:	1d1a      	adds	r2, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	9203      	str	r2, [sp, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	bfb8      	it	lt
 8006cae:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cb2:	9305      	str	r3, [sp, #20]
 8006cb4:	4d2e      	ldr	r5, [pc, #184]	; (8006d70 <_svfiprintf_r+0x1e0>)
 8006cb6:	2203      	movs	r2, #3
 8006cb8:	7839      	ldrb	r1, [r7, #0]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f7ff fa48 	bl	8006150 <memchr>
 8006cc0:	b138      	cbz	r0, 8006cd2 <_svfiprintf_r+0x142>
 8006cc2:	2340      	movs	r3, #64	; 0x40
 8006cc4:	1b40      	subs	r0, r0, r5
 8006cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8006cca:	9b04      	ldr	r3, [sp, #16]
 8006ccc:	3701      	adds	r7, #1
 8006cce:	4303      	orrs	r3, r0
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	7839      	ldrb	r1, [r7, #0]
 8006cd4:	2206      	movs	r2, #6
 8006cd6:	4827      	ldr	r0, [pc, #156]	; (8006d74 <_svfiprintf_r+0x1e4>)
 8006cd8:	1c7e      	adds	r6, r7, #1
 8006cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cde:	f7ff fa37 	bl	8006150 <memchr>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d038      	beq.n	8006d58 <_svfiprintf_r+0x1c8>
 8006ce6:	4b24      	ldr	r3, [pc, #144]	; (8006d78 <_svfiprintf_r+0x1e8>)
 8006ce8:	bb13      	cbnz	r3, 8006d30 <_svfiprintf_r+0x1a0>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	3307      	adds	r3, #7
 8006cee:	f023 0307 	bic.w	r3, r3, #7
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	9303      	str	r3, [sp, #12]
 8006cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf8:	444b      	add	r3, r9
 8006cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfc:	e76d      	b.n	8006bda <_svfiprintf_r+0x4a>
 8006cfe:	fb05 3202 	mla	r2, r5, r2, r3
 8006d02:	2001      	movs	r0, #1
 8006d04:	460f      	mov	r7, r1
 8006d06:	e7a6      	b.n	8006c56 <_svfiprintf_r+0xc6>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	250a      	movs	r5, #10
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	3701      	adds	r7, #1
 8006d10:	9305      	str	r3, [sp, #20]
 8006d12:	4638      	mov	r0, r7
 8006d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d18:	3a30      	subs	r2, #48	; 0x30
 8006d1a:	2a09      	cmp	r2, #9
 8006d1c:	d903      	bls.n	8006d26 <_svfiprintf_r+0x196>
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0c8      	beq.n	8006cb4 <_svfiprintf_r+0x124>
 8006d22:	9105      	str	r1, [sp, #20]
 8006d24:	e7c6      	b.n	8006cb4 <_svfiprintf_r+0x124>
 8006d26:	fb05 2101 	mla	r1, r5, r1, r2
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4607      	mov	r7, r0
 8006d2e:	e7f0      	b.n	8006d12 <_svfiprintf_r+0x182>
 8006d30:	ab03      	add	r3, sp, #12
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4622      	mov	r2, r4
 8006d36:	4b11      	ldr	r3, [pc, #68]	; (8006d7c <_svfiprintf_r+0x1ec>)
 8006d38:	a904      	add	r1, sp, #16
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	f7fc fa40 	bl	80031c0 <_printf_float>
 8006d40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d44:	4681      	mov	r9, r0
 8006d46:	d1d6      	bne.n	8006cf6 <_svfiprintf_r+0x166>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	065b      	lsls	r3, r3, #25
 8006d4c:	f53f af35 	bmi.w	8006bba <_svfiprintf_r+0x2a>
 8006d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d52:	b01d      	add	sp, #116	; 0x74
 8006d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d58:	ab03      	add	r3, sp, #12
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <_svfiprintf_r+0x1ec>)
 8006d60:	a904      	add	r1, sp, #16
 8006d62:	4640      	mov	r0, r8
 8006d64:	f7fc fcd8 	bl	8003718 <_printf_i>
 8006d68:	e7ea      	b.n	8006d40 <_svfiprintf_r+0x1b0>
 8006d6a:	bf00      	nop
 8006d6c:	0800810c 	.word	0x0800810c
 8006d70:	08008112 	.word	0x08008112
 8006d74:	08008116 	.word	0x08008116
 8006d78:	080031c1 	.word	0x080031c1
 8006d7c:	08006add 	.word	0x08006add

08006d80 <_sungetc_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	1c4b      	adds	r3, r1, #1
 8006d84:	4614      	mov	r4, r2
 8006d86:	d103      	bne.n	8006d90 <_sungetc_r+0x10>
 8006d88:	f04f 35ff 	mov.w	r5, #4294967295
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	8993      	ldrh	r3, [r2, #12]
 8006d92:	b2cd      	uxtb	r5, r1
 8006d94:	f023 0320 	bic.w	r3, r3, #32
 8006d98:	8193      	strh	r3, [r2, #12]
 8006d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d9c:	6852      	ldr	r2, [r2, #4]
 8006d9e:	b18b      	cbz	r3, 8006dc4 <_sungetc_r+0x44>
 8006da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006da2:	4293      	cmp	r3, r2
 8006da4:	dd08      	ble.n	8006db8 <_sungetc_r+0x38>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	1e5a      	subs	r2, r3, #1
 8006daa:	6022      	str	r2, [r4, #0]
 8006dac:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006db0:	6863      	ldr	r3, [r4, #4]
 8006db2:	3301      	adds	r3, #1
 8006db4:	6063      	str	r3, [r4, #4]
 8006db6:	e7e9      	b.n	8006d8c <_sungetc_r+0xc>
 8006db8:	4621      	mov	r1, r4
 8006dba:	f000 fd13 	bl	80077e4 <__submore>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d0f1      	beq.n	8006da6 <_sungetc_r+0x26>
 8006dc2:	e7e1      	b.n	8006d88 <_sungetc_r+0x8>
 8006dc4:	6921      	ldr	r1, [r4, #16]
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	b151      	cbz	r1, 8006de0 <_sungetc_r+0x60>
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	d208      	bcs.n	8006de0 <_sungetc_r+0x60>
 8006dce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006dd2:	42a9      	cmp	r1, r5
 8006dd4:	d104      	bne.n	8006de0 <_sungetc_r+0x60>
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	3201      	adds	r2, #1
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	6062      	str	r2, [r4, #4]
 8006dde:	e7d5      	b.n	8006d8c <_sungetc_r+0xc>
 8006de0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de8:	6363      	str	r3, [r4, #52]	; 0x34
 8006dea:	2303      	movs	r3, #3
 8006dec:	63a3      	str	r3, [r4, #56]	; 0x38
 8006dee:	4623      	mov	r3, r4
 8006df0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	2301      	movs	r3, #1
 8006df8:	e7dc      	b.n	8006db4 <_sungetc_r+0x34>

08006dfa <__ssrefill_r>:
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	460c      	mov	r4, r1
 8006dfe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006e00:	b169      	cbz	r1, 8006e1e <__ssrefill_r+0x24>
 8006e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e06:	4299      	cmp	r1, r3
 8006e08:	d001      	beq.n	8006e0e <__ssrefill_r+0x14>
 8006e0a:	f7ff fdc1 	bl	8006990 <_free_r>
 8006e0e:	2000      	movs	r0, #0
 8006e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e12:	6360      	str	r0, [r4, #52]	; 0x34
 8006e14:	6063      	str	r3, [r4, #4]
 8006e16:	b113      	cbz	r3, 8006e1e <__ssrefill_r+0x24>
 8006e18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	6923      	ldr	r3, [r4, #16]
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	2300      	movs	r3, #0
 8006e28:	6063      	str	r3, [r4, #4]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f043 0320 	orr.w	r3, r3, #32
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	e7f3      	b.n	8006e1c <__ssrefill_r+0x22>

08006e34 <__ssvfiscanf_r>:
 8006e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	4692      	mov	sl, r2
 8006e40:	270a      	movs	r7, #10
 8006e42:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006e46:	9144      	str	r1, [sp, #272]	; 0x110
 8006e48:	9145      	str	r1, [sp, #276]	; 0x114
 8006e4a:	499e      	ldr	r1, [pc, #632]	; (80070c4 <__ssvfiscanf_r+0x290>)
 8006e4c:	f10d 0804 	add.w	r8, sp, #4
 8006e50:	91a0      	str	r1, [sp, #640]	; 0x280
 8006e52:	499d      	ldr	r1, [pc, #628]	; (80070c8 <__ssvfiscanf_r+0x294>)
 8006e54:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80070cc <__ssvfiscanf_r+0x298>
 8006e58:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006e5c:	91a1      	str	r1, [sp, #644]	; 0x284
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	f89a 3000 	ldrb.w	r3, [sl]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 812a 	beq.w	80070be <__ssvfiscanf_r+0x28a>
 8006e6a:	4655      	mov	r5, sl
 8006e6c:	f7ff f926 	bl	80060bc <__locale_ctype_ptr>
 8006e70:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006e74:	4458      	add	r0, fp
 8006e76:	7843      	ldrb	r3, [r0, #1]
 8006e78:	f013 0308 	ands.w	r3, r3, #8
 8006e7c:	d01c      	beq.n	8006eb8 <__ssvfiscanf_r+0x84>
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	dd12      	ble.n	8006eaa <__ssvfiscanf_r+0x76>
 8006e84:	f7ff f91a 	bl	80060bc <__locale_ctype_ptr>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	781a      	ldrb	r2, [r3, #0]
 8006e8c:	4410      	add	r0, r2
 8006e8e:	7842      	ldrb	r2, [r0, #1]
 8006e90:	0712      	lsls	r2, r2, #28
 8006e92:	d401      	bmi.n	8006e98 <__ssvfiscanf_r+0x64>
 8006e94:	46aa      	mov	sl, r5
 8006e96:	e7e3      	b.n	8006e60 <__ssvfiscanf_r+0x2c>
 8006e98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	3201      	adds	r2, #1
 8006e9e:	9245      	str	r2, [sp, #276]	; 0x114
 8006ea0:	6862      	ldr	r2, [r4, #4]
 8006ea2:	6023      	str	r3, [r4, #0]
 8006ea4:	3a01      	subs	r2, #1
 8006ea6:	6062      	str	r2, [r4, #4]
 8006ea8:	e7e9      	b.n	8006e7e <__ssvfiscanf_r+0x4a>
 8006eaa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006eac:	4621      	mov	r1, r4
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4798      	blx	r3
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0e6      	beq.n	8006e84 <__ssvfiscanf_r+0x50>
 8006eb6:	e7ed      	b.n	8006e94 <__ssvfiscanf_r+0x60>
 8006eb8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006ebc:	f040 8082 	bne.w	8006fc4 <__ssvfiscanf_r+0x190>
 8006ec0:	9343      	str	r3, [sp, #268]	; 0x10c
 8006ec2:	9341      	str	r3, [sp, #260]	; 0x104
 8006ec4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006ec8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eca:	d103      	bne.n	8006ed4 <__ssvfiscanf_r+0xa0>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	f10a 0502 	add.w	r5, sl, #2
 8006ed2:	9341      	str	r3, [sp, #260]	; 0x104
 8006ed4:	46aa      	mov	sl, r5
 8006ed6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006eda:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006ede:	2a09      	cmp	r2, #9
 8006ee0:	d922      	bls.n	8006f28 <__ssvfiscanf_r+0xf4>
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	4879      	ldr	r0, [pc, #484]	; (80070cc <__ssvfiscanf_r+0x298>)
 8006ee6:	f7ff f933 	bl	8006150 <memchr>
 8006eea:	b138      	cbz	r0, 8006efc <__ssvfiscanf_r+0xc8>
 8006eec:	eba0 0309 	sub.w	r3, r0, r9
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	46aa      	mov	sl, r5
 8006ef4:	4098      	lsls	r0, r3
 8006ef6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006ef8:	4318      	orrs	r0, r3
 8006efa:	9041      	str	r0, [sp, #260]	; 0x104
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	f10a 0501 	add.w	r5, sl, #1
 8006f04:	2b67      	cmp	r3, #103	; 0x67
 8006f06:	d82b      	bhi.n	8006f60 <__ssvfiscanf_r+0x12c>
 8006f08:	2b65      	cmp	r3, #101	; 0x65
 8006f0a:	f080 809f 	bcs.w	800704c <__ssvfiscanf_r+0x218>
 8006f0e:	2b47      	cmp	r3, #71	; 0x47
 8006f10:	d810      	bhi.n	8006f34 <__ssvfiscanf_r+0x100>
 8006f12:	2b45      	cmp	r3, #69	; 0x45
 8006f14:	f080 809a 	bcs.w	800704c <__ssvfiscanf_r+0x218>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d06c      	beq.n	8006ff6 <__ssvfiscanf_r+0x1c2>
 8006f1c:	2b25      	cmp	r3, #37	; 0x25
 8006f1e:	d051      	beq.n	8006fc4 <__ssvfiscanf_r+0x190>
 8006f20:	2303      	movs	r3, #3
 8006f22:	9742      	str	r7, [sp, #264]	; 0x108
 8006f24:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f26:	e027      	b.n	8006f78 <__ssvfiscanf_r+0x144>
 8006f28:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006f2a:	fb07 1303 	mla	r3, r7, r3, r1
 8006f2e:	3b30      	subs	r3, #48	; 0x30
 8006f30:	9343      	str	r3, [sp, #268]	; 0x10c
 8006f32:	e7cf      	b.n	8006ed4 <__ssvfiscanf_r+0xa0>
 8006f34:	2b5b      	cmp	r3, #91	; 0x5b
 8006f36:	d06a      	beq.n	800700e <__ssvfiscanf_r+0x1da>
 8006f38:	d80c      	bhi.n	8006f54 <__ssvfiscanf_r+0x120>
 8006f3a:	2b58      	cmp	r3, #88	; 0x58
 8006f3c:	d1f0      	bne.n	8006f20 <__ssvfiscanf_r+0xec>
 8006f3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f44:	9241      	str	r2, [sp, #260]	; 0x104
 8006f46:	2210      	movs	r2, #16
 8006f48:	9242      	str	r2, [sp, #264]	; 0x108
 8006f4a:	2b6e      	cmp	r3, #110	; 0x6e
 8006f4c:	bf8c      	ite	hi
 8006f4e:	2304      	movhi	r3, #4
 8006f50:	2303      	movls	r3, #3
 8006f52:	e010      	b.n	8006f76 <__ssvfiscanf_r+0x142>
 8006f54:	2b63      	cmp	r3, #99	; 0x63
 8006f56:	d065      	beq.n	8007024 <__ssvfiscanf_r+0x1f0>
 8006f58:	2b64      	cmp	r3, #100	; 0x64
 8006f5a:	d1e1      	bne.n	8006f20 <__ssvfiscanf_r+0xec>
 8006f5c:	9742      	str	r7, [sp, #264]	; 0x108
 8006f5e:	e7f4      	b.n	8006f4a <__ssvfiscanf_r+0x116>
 8006f60:	2b70      	cmp	r3, #112	; 0x70
 8006f62:	d04b      	beq.n	8006ffc <__ssvfiscanf_r+0x1c8>
 8006f64:	d826      	bhi.n	8006fb4 <__ssvfiscanf_r+0x180>
 8006f66:	2b6e      	cmp	r3, #110	; 0x6e
 8006f68:	d062      	beq.n	8007030 <__ssvfiscanf_r+0x1fc>
 8006f6a:	d84c      	bhi.n	8007006 <__ssvfiscanf_r+0x1d2>
 8006f6c:	2b69      	cmp	r3, #105	; 0x69
 8006f6e:	d1d7      	bne.n	8006f20 <__ssvfiscanf_r+0xec>
 8006f70:	2300      	movs	r3, #0
 8006f72:	9342      	str	r3, [sp, #264]	; 0x108
 8006f74:	2303      	movs	r3, #3
 8006f76:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	dd68      	ble.n	8007050 <__ssvfiscanf_r+0x21c>
 8006f7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f80:	0659      	lsls	r1, r3, #25
 8006f82:	d407      	bmi.n	8006f94 <__ssvfiscanf_r+0x160>
 8006f84:	f7ff f89a 	bl	80060bc <__locale_ctype_ptr>
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	781a      	ldrb	r2, [r3, #0]
 8006f8c:	4410      	add	r0, r2
 8006f8e:	7842      	ldrb	r2, [r0, #1]
 8006f90:	0712      	lsls	r2, r2, #28
 8006f92:	d464      	bmi.n	800705e <__ssvfiscanf_r+0x22a>
 8006f94:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	dc73      	bgt.n	8007082 <__ssvfiscanf_r+0x24e>
 8006f9a:	466b      	mov	r3, sp
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	a941      	add	r1, sp, #260	; 0x104
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f000 f9d5 	bl	8007350 <_scanf_chars>
 8006fa6:	2801      	cmp	r0, #1
 8006fa8:	f000 8089 	beq.w	80070be <__ssvfiscanf_r+0x28a>
 8006fac:	2802      	cmp	r0, #2
 8006fae:	f47f af71 	bne.w	8006e94 <__ssvfiscanf_r+0x60>
 8006fb2:	e01d      	b.n	8006ff0 <__ssvfiscanf_r+0x1bc>
 8006fb4:	2b75      	cmp	r3, #117	; 0x75
 8006fb6:	d0d1      	beq.n	8006f5c <__ssvfiscanf_r+0x128>
 8006fb8:	2b78      	cmp	r3, #120	; 0x78
 8006fba:	d0c0      	beq.n	8006f3e <__ssvfiscanf_r+0x10a>
 8006fbc:	2b73      	cmp	r3, #115	; 0x73
 8006fbe:	d1af      	bne.n	8006f20 <__ssvfiscanf_r+0xec>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e7d8      	b.n	8006f76 <__ssvfiscanf_r+0x142>
 8006fc4:	6863      	ldr	r3, [r4, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	dd0c      	ble.n	8006fe4 <__ssvfiscanf_r+0x1b0>
 8006fca:	6823      	ldr	r3, [r4, #0]
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	455a      	cmp	r2, fp
 8006fd0:	d175      	bne.n	80070be <__ssvfiscanf_r+0x28a>
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	6862      	ldr	r2, [r4, #4]
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006fda:	3a01      	subs	r2, #1
 8006fdc:	3301      	adds	r3, #1
 8006fde:	6062      	str	r2, [r4, #4]
 8006fe0:	9345      	str	r3, [sp, #276]	; 0x114
 8006fe2:	e757      	b.n	8006e94 <__ssvfiscanf_r+0x60>
 8006fe4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4798      	blx	r3
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d0ec      	beq.n	8006fca <__ssvfiscanf_r+0x196>
 8006ff0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	d159      	bne.n	80070aa <__ssvfiscanf_r+0x276>
 8006ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffa:	e05c      	b.n	80070b6 <__ssvfiscanf_r+0x282>
 8006ffc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006ffe:	f042 0220 	orr.w	r2, r2, #32
 8007002:	9241      	str	r2, [sp, #260]	; 0x104
 8007004:	e79b      	b.n	8006f3e <__ssvfiscanf_r+0x10a>
 8007006:	2308      	movs	r3, #8
 8007008:	9342      	str	r3, [sp, #264]	; 0x108
 800700a:	2304      	movs	r3, #4
 800700c:	e7b3      	b.n	8006f76 <__ssvfiscanf_r+0x142>
 800700e:	4629      	mov	r1, r5
 8007010:	4640      	mov	r0, r8
 8007012:	f000 fb17 	bl	8007644 <__sccl>
 8007016:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007018:	4605      	mov	r5, r0
 800701a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701e:	9341      	str	r3, [sp, #260]	; 0x104
 8007020:	2301      	movs	r3, #1
 8007022:	e7a8      	b.n	8006f76 <__ssvfiscanf_r+0x142>
 8007024:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702a:	9341      	str	r3, [sp, #260]	; 0x104
 800702c:	2300      	movs	r3, #0
 800702e:	e7a2      	b.n	8006f76 <__ssvfiscanf_r+0x142>
 8007030:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007032:	06c3      	lsls	r3, r0, #27
 8007034:	f53f af2e 	bmi.w	8006e94 <__ssvfiscanf_r+0x60>
 8007038:	9b00      	ldr	r3, [sp, #0]
 800703a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800703c:	1d19      	adds	r1, r3, #4
 800703e:	9100      	str	r1, [sp, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	07c0      	lsls	r0, r0, #31
 8007044:	bf4c      	ite	mi
 8007046:	801a      	strhmi	r2, [r3, #0]
 8007048:	601a      	strpl	r2, [r3, #0]
 800704a:	e723      	b.n	8006e94 <__ssvfiscanf_r+0x60>
 800704c:	2305      	movs	r3, #5
 800704e:	e792      	b.n	8006f76 <__ssvfiscanf_r+0x142>
 8007050:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007052:	4621      	mov	r1, r4
 8007054:	4630      	mov	r0, r6
 8007056:	4798      	blx	r3
 8007058:	2800      	cmp	r0, #0
 800705a:	d090      	beq.n	8006f7e <__ssvfiscanf_r+0x14a>
 800705c:	e7c8      	b.n	8006ff0 <__ssvfiscanf_r+0x1bc>
 800705e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007060:	3201      	adds	r2, #1
 8007062:	9245      	str	r2, [sp, #276]	; 0x114
 8007064:	6862      	ldr	r2, [r4, #4]
 8007066:	3a01      	subs	r2, #1
 8007068:	2a00      	cmp	r2, #0
 800706a:	6062      	str	r2, [r4, #4]
 800706c:	dd02      	ble.n	8007074 <__ssvfiscanf_r+0x240>
 800706e:	3301      	adds	r3, #1
 8007070:	6023      	str	r3, [r4, #0]
 8007072:	e787      	b.n	8006f84 <__ssvfiscanf_r+0x150>
 8007074:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007076:	4621      	mov	r1, r4
 8007078:	4630      	mov	r0, r6
 800707a:	4798      	blx	r3
 800707c:	2800      	cmp	r0, #0
 800707e:	d081      	beq.n	8006f84 <__ssvfiscanf_r+0x150>
 8007080:	e7b6      	b.n	8006ff0 <__ssvfiscanf_r+0x1bc>
 8007082:	2b04      	cmp	r3, #4
 8007084:	dc06      	bgt.n	8007094 <__ssvfiscanf_r+0x260>
 8007086:	466b      	mov	r3, sp
 8007088:	4622      	mov	r2, r4
 800708a:	a941      	add	r1, sp, #260	; 0x104
 800708c:	4630      	mov	r0, r6
 800708e:	f000 f9c1 	bl	8007414 <_scanf_i>
 8007092:	e788      	b.n	8006fa6 <__ssvfiscanf_r+0x172>
 8007094:	4b0e      	ldr	r3, [pc, #56]	; (80070d0 <__ssvfiscanf_r+0x29c>)
 8007096:	2b00      	cmp	r3, #0
 8007098:	f43f aefc 	beq.w	8006e94 <__ssvfiscanf_r+0x60>
 800709c:	466b      	mov	r3, sp
 800709e:	4622      	mov	r2, r4
 80070a0:	a941      	add	r1, sp, #260	; 0x104
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7fc fc4a 	bl	800393c <_scanf_float>
 80070a8:	e77d      	b.n	8006fa6 <__ssvfiscanf_r+0x172>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80070b0:	bf18      	it	ne
 80070b2:	f04f 30ff 	movne.w	r0, #4294967295
 80070b6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80070ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070be:	9844      	ldr	r0, [sp, #272]	; 0x110
 80070c0:	e7f9      	b.n	80070b6 <__ssvfiscanf_r+0x282>
 80070c2:	bf00      	nop
 80070c4:	08006d81 	.word	0x08006d81
 80070c8:	08006dfb 	.word	0x08006dfb
 80070cc:	08008112 	.word	0x08008112
 80070d0:	0800393d 	.word	0x0800393d

080070d4 <__sfputc_r>:
 80070d4:	6893      	ldr	r3, [r2, #8]
 80070d6:	b410      	push	{r4}
 80070d8:	3b01      	subs	r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	6093      	str	r3, [r2, #8]
 80070de:	da07      	bge.n	80070f0 <__sfputc_r+0x1c>
 80070e0:	6994      	ldr	r4, [r2, #24]
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	db01      	blt.n	80070ea <__sfputc_r+0x16>
 80070e6:	290a      	cmp	r1, #10
 80070e8:	d102      	bne.n	80070f0 <__sfputc_r+0x1c>
 80070ea:	bc10      	pop	{r4}
 80070ec:	f000 bbb2 	b.w	8007854 <__swbuf_r>
 80070f0:	6813      	ldr	r3, [r2, #0]
 80070f2:	1c58      	adds	r0, r3, #1
 80070f4:	6010      	str	r0, [r2, #0]
 80070f6:	7019      	strb	r1, [r3, #0]
 80070f8:	4608      	mov	r0, r1
 80070fa:	bc10      	pop	{r4}
 80070fc:	4770      	bx	lr

080070fe <__sfputs_r>:
 80070fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007100:	4606      	mov	r6, r0
 8007102:	460f      	mov	r7, r1
 8007104:	4614      	mov	r4, r2
 8007106:	18d5      	adds	r5, r2, r3
 8007108:	42ac      	cmp	r4, r5
 800710a:	d101      	bne.n	8007110 <__sfputs_r+0x12>
 800710c:	2000      	movs	r0, #0
 800710e:	e007      	b.n	8007120 <__sfputs_r+0x22>
 8007110:	463a      	mov	r2, r7
 8007112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007116:	4630      	mov	r0, r6
 8007118:	f7ff ffdc 	bl	80070d4 <__sfputc_r>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d1f3      	bne.n	8007108 <__sfputs_r+0xa>
 8007120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007124 <_vfiprintf_r>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	460c      	mov	r4, r1
 800712a:	b09d      	sub	sp, #116	; 0x74
 800712c:	4617      	mov	r7, r2
 800712e:	461d      	mov	r5, r3
 8007130:	4606      	mov	r6, r0
 8007132:	b118      	cbz	r0, 800713c <_vfiprintf_r+0x18>
 8007134:	6983      	ldr	r3, [r0, #24]
 8007136:	b90b      	cbnz	r3, 800713c <_vfiprintf_r+0x18>
 8007138:	f7fe fc0a 	bl	8005950 <__sinit>
 800713c:	4b7c      	ldr	r3, [pc, #496]	; (8007330 <_vfiprintf_r+0x20c>)
 800713e:	429c      	cmp	r4, r3
 8007140:	d158      	bne.n	80071f4 <_vfiprintf_r+0xd0>
 8007142:	6874      	ldr	r4, [r6, #4]
 8007144:	89a3      	ldrh	r3, [r4, #12]
 8007146:	0718      	lsls	r0, r3, #28
 8007148:	d55e      	bpl.n	8007208 <_vfiprintf_r+0xe4>
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d05b      	beq.n	8007208 <_vfiprintf_r+0xe4>
 8007150:	2300      	movs	r3, #0
 8007152:	9309      	str	r3, [sp, #36]	; 0x24
 8007154:	2320      	movs	r3, #32
 8007156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800715a:	2330      	movs	r3, #48	; 0x30
 800715c:	f04f 0b01 	mov.w	fp, #1
 8007160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007164:	9503      	str	r5, [sp, #12]
 8007166:	46b8      	mov	r8, r7
 8007168:	4645      	mov	r5, r8
 800716a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800716e:	b10b      	cbz	r3, 8007174 <_vfiprintf_r+0x50>
 8007170:	2b25      	cmp	r3, #37	; 0x25
 8007172:	d154      	bne.n	800721e <_vfiprintf_r+0xfa>
 8007174:	ebb8 0a07 	subs.w	sl, r8, r7
 8007178:	d00b      	beq.n	8007192 <_vfiprintf_r+0x6e>
 800717a:	4653      	mov	r3, sl
 800717c:	463a      	mov	r2, r7
 800717e:	4621      	mov	r1, r4
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ffbc 	bl	80070fe <__sfputs_r>
 8007186:	3001      	adds	r0, #1
 8007188:	f000 80c2 	beq.w	8007310 <_vfiprintf_r+0x1ec>
 800718c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718e:	4453      	add	r3, sl
 8007190:	9309      	str	r3, [sp, #36]	; 0x24
 8007192:	f898 3000 	ldrb.w	r3, [r8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80ba 	beq.w	8007310 <_vfiprintf_r+0x1ec>
 800719c:	2300      	movs	r3, #0
 800719e:	f04f 32ff 	mov.w	r2, #4294967295
 80071a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ae:	931a      	str	r3, [sp, #104]	; 0x68
 80071b0:	46a8      	mov	r8, r5
 80071b2:	2205      	movs	r2, #5
 80071b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80071b8:	485e      	ldr	r0, [pc, #376]	; (8007334 <_vfiprintf_r+0x210>)
 80071ba:	f7fe ffc9 	bl	8006150 <memchr>
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	bb78      	cbnz	r0, 8007222 <_vfiprintf_r+0xfe>
 80071c2:	06d9      	lsls	r1, r3, #27
 80071c4:	bf44      	itt	mi
 80071c6:	2220      	movmi	r2, #32
 80071c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071cc:	071a      	lsls	r2, r3, #28
 80071ce:	bf44      	itt	mi
 80071d0:	222b      	movmi	r2, #43	; 0x2b
 80071d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071d6:	782a      	ldrb	r2, [r5, #0]
 80071d8:	2a2a      	cmp	r2, #42	; 0x2a
 80071da:	d02a      	beq.n	8007232 <_vfiprintf_r+0x10e>
 80071dc:	46a8      	mov	r8, r5
 80071de:	2000      	movs	r0, #0
 80071e0:	250a      	movs	r5, #10
 80071e2:	9a07      	ldr	r2, [sp, #28]
 80071e4:	4641      	mov	r1, r8
 80071e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ea:	3b30      	subs	r3, #48	; 0x30
 80071ec:	2b09      	cmp	r3, #9
 80071ee:	d969      	bls.n	80072c4 <_vfiprintf_r+0x1a0>
 80071f0:	b360      	cbz	r0, 800724c <_vfiprintf_r+0x128>
 80071f2:	e024      	b.n	800723e <_vfiprintf_r+0x11a>
 80071f4:	4b50      	ldr	r3, [pc, #320]	; (8007338 <_vfiprintf_r+0x214>)
 80071f6:	429c      	cmp	r4, r3
 80071f8:	d101      	bne.n	80071fe <_vfiprintf_r+0xda>
 80071fa:	68b4      	ldr	r4, [r6, #8]
 80071fc:	e7a2      	b.n	8007144 <_vfiprintf_r+0x20>
 80071fe:	4b4f      	ldr	r3, [pc, #316]	; (800733c <_vfiprintf_r+0x218>)
 8007200:	429c      	cmp	r4, r3
 8007202:	bf08      	it	eq
 8007204:	68f4      	ldreq	r4, [r6, #12]
 8007206:	e79d      	b.n	8007144 <_vfiprintf_r+0x20>
 8007208:	4621      	mov	r1, r4
 800720a:	4630      	mov	r0, r6
 800720c:	f000 fb82 	bl	8007914 <__swsetup_r>
 8007210:	2800      	cmp	r0, #0
 8007212:	d09d      	beq.n	8007150 <_vfiprintf_r+0x2c>
 8007214:	f04f 30ff 	mov.w	r0, #4294967295
 8007218:	b01d      	add	sp, #116	; 0x74
 800721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721e:	46a8      	mov	r8, r5
 8007220:	e7a2      	b.n	8007168 <_vfiprintf_r+0x44>
 8007222:	4a44      	ldr	r2, [pc, #272]	; (8007334 <_vfiprintf_r+0x210>)
 8007224:	4645      	mov	r5, r8
 8007226:	1a80      	subs	r0, r0, r2
 8007228:	fa0b f000 	lsl.w	r0, fp, r0
 800722c:	4318      	orrs	r0, r3
 800722e:	9004      	str	r0, [sp, #16]
 8007230:	e7be      	b.n	80071b0 <_vfiprintf_r+0x8c>
 8007232:	9a03      	ldr	r2, [sp, #12]
 8007234:	1d11      	adds	r1, r2, #4
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	9103      	str	r1, [sp, #12]
 800723a:	2a00      	cmp	r2, #0
 800723c:	db01      	blt.n	8007242 <_vfiprintf_r+0x11e>
 800723e:	9207      	str	r2, [sp, #28]
 8007240:	e004      	b.n	800724c <_vfiprintf_r+0x128>
 8007242:	4252      	negs	r2, r2
 8007244:	f043 0302 	orr.w	r3, r3, #2
 8007248:	9207      	str	r2, [sp, #28]
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	f898 3000 	ldrb.w	r3, [r8]
 8007250:	2b2e      	cmp	r3, #46	; 0x2e
 8007252:	d10e      	bne.n	8007272 <_vfiprintf_r+0x14e>
 8007254:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007258:	2b2a      	cmp	r3, #42	; 0x2a
 800725a:	d138      	bne.n	80072ce <_vfiprintf_r+0x1aa>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	f108 0802 	add.w	r8, r8, #2
 8007262:	1d1a      	adds	r2, r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	9203      	str	r2, [sp, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	bfb8      	it	lt
 800726c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007270:	9305      	str	r3, [sp, #20]
 8007272:	4d33      	ldr	r5, [pc, #204]	; (8007340 <_vfiprintf_r+0x21c>)
 8007274:	2203      	movs	r2, #3
 8007276:	f898 1000 	ldrb.w	r1, [r8]
 800727a:	4628      	mov	r0, r5
 800727c:	f7fe ff68 	bl	8006150 <memchr>
 8007280:	b140      	cbz	r0, 8007294 <_vfiprintf_r+0x170>
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	1b40      	subs	r0, r0, r5
 8007286:	fa03 f000 	lsl.w	r0, r3, r0
 800728a:	9b04      	ldr	r3, [sp, #16]
 800728c:	f108 0801 	add.w	r8, r8, #1
 8007290:	4303      	orrs	r3, r0
 8007292:	9304      	str	r3, [sp, #16]
 8007294:	f898 1000 	ldrb.w	r1, [r8]
 8007298:	2206      	movs	r2, #6
 800729a:	482a      	ldr	r0, [pc, #168]	; (8007344 <_vfiprintf_r+0x220>)
 800729c:	f108 0701 	add.w	r7, r8, #1
 80072a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072a4:	f7fe ff54 	bl	8006150 <memchr>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d037      	beq.n	800731c <_vfiprintf_r+0x1f8>
 80072ac:	4b26      	ldr	r3, [pc, #152]	; (8007348 <_vfiprintf_r+0x224>)
 80072ae:	bb1b      	cbnz	r3, 80072f8 <_vfiprintf_r+0x1d4>
 80072b0:	9b03      	ldr	r3, [sp, #12]
 80072b2:	3307      	adds	r3, #7
 80072b4:	f023 0307 	bic.w	r3, r3, #7
 80072b8:	3308      	adds	r3, #8
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072be:	444b      	add	r3, r9
 80072c0:	9309      	str	r3, [sp, #36]	; 0x24
 80072c2:	e750      	b.n	8007166 <_vfiprintf_r+0x42>
 80072c4:	fb05 3202 	mla	r2, r5, r2, r3
 80072c8:	2001      	movs	r0, #1
 80072ca:	4688      	mov	r8, r1
 80072cc:	e78a      	b.n	80071e4 <_vfiprintf_r+0xc0>
 80072ce:	2300      	movs	r3, #0
 80072d0:	250a      	movs	r5, #10
 80072d2:	4619      	mov	r1, r3
 80072d4:	f108 0801 	add.w	r8, r8, #1
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	4640      	mov	r0, r8
 80072dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072e0:	3a30      	subs	r2, #48	; 0x30
 80072e2:	2a09      	cmp	r2, #9
 80072e4:	d903      	bls.n	80072ee <_vfiprintf_r+0x1ca>
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d0c3      	beq.n	8007272 <_vfiprintf_r+0x14e>
 80072ea:	9105      	str	r1, [sp, #20]
 80072ec:	e7c1      	b.n	8007272 <_vfiprintf_r+0x14e>
 80072ee:	fb05 2101 	mla	r1, r5, r1, r2
 80072f2:	2301      	movs	r3, #1
 80072f4:	4680      	mov	r8, r0
 80072f6:	e7f0      	b.n	80072da <_vfiprintf_r+0x1b6>
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4622      	mov	r2, r4
 80072fe:	4b13      	ldr	r3, [pc, #76]	; (800734c <_vfiprintf_r+0x228>)
 8007300:	a904      	add	r1, sp, #16
 8007302:	4630      	mov	r0, r6
 8007304:	f7fb ff5c 	bl	80031c0 <_printf_float>
 8007308:	f1b0 3fff 	cmp.w	r0, #4294967295
 800730c:	4681      	mov	r9, r0
 800730e:	d1d5      	bne.n	80072bc <_vfiprintf_r+0x198>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	065b      	lsls	r3, r3, #25
 8007314:	f53f af7e 	bmi.w	8007214 <_vfiprintf_r+0xf0>
 8007318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800731a:	e77d      	b.n	8007218 <_vfiprintf_r+0xf4>
 800731c:	ab03      	add	r3, sp, #12
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	4622      	mov	r2, r4
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <_vfiprintf_r+0x228>)
 8007324:	a904      	add	r1, sp, #16
 8007326:	4630      	mov	r0, r6
 8007328:	f7fc f9f6 	bl	8003718 <_printf_i>
 800732c:	e7ec      	b.n	8007308 <_vfiprintf_r+0x1e4>
 800732e:	bf00      	nop
 8007330:	08007fc0 	.word	0x08007fc0
 8007334:	0800810c 	.word	0x0800810c
 8007338:	08007fe0 	.word	0x08007fe0
 800733c:	08007fa0 	.word	0x08007fa0
 8007340:	08008112 	.word	0x08008112
 8007344:	08008116 	.word	0x08008116
 8007348:	080031c1 	.word	0x080031c1
 800734c:	080070ff 	.word	0x080070ff

08007350 <_scanf_chars>:
 8007350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007354:	4615      	mov	r5, r2
 8007356:	688a      	ldr	r2, [r1, #8]
 8007358:	4680      	mov	r8, r0
 800735a:	460c      	mov	r4, r1
 800735c:	b932      	cbnz	r2, 800736c <_scanf_chars+0x1c>
 800735e:	698a      	ldr	r2, [r1, #24]
 8007360:	2a00      	cmp	r2, #0
 8007362:	bf14      	ite	ne
 8007364:	f04f 32ff 	movne.w	r2, #4294967295
 8007368:	2201      	moveq	r2, #1
 800736a:	608a      	str	r2, [r1, #8]
 800736c:	2600      	movs	r6, #0
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	06d1      	lsls	r1, r2, #27
 8007372:	bf5f      	itttt	pl
 8007374:	681a      	ldrpl	r2, [r3, #0]
 8007376:	1d11      	addpl	r1, r2, #4
 8007378:	6019      	strpl	r1, [r3, #0]
 800737a:	6817      	ldrpl	r7, [r2, #0]
 800737c:	69a3      	ldr	r3, [r4, #24]
 800737e:	b1db      	cbz	r3, 80073b8 <_scanf_chars+0x68>
 8007380:	2b01      	cmp	r3, #1
 8007382:	d107      	bne.n	8007394 <_scanf_chars+0x44>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	6962      	ldr	r2, [r4, #20]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	5cd3      	ldrb	r3, [r2, r3]
 800738c:	b9a3      	cbnz	r3, 80073b8 <_scanf_chars+0x68>
 800738e:	2e00      	cmp	r6, #0
 8007390:	d131      	bne.n	80073f6 <_scanf_chars+0xa6>
 8007392:	e006      	b.n	80073a2 <_scanf_chars+0x52>
 8007394:	2b02      	cmp	r3, #2
 8007396:	d007      	beq.n	80073a8 <_scanf_chars+0x58>
 8007398:	2e00      	cmp	r6, #0
 800739a:	d12c      	bne.n	80073f6 <_scanf_chars+0xa6>
 800739c:	69a3      	ldr	r3, [r4, #24]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d129      	bne.n	80073f6 <_scanf_chars+0xa6>
 80073a2:	2001      	movs	r0, #1
 80073a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a8:	f7fe fe88 	bl	80060bc <__locale_ctype_ptr>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	4418      	add	r0, r3
 80073b2:	7843      	ldrb	r3, [r0, #1]
 80073b4:	071b      	lsls	r3, r3, #28
 80073b6:	d4ef      	bmi.n	8007398 <_scanf_chars+0x48>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	3601      	adds	r6, #1
 80073bc:	06da      	lsls	r2, r3, #27
 80073be:	bf5e      	ittt	pl
 80073c0:	682b      	ldrpl	r3, [r5, #0]
 80073c2:	781b      	ldrbpl	r3, [r3, #0]
 80073c4:	703b      	strbpl	r3, [r7, #0]
 80073c6:	682a      	ldr	r2, [r5, #0]
 80073c8:	686b      	ldr	r3, [r5, #4]
 80073ca:	f102 0201 	add.w	r2, r2, #1
 80073ce:	602a      	str	r2, [r5, #0]
 80073d0:	68a2      	ldr	r2, [r4, #8]
 80073d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80073d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80073da:	606b      	str	r3, [r5, #4]
 80073dc:	bf58      	it	pl
 80073de:	3701      	addpl	r7, #1
 80073e0:	60a2      	str	r2, [r4, #8]
 80073e2:	b142      	cbz	r2, 80073f6 <_scanf_chars+0xa6>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dcc9      	bgt.n	800737c <_scanf_chars+0x2c>
 80073e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80073ec:	4629      	mov	r1, r5
 80073ee:	4640      	mov	r0, r8
 80073f0:	4798      	blx	r3
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d0c2      	beq.n	800737c <_scanf_chars+0x2c>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	f013 0310 	ands.w	r3, r3, #16
 80073fc:	d105      	bne.n	800740a <_scanf_chars+0xba>
 80073fe:	68e2      	ldr	r2, [r4, #12]
 8007400:	3201      	adds	r2, #1
 8007402:	60e2      	str	r2, [r4, #12]
 8007404:	69a2      	ldr	r2, [r4, #24]
 8007406:	b102      	cbz	r2, 800740a <_scanf_chars+0xba>
 8007408:	703b      	strb	r3, [r7, #0]
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	2000      	movs	r0, #0
 800740e:	441e      	add	r6, r3
 8007410:	6126      	str	r6, [r4, #16]
 8007412:	e7c7      	b.n	80073a4 <_scanf_chars+0x54>

08007414 <_scanf_i>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	469a      	mov	sl, r3
 800741c:	4b74      	ldr	r3, [pc, #464]	; (80075f0 <_scanf_i+0x1dc>)
 800741e:	b087      	sub	sp, #28
 8007420:	4683      	mov	fp, r0
 8007422:	4616      	mov	r6, r2
 8007424:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007428:	ab03      	add	r3, sp, #12
 800742a:	68a7      	ldr	r7, [r4, #8]
 800742c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007430:	4b70      	ldr	r3, [pc, #448]	; (80075f4 <_scanf_i+0x1e0>)
 8007432:	69a1      	ldr	r1, [r4, #24]
 8007434:	4a70      	ldr	r2, [pc, #448]	; (80075f8 <_scanf_i+0x1e4>)
 8007436:	f104 091c 	add.w	r9, r4, #28
 800743a:	2903      	cmp	r1, #3
 800743c:	bf08      	it	eq
 800743e:	461a      	moveq	r2, r3
 8007440:	1e7b      	subs	r3, r7, #1
 8007442:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007446:	bf84      	itt	hi
 8007448:	f240 135d 	movwhi	r3, #349	; 0x15d
 800744c:	60a3      	strhi	r3, [r4, #8]
 800744e:	6823      	ldr	r3, [r4, #0]
 8007450:	bf88      	it	hi
 8007452:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007456:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800745a:	6023      	str	r3, [r4, #0]
 800745c:	bf98      	it	ls
 800745e:	2700      	movls	r7, #0
 8007460:	464b      	mov	r3, r9
 8007462:	f04f 0800 	mov.w	r8, #0
 8007466:	9200      	str	r2, [sp, #0]
 8007468:	bf88      	it	hi
 800746a:	197f      	addhi	r7, r7, r5
 800746c:	6831      	ldr	r1, [r6, #0]
 800746e:	9301      	str	r3, [sp, #4]
 8007470:	ab03      	add	r3, sp, #12
 8007472:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007476:	2202      	movs	r2, #2
 8007478:	7809      	ldrb	r1, [r1, #0]
 800747a:	f7fe fe69 	bl	8006150 <memchr>
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	b330      	cbz	r0, 80074d0 <_scanf_i+0xbc>
 8007482:	f1b8 0f01 	cmp.w	r8, #1
 8007486:	d15a      	bne.n	800753e <_scanf_i+0x12a>
 8007488:	6862      	ldr	r2, [r4, #4]
 800748a:	b92a      	cbnz	r2, 8007498 <_scanf_i+0x84>
 800748c:	2108      	movs	r1, #8
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	6061      	str	r1, [r4, #4]
 8007492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007496:	6022      	str	r2, [r4, #0]
 8007498:	6822      	ldr	r2, [r4, #0]
 800749a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800749e:	6022      	str	r2, [r4, #0]
 80074a0:	68a2      	ldr	r2, [r4, #8]
 80074a2:	1e51      	subs	r1, r2, #1
 80074a4:	60a1      	str	r1, [r4, #8]
 80074a6:	b19a      	cbz	r2, 80074d0 <_scanf_i+0xbc>
 80074a8:	6832      	ldr	r2, [r6, #0]
 80074aa:	1c5d      	adds	r5, r3, #1
 80074ac:	1c51      	adds	r1, r2, #1
 80074ae:	6031      	str	r1, [r6, #0]
 80074b0:	7812      	ldrb	r2, [r2, #0]
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	6873      	ldr	r3, [r6, #4]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	6073      	str	r3, [r6, #4]
 80074bc:	dc07      	bgt.n	80074ce <_scanf_i+0xba>
 80074be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80074c2:	4631      	mov	r1, r6
 80074c4:	4658      	mov	r0, fp
 80074c6:	4798      	blx	r3
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f040 8087 	bne.w	80075dc <_scanf_i+0x1c8>
 80074ce:	462b      	mov	r3, r5
 80074d0:	f108 0801 	add.w	r8, r8, #1
 80074d4:	f1b8 0f03 	cmp.w	r8, #3
 80074d8:	d1c8      	bne.n	800746c <_scanf_i+0x58>
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	b90a      	cbnz	r2, 80074e2 <_scanf_i+0xce>
 80074de:	220a      	movs	r2, #10
 80074e0:	6062      	str	r2, [r4, #4]
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	4945      	ldr	r1, [pc, #276]	; (80075fc <_scanf_i+0x1e8>)
 80074e6:	6960      	ldr	r0, [r4, #20]
 80074e8:	1a89      	subs	r1, r1, r2
 80074ea:	9301      	str	r3, [sp, #4]
 80074ec:	f000 f8aa 	bl	8007644 <__sccl>
 80074f0:	9b01      	ldr	r3, [sp, #4]
 80074f2:	f04f 0800 	mov.w	r8, #0
 80074f6:	461d      	mov	r5, r3
 80074f8:	68a3      	ldr	r3, [r4, #8]
 80074fa:	6822      	ldr	r2, [r4, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d03b      	beq.n	8007578 <_scanf_i+0x164>
 8007500:	6831      	ldr	r1, [r6, #0]
 8007502:	6960      	ldr	r0, [r4, #20]
 8007504:	f891 c000 	ldrb.w	ip, [r1]
 8007508:	f810 000c 	ldrb.w	r0, [r0, ip]
 800750c:	2800      	cmp	r0, #0
 800750e:	d033      	beq.n	8007578 <_scanf_i+0x164>
 8007510:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007514:	d121      	bne.n	800755a <_scanf_i+0x146>
 8007516:	0510      	lsls	r0, r2, #20
 8007518:	d51f      	bpl.n	800755a <_scanf_i+0x146>
 800751a:	f108 0801 	add.w	r8, r8, #1
 800751e:	b117      	cbz	r7, 8007526 <_scanf_i+0x112>
 8007520:	3301      	adds	r3, #1
 8007522:	3f01      	subs	r7, #1
 8007524:	60a3      	str	r3, [r4, #8]
 8007526:	6873      	ldr	r3, [r6, #4]
 8007528:	3b01      	subs	r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	6073      	str	r3, [r6, #4]
 800752e:	dd1c      	ble.n	800756a <_scanf_i+0x156>
 8007530:	6833      	ldr	r3, [r6, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	68a3      	ldr	r3, [r4, #8]
 8007538:	3b01      	subs	r3, #1
 800753a:	60a3      	str	r3, [r4, #8]
 800753c:	e7dc      	b.n	80074f8 <_scanf_i+0xe4>
 800753e:	f1b8 0f02 	cmp.w	r8, #2
 8007542:	d1ad      	bne.n	80074a0 <_scanf_i+0x8c>
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800754a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800754e:	d1bf      	bne.n	80074d0 <_scanf_i+0xbc>
 8007550:	2110      	movs	r1, #16
 8007552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007556:	6061      	str	r1, [r4, #4]
 8007558:	e7a1      	b.n	800749e <_scanf_i+0x8a>
 800755a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800755e:	6022      	str	r2, [r4, #0]
 8007560:	780b      	ldrb	r3, [r1, #0]
 8007562:	3501      	adds	r5, #1
 8007564:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007568:	e7dd      	b.n	8007526 <_scanf_i+0x112>
 800756a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800756e:	4631      	mov	r1, r6
 8007570:	4658      	mov	r0, fp
 8007572:	4798      	blx	r3
 8007574:	2800      	cmp	r0, #0
 8007576:	d0de      	beq.n	8007536 <_scanf_i+0x122>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	05d9      	lsls	r1, r3, #23
 800757c:	d50c      	bpl.n	8007598 <_scanf_i+0x184>
 800757e:	454d      	cmp	r5, r9
 8007580:	d908      	bls.n	8007594 <_scanf_i+0x180>
 8007582:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007586:	1e6f      	subs	r7, r5, #1
 8007588:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800758c:	4632      	mov	r2, r6
 800758e:	4658      	mov	r0, fp
 8007590:	4798      	blx	r3
 8007592:	463d      	mov	r5, r7
 8007594:	454d      	cmp	r5, r9
 8007596:	d029      	beq.n	80075ec <_scanf_i+0x1d8>
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	f012 0210 	ands.w	r2, r2, #16
 800759e:	d113      	bne.n	80075c8 <_scanf_i+0x1b4>
 80075a0:	702a      	strb	r2, [r5, #0]
 80075a2:	6863      	ldr	r3, [r4, #4]
 80075a4:	4649      	mov	r1, r9
 80075a6:	4658      	mov	r0, fp
 80075a8:	9e00      	ldr	r6, [sp, #0]
 80075aa:	47b0      	blx	r6
 80075ac:	f8da 3000 	ldr.w	r3, [sl]
 80075b0:	6821      	ldr	r1, [r4, #0]
 80075b2:	1d1a      	adds	r2, r3, #4
 80075b4:	f8ca 2000 	str.w	r2, [sl]
 80075b8:	f011 0f20 	tst.w	r1, #32
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	d010      	beq.n	80075e2 <_scanf_i+0x1ce>
 80075c0:	6018      	str	r0, [r3, #0]
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60e3      	str	r3, [r4, #12]
 80075c8:	2000      	movs	r0, #0
 80075ca:	eba5 0509 	sub.w	r5, r5, r9
 80075ce:	44a8      	add	r8, r5
 80075d0:	6925      	ldr	r5, [r4, #16]
 80075d2:	4445      	add	r5, r8
 80075d4:	6125      	str	r5, [r4, #16]
 80075d6:	b007      	add	sp, #28
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	f04f 0800 	mov.w	r8, #0
 80075e0:	e7ca      	b.n	8007578 <_scanf_i+0x164>
 80075e2:	07ca      	lsls	r2, r1, #31
 80075e4:	bf4c      	ite	mi
 80075e6:	8018      	strhmi	r0, [r3, #0]
 80075e8:	6018      	strpl	r0, [r3, #0]
 80075ea:	e7ea      	b.n	80075c2 <_scanf_i+0x1ae>
 80075ec:	2001      	movs	r0, #1
 80075ee:	e7f2      	b.n	80075d6 <_scanf_i+0x1c2>
 80075f0:	08007edc 	.word	0x08007edc
 80075f4:	08004be1 	.word	0x08004be1
 80075f8:	080077c1 	.word	0x080077c1
 80075fc:	0800812d 	.word	0x0800812d

08007600 <_read_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4605      	mov	r5, r0
 8007604:	4608      	mov	r0, r1
 8007606:	4611      	mov	r1, r2
 8007608:	2200      	movs	r2, #0
 800760a:	4c05      	ldr	r4, [pc, #20]	; (8007620 <_read_r+0x20>)
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	f7f9 ff28 	bl	8001464 <_read>
 8007614:	1c43      	adds	r3, r0, #1
 8007616:	d102      	bne.n	800761e <_read_r+0x1e>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	b103      	cbz	r3, 800761e <_read_r+0x1e>
 800761c:	602b      	str	r3, [r5, #0]
 800761e:	bd38      	pop	{r3, r4, r5, pc}
 8007620:	20000564 	.word	0x20000564

08007624 <_sbrk_r>:
 8007624:	b538      	push	{r3, r4, r5, lr}
 8007626:	2300      	movs	r3, #0
 8007628:	4c05      	ldr	r4, [pc, #20]	; (8007640 <_sbrk_r+0x1c>)
 800762a:	4605      	mov	r5, r0
 800762c:	4608      	mov	r0, r1
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	f7f9 ff82 	bl	8001538 <_sbrk>
 8007634:	1c43      	adds	r3, r0, #1
 8007636:	d102      	bne.n	800763e <_sbrk_r+0x1a>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	b103      	cbz	r3, 800763e <_sbrk_r+0x1a>
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	bd38      	pop	{r3, r4, r5, pc}
 8007640:	20000564 	.word	0x20000564

08007644 <__sccl>:
 8007644:	b570      	push	{r4, r5, r6, lr}
 8007646:	780b      	ldrb	r3, [r1, #0]
 8007648:	1e44      	subs	r4, r0, #1
 800764a:	2b5e      	cmp	r3, #94	; 0x5e
 800764c:	bf13      	iteet	ne
 800764e:	1c4a      	addne	r2, r1, #1
 8007650:	1c8a      	addeq	r2, r1, #2
 8007652:	784b      	ldrbeq	r3, [r1, #1]
 8007654:	2100      	movne	r1, #0
 8007656:	bf08      	it	eq
 8007658:	2101      	moveq	r1, #1
 800765a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800765e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8007662:	42ac      	cmp	r4, r5
 8007664:	d1fb      	bne.n	800765e <__sccl+0x1a>
 8007666:	b913      	cbnz	r3, 800766e <__sccl+0x2a>
 8007668:	3a01      	subs	r2, #1
 800766a:	4610      	mov	r0, r2
 800766c:	bd70      	pop	{r4, r5, r6, pc}
 800766e:	f081 0401 	eor.w	r4, r1, #1
 8007672:	54c4      	strb	r4, [r0, r3]
 8007674:	1c51      	adds	r1, r2, #1
 8007676:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800767a:	1e4e      	subs	r6, r1, #1
 800767c:	2d2d      	cmp	r5, #45	; 0x2d
 800767e:	460a      	mov	r2, r1
 8007680:	d006      	beq.n	8007690 <__sccl+0x4c>
 8007682:	2d5d      	cmp	r5, #93	; 0x5d
 8007684:	d0f1      	beq.n	800766a <__sccl+0x26>
 8007686:	b90d      	cbnz	r5, 800768c <__sccl+0x48>
 8007688:	4632      	mov	r2, r6
 800768a:	e7ee      	b.n	800766a <__sccl+0x26>
 800768c:	462b      	mov	r3, r5
 800768e:	e7f0      	b.n	8007672 <__sccl+0x2e>
 8007690:	780e      	ldrb	r6, [r1, #0]
 8007692:	2e5d      	cmp	r6, #93	; 0x5d
 8007694:	d0fa      	beq.n	800768c <__sccl+0x48>
 8007696:	42b3      	cmp	r3, r6
 8007698:	dcf8      	bgt.n	800768c <__sccl+0x48>
 800769a:	3301      	adds	r3, #1
 800769c:	429e      	cmp	r6, r3
 800769e:	54c4      	strb	r4, [r0, r3]
 80076a0:	dcfb      	bgt.n	800769a <__sccl+0x56>
 80076a2:	3102      	adds	r1, #2
 80076a4:	e7e7      	b.n	8007676 <__sccl+0x32>

080076a6 <strncmp>:
 80076a6:	b510      	push	{r4, lr}
 80076a8:	b16a      	cbz	r2, 80076c6 <strncmp+0x20>
 80076aa:	3901      	subs	r1, #1
 80076ac:	1884      	adds	r4, r0, r2
 80076ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80076b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d103      	bne.n	80076c2 <strncmp+0x1c>
 80076ba:	42a0      	cmp	r0, r4
 80076bc:	d001      	beq.n	80076c2 <strncmp+0x1c>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f5      	bne.n	80076ae <strncmp+0x8>
 80076c2:	1a98      	subs	r0, r3, r2
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	4610      	mov	r0, r2
 80076c8:	e7fc      	b.n	80076c4 <strncmp+0x1e>

080076ca <_strtoul_l.isra.0>:
 80076ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ce:	4680      	mov	r8, r0
 80076d0:	4689      	mov	r9, r1
 80076d2:	4692      	mov	sl, r2
 80076d4:	461e      	mov	r6, r3
 80076d6:	460f      	mov	r7, r1
 80076d8:	463d      	mov	r5, r7
 80076da:	9808      	ldr	r0, [sp, #32]
 80076dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076e0:	f7fe fce8 	bl	80060b4 <__locale_ctype_ptr_l>
 80076e4:	4420      	add	r0, r4
 80076e6:	7843      	ldrb	r3, [r0, #1]
 80076e8:	f013 0308 	ands.w	r3, r3, #8
 80076ec:	d130      	bne.n	8007750 <_strtoul_l.isra.0+0x86>
 80076ee:	2c2d      	cmp	r4, #45	; 0x2d
 80076f0:	d130      	bne.n	8007754 <_strtoul_l.isra.0+0x8a>
 80076f2:	2101      	movs	r1, #1
 80076f4:	787c      	ldrb	r4, [r7, #1]
 80076f6:	1cbd      	adds	r5, r7, #2
 80076f8:	2e00      	cmp	r6, #0
 80076fa:	d05c      	beq.n	80077b6 <_strtoul_l.isra.0+0xec>
 80076fc:	2e10      	cmp	r6, #16
 80076fe:	d109      	bne.n	8007714 <_strtoul_l.isra.0+0x4a>
 8007700:	2c30      	cmp	r4, #48	; 0x30
 8007702:	d107      	bne.n	8007714 <_strtoul_l.isra.0+0x4a>
 8007704:	782b      	ldrb	r3, [r5, #0]
 8007706:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800770a:	2b58      	cmp	r3, #88	; 0x58
 800770c:	d14e      	bne.n	80077ac <_strtoul_l.isra.0+0xe2>
 800770e:	2610      	movs	r6, #16
 8007710:	786c      	ldrb	r4, [r5, #1]
 8007712:	3502      	adds	r5, #2
 8007714:	f04f 32ff 	mov.w	r2, #4294967295
 8007718:	fbb2 f2f6 	udiv	r2, r2, r6
 800771c:	2300      	movs	r3, #0
 800771e:	fb06 fc02 	mul.w	ip, r6, r2
 8007722:	4618      	mov	r0, r3
 8007724:	ea6f 0c0c 	mvn.w	ip, ip
 8007728:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800772c:	2f09      	cmp	r7, #9
 800772e:	d817      	bhi.n	8007760 <_strtoul_l.isra.0+0x96>
 8007730:	463c      	mov	r4, r7
 8007732:	42a6      	cmp	r6, r4
 8007734:	dd23      	ble.n	800777e <_strtoul_l.isra.0+0xb4>
 8007736:	2b00      	cmp	r3, #0
 8007738:	db1e      	blt.n	8007778 <_strtoul_l.isra.0+0xae>
 800773a:	4282      	cmp	r2, r0
 800773c:	d31c      	bcc.n	8007778 <_strtoul_l.isra.0+0xae>
 800773e:	d101      	bne.n	8007744 <_strtoul_l.isra.0+0x7a>
 8007740:	45a4      	cmp	ip, r4
 8007742:	db19      	blt.n	8007778 <_strtoul_l.isra.0+0xae>
 8007744:	2301      	movs	r3, #1
 8007746:	fb00 4006 	mla	r0, r0, r6, r4
 800774a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800774e:	e7eb      	b.n	8007728 <_strtoul_l.isra.0+0x5e>
 8007750:	462f      	mov	r7, r5
 8007752:	e7c1      	b.n	80076d8 <_strtoul_l.isra.0+0xe>
 8007754:	2c2b      	cmp	r4, #43	; 0x2b
 8007756:	bf04      	itt	eq
 8007758:	1cbd      	addeq	r5, r7, #2
 800775a:	787c      	ldrbeq	r4, [r7, #1]
 800775c:	4619      	mov	r1, r3
 800775e:	e7cb      	b.n	80076f8 <_strtoul_l.isra.0+0x2e>
 8007760:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007764:	2f19      	cmp	r7, #25
 8007766:	d801      	bhi.n	800776c <_strtoul_l.isra.0+0xa2>
 8007768:	3c37      	subs	r4, #55	; 0x37
 800776a:	e7e2      	b.n	8007732 <_strtoul_l.isra.0+0x68>
 800776c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007770:	2f19      	cmp	r7, #25
 8007772:	d804      	bhi.n	800777e <_strtoul_l.isra.0+0xb4>
 8007774:	3c57      	subs	r4, #87	; 0x57
 8007776:	e7dc      	b.n	8007732 <_strtoul_l.isra.0+0x68>
 8007778:	f04f 33ff 	mov.w	r3, #4294967295
 800777c:	e7e5      	b.n	800774a <_strtoul_l.isra.0+0x80>
 800777e:	2b00      	cmp	r3, #0
 8007780:	da09      	bge.n	8007796 <_strtoul_l.isra.0+0xcc>
 8007782:	2322      	movs	r3, #34	; 0x22
 8007784:	f04f 30ff 	mov.w	r0, #4294967295
 8007788:	f8c8 3000 	str.w	r3, [r8]
 800778c:	f1ba 0f00 	cmp.w	sl, #0
 8007790:	d107      	bne.n	80077a2 <_strtoul_l.isra.0+0xd8>
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007796:	b101      	cbz	r1, 800779a <_strtoul_l.isra.0+0xd0>
 8007798:	4240      	negs	r0, r0
 800779a:	f1ba 0f00 	cmp.w	sl, #0
 800779e:	d0f8      	beq.n	8007792 <_strtoul_l.isra.0+0xc8>
 80077a0:	b10b      	cbz	r3, 80077a6 <_strtoul_l.isra.0+0xdc>
 80077a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80077a6:	f8ca 9000 	str.w	r9, [sl]
 80077aa:	e7f2      	b.n	8007792 <_strtoul_l.isra.0+0xc8>
 80077ac:	2430      	movs	r4, #48	; 0x30
 80077ae:	2e00      	cmp	r6, #0
 80077b0:	d1b0      	bne.n	8007714 <_strtoul_l.isra.0+0x4a>
 80077b2:	2608      	movs	r6, #8
 80077b4:	e7ae      	b.n	8007714 <_strtoul_l.isra.0+0x4a>
 80077b6:	2c30      	cmp	r4, #48	; 0x30
 80077b8:	d0a4      	beq.n	8007704 <_strtoul_l.isra.0+0x3a>
 80077ba:	260a      	movs	r6, #10
 80077bc:	e7aa      	b.n	8007714 <_strtoul_l.isra.0+0x4a>
	...

080077c0 <_strtoul_r>:
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	4c06      	ldr	r4, [pc, #24]	; (80077dc <_strtoul_r+0x1c>)
 80077c4:	4d06      	ldr	r5, [pc, #24]	; (80077e0 <_strtoul_r+0x20>)
 80077c6:	6824      	ldr	r4, [r4, #0]
 80077c8:	6a24      	ldr	r4, [r4, #32]
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	bf08      	it	eq
 80077ce:	462c      	moveq	r4, r5
 80077d0:	9400      	str	r4, [sp, #0]
 80077d2:	f7ff ff7a 	bl	80076ca <_strtoul_l.isra.0>
 80077d6:	b003      	add	sp, #12
 80077d8:	bd30      	pop	{r4, r5, pc}
 80077da:	bf00      	nop
 80077dc:	2000000c 	.word	0x2000000c
 80077e0:	20000070 	.word	0x20000070

080077e4 <__submore>:
 80077e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e8:	460c      	mov	r4, r1
 80077ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80077ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f0:	4299      	cmp	r1, r3
 80077f2:	d11b      	bne.n	800782c <__submore+0x48>
 80077f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80077f8:	f7ff f916 	bl	8006a28 <_malloc_r>
 80077fc:	b918      	cbnz	r0, 8007806 <__submore+0x22>
 80077fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780a:	63a3      	str	r3, [r4, #56]	; 0x38
 800780c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007810:	6360      	str	r0, [r4, #52]	; 0x34
 8007812:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007816:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800781a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800781e:	7043      	strb	r3, [r0, #1]
 8007820:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007824:	7003      	strb	r3, [r0, #0]
 8007826:	6020      	str	r0, [r4, #0]
 8007828:	2000      	movs	r0, #0
 800782a:	e7ea      	b.n	8007802 <__submore+0x1e>
 800782c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800782e:	0077      	lsls	r7, r6, #1
 8007830:	463a      	mov	r2, r7
 8007832:	f000 fa0c 	bl	8007c4e <_realloc_r>
 8007836:	4605      	mov	r5, r0
 8007838:	2800      	cmp	r0, #0
 800783a:	d0e0      	beq.n	80077fe <__submore+0x1a>
 800783c:	eb00 0806 	add.w	r8, r0, r6
 8007840:	4601      	mov	r1, r0
 8007842:	4632      	mov	r2, r6
 8007844:	4640      	mov	r0, r8
 8007846:	f7fe fc91 	bl	800616c <memcpy>
 800784a:	f8c4 8000 	str.w	r8, [r4]
 800784e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007852:	e7e9      	b.n	8007828 <__submore+0x44>

08007854 <__swbuf_r>:
 8007854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007856:	460e      	mov	r6, r1
 8007858:	4614      	mov	r4, r2
 800785a:	4605      	mov	r5, r0
 800785c:	b118      	cbz	r0, 8007866 <__swbuf_r+0x12>
 800785e:	6983      	ldr	r3, [r0, #24]
 8007860:	b90b      	cbnz	r3, 8007866 <__swbuf_r+0x12>
 8007862:	f7fe f875 	bl	8005950 <__sinit>
 8007866:	4b21      	ldr	r3, [pc, #132]	; (80078ec <__swbuf_r+0x98>)
 8007868:	429c      	cmp	r4, r3
 800786a:	d12a      	bne.n	80078c2 <__swbuf_r+0x6e>
 800786c:	686c      	ldr	r4, [r5, #4]
 800786e:	69a3      	ldr	r3, [r4, #24]
 8007870:	60a3      	str	r3, [r4, #8]
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	071a      	lsls	r2, r3, #28
 8007876:	d52e      	bpl.n	80078d6 <__swbuf_r+0x82>
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	b363      	cbz	r3, 80078d6 <__swbuf_r+0x82>
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	6820      	ldr	r0, [r4, #0]
 8007880:	b2f6      	uxtb	r6, r6
 8007882:	1ac0      	subs	r0, r0, r3
 8007884:	6963      	ldr	r3, [r4, #20]
 8007886:	4637      	mov	r7, r6
 8007888:	4283      	cmp	r3, r0
 800788a:	dc04      	bgt.n	8007896 <__swbuf_r+0x42>
 800788c:	4621      	mov	r1, r4
 800788e:	4628      	mov	r0, r5
 8007890:	f000 f934 	bl	8007afc <_fflush_r>
 8007894:	bb28      	cbnz	r0, 80078e2 <__swbuf_r+0x8e>
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	3001      	adds	r0, #1
 800789a:	3b01      	subs	r3, #1
 800789c:	60a3      	str	r3, [r4, #8]
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	6022      	str	r2, [r4, #0]
 80078a4:	701e      	strb	r6, [r3, #0]
 80078a6:	6963      	ldr	r3, [r4, #20]
 80078a8:	4283      	cmp	r3, r0
 80078aa:	d004      	beq.n	80078b6 <__swbuf_r+0x62>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	07db      	lsls	r3, r3, #31
 80078b0:	d519      	bpl.n	80078e6 <__swbuf_r+0x92>
 80078b2:	2e0a      	cmp	r6, #10
 80078b4:	d117      	bne.n	80078e6 <__swbuf_r+0x92>
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 f91f 	bl	8007afc <_fflush_r>
 80078be:	b190      	cbz	r0, 80078e6 <__swbuf_r+0x92>
 80078c0:	e00f      	b.n	80078e2 <__swbuf_r+0x8e>
 80078c2:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <__swbuf_r+0x9c>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	d101      	bne.n	80078cc <__swbuf_r+0x78>
 80078c8:	68ac      	ldr	r4, [r5, #8]
 80078ca:	e7d0      	b.n	800786e <__swbuf_r+0x1a>
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <__swbuf_r+0xa0>)
 80078ce:	429c      	cmp	r4, r3
 80078d0:	bf08      	it	eq
 80078d2:	68ec      	ldreq	r4, [r5, #12]
 80078d4:	e7cb      	b.n	800786e <__swbuf_r+0x1a>
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 f81b 	bl	8007914 <__swsetup_r>
 80078de:	2800      	cmp	r0, #0
 80078e0:	d0cc      	beq.n	800787c <__swbuf_r+0x28>
 80078e2:	f04f 37ff 	mov.w	r7, #4294967295
 80078e6:	4638      	mov	r0, r7
 80078e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ea:	bf00      	nop
 80078ec:	08007fc0 	.word	0x08007fc0
 80078f0:	08007fe0 	.word	0x08007fe0
 80078f4:	08007fa0 	.word	0x08007fa0

080078f8 <__ascii_wctomb>:
 80078f8:	b149      	cbz	r1, 800790e <__ascii_wctomb+0x16>
 80078fa:	2aff      	cmp	r2, #255	; 0xff
 80078fc:	bf8b      	itete	hi
 80078fe:	238a      	movhi	r3, #138	; 0x8a
 8007900:	700a      	strbls	r2, [r1, #0]
 8007902:	6003      	strhi	r3, [r0, #0]
 8007904:	2001      	movls	r0, #1
 8007906:	bf88      	it	hi
 8007908:	f04f 30ff 	movhi.w	r0, #4294967295
 800790c:	4770      	bx	lr
 800790e:	4608      	mov	r0, r1
 8007910:	4770      	bx	lr
	...

08007914 <__swsetup_r>:
 8007914:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <__swsetup_r+0xcc>)
 8007916:	b570      	push	{r4, r5, r6, lr}
 8007918:	681d      	ldr	r5, [r3, #0]
 800791a:	4606      	mov	r6, r0
 800791c:	460c      	mov	r4, r1
 800791e:	b125      	cbz	r5, 800792a <__swsetup_r+0x16>
 8007920:	69ab      	ldr	r3, [r5, #24]
 8007922:	b913      	cbnz	r3, 800792a <__swsetup_r+0x16>
 8007924:	4628      	mov	r0, r5
 8007926:	f7fe f813 	bl	8005950 <__sinit>
 800792a:	4b2e      	ldr	r3, [pc, #184]	; (80079e4 <__swsetup_r+0xd0>)
 800792c:	429c      	cmp	r4, r3
 800792e:	d10f      	bne.n	8007950 <__swsetup_r+0x3c>
 8007930:	686c      	ldr	r4, [r5, #4]
 8007932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007936:	b29a      	uxth	r2, r3
 8007938:	0715      	lsls	r5, r2, #28
 800793a:	d42c      	bmi.n	8007996 <__swsetup_r+0x82>
 800793c:	06d0      	lsls	r0, r2, #27
 800793e:	d411      	bmi.n	8007964 <__swsetup_r+0x50>
 8007940:	2209      	movs	r2, #9
 8007942:	6032      	str	r2, [r6, #0]
 8007944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	e03e      	b.n	80079ce <__swsetup_r+0xba>
 8007950:	4b25      	ldr	r3, [pc, #148]	; (80079e8 <__swsetup_r+0xd4>)
 8007952:	429c      	cmp	r4, r3
 8007954:	d101      	bne.n	800795a <__swsetup_r+0x46>
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	e7eb      	b.n	8007932 <__swsetup_r+0x1e>
 800795a:	4b24      	ldr	r3, [pc, #144]	; (80079ec <__swsetup_r+0xd8>)
 800795c:	429c      	cmp	r4, r3
 800795e:	bf08      	it	eq
 8007960:	68ec      	ldreq	r4, [r5, #12]
 8007962:	e7e6      	b.n	8007932 <__swsetup_r+0x1e>
 8007964:	0751      	lsls	r1, r2, #29
 8007966:	d512      	bpl.n	800798e <__swsetup_r+0x7a>
 8007968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800796a:	b141      	cbz	r1, 800797e <__swsetup_r+0x6a>
 800796c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007970:	4299      	cmp	r1, r3
 8007972:	d002      	beq.n	800797a <__swsetup_r+0x66>
 8007974:	4630      	mov	r0, r6
 8007976:	f7ff f80b 	bl	8006990 <_free_r>
 800797a:	2300      	movs	r3, #0
 800797c:	6363      	str	r3, [r4, #52]	; 0x34
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007984:	81a3      	strh	r3, [r4, #12]
 8007986:	2300      	movs	r3, #0
 8007988:	6063      	str	r3, [r4, #4]
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	f043 0308 	orr.w	r3, r3, #8
 8007994:	81a3      	strh	r3, [r4, #12]
 8007996:	6923      	ldr	r3, [r4, #16]
 8007998:	b94b      	cbnz	r3, 80079ae <__swsetup_r+0x9a>
 800799a:	89a3      	ldrh	r3, [r4, #12]
 800799c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a4:	d003      	beq.n	80079ae <__swsetup_r+0x9a>
 80079a6:	4621      	mov	r1, r4
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f8f5 	bl	8007b98 <__smakebuf_r>
 80079ae:	89a2      	ldrh	r2, [r4, #12]
 80079b0:	f012 0301 	ands.w	r3, r2, #1
 80079b4:	d00c      	beq.n	80079d0 <__swsetup_r+0xbc>
 80079b6:	2300      	movs	r3, #0
 80079b8:	60a3      	str	r3, [r4, #8]
 80079ba:	6963      	ldr	r3, [r4, #20]
 80079bc:	425b      	negs	r3, r3
 80079be:	61a3      	str	r3, [r4, #24]
 80079c0:	6923      	ldr	r3, [r4, #16]
 80079c2:	b953      	cbnz	r3, 80079da <__swsetup_r+0xc6>
 80079c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80079cc:	d1ba      	bne.n	8007944 <__swsetup_r+0x30>
 80079ce:	bd70      	pop	{r4, r5, r6, pc}
 80079d0:	0792      	lsls	r2, r2, #30
 80079d2:	bf58      	it	pl
 80079d4:	6963      	ldrpl	r3, [r4, #20]
 80079d6:	60a3      	str	r3, [r4, #8]
 80079d8:	e7f2      	b.n	80079c0 <__swsetup_r+0xac>
 80079da:	2000      	movs	r0, #0
 80079dc:	e7f7      	b.n	80079ce <__swsetup_r+0xba>
 80079de:	bf00      	nop
 80079e0:	2000000c 	.word	0x2000000c
 80079e4:	08007fc0 	.word	0x08007fc0
 80079e8:	08007fe0 	.word	0x08007fe0
 80079ec:	08007fa0 	.word	0x08007fa0

080079f0 <__sflush_r>:
 80079f0:	898a      	ldrh	r2, [r1, #12]
 80079f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f6:	4605      	mov	r5, r0
 80079f8:	0710      	lsls	r0, r2, #28
 80079fa:	460c      	mov	r4, r1
 80079fc:	d458      	bmi.n	8007ab0 <__sflush_r+0xc0>
 80079fe:	684b      	ldr	r3, [r1, #4]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dc05      	bgt.n	8007a10 <__sflush_r+0x20>
 8007a04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dc02      	bgt.n	8007a10 <__sflush_r+0x20>
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a12:	2e00      	cmp	r6, #0
 8007a14:	d0f9      	beq.n	8007a0a <__sflush_r+0x1a>
 8007a16:	2300      	movs	r3, #0
 8007a18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a1c:	682f      	ldr	r7, [r5, #0]
 8007a1e:	6a21      	ldr	r1, [r4, #32]
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	d032      	beq.n	8007a8a <__sflush_r+0x9a>
 8007a24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	075a      	lsls	r2, r3, #29
 8007a2a:	d505      	bpl.n	8007a38 <__sflush_r+0x48>
 8007a2c:	6863      	ldr	r3, [r4, #4]
 8007a2e:	1ac0      	subs	r0, r0, r3
 8007a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a32:	b10b      	cbz	r3, 8007a38 <__sflush_r+0x48>
 8007a34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a36:	1ac0      	subs	r0, r0, r3
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a3e:	6a21      	ldr	r1, [r4, #32]
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b0      	blx	r6
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	d106      	bne.n	8007a58 <__sflush_r+0x68>
 8007a4a:	6829      	ldr	r1, [r5, #0]
 8007a4c:	291d      	cmp	r1, #29
 8007a4e:	d848      	bhi.n	8007ae2 <__sflush_r+0xf2>
 8007a50:	4a29      	ldr	r2, [pc, #164]	; (8007af8 <__sflush_r+0x108>)
 8007a52:	40ca      	lsrs	r2, r1
 8007a54:	07d6      	lsls	r6, r2, #31
 8007a56:	d544      	bpl.n	8007ae2 <__sflush_r+0xf2>
 8007a58:	2200      	movs	r2, #0
 8007a5a:	6062      	str	r2, [r4, #4]
 8007a5c:	6922      	ldr	r2, [r4, #16]
 8007a5e:	04d9      	lsls	r1, r3, #19
 8007a60:	6022      	str	r2, [r4, #0]
 8007a62:	d504      	bpl.n	8007a6e <__sflush_r+0x7e>
 8007a64:	1c42      	adds	r2, r0, #1
 8007a66:	d101      	bne.n	8007a6c <__sflush_r+0x7c>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b903      	cbnz	r3, 8007a6e <__sflush_r+0x7e>
 8007a6c:	6560      	str	r0, [r4, #84]	; 0x54
 8007a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a70:	602f      	str	r7, [r5, #0]
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d0c9      	beq.n	8007a0a <__sflush_r+0x1a>
 8007a76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	d002      	beq.n	8007a84 <__sflush_r+0x94>
 8007a7e:	4628      	mov	r0, r5
 8007a80:	f7fe ff86 	bl	8006990 <_free_r>
 8007a84:	2000      	movs	r0, #0
 8007a86:	6360      	str	r0, [r4, #52]	; 0x34
 8007a88:	e7c0      	b.n	8007a0c <__sflush_r+0x1c>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b0      	blx	r6
 8007a90:	1c41      	adds	r1, r0, #1
 8007a92:	d1c8      	bne.n	8007a26 <__sflush_r+0x36>
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0c5      	beq.n	8007a26 <__sflush_r+0x36>
 8007a9a:	2b1d      	cmp	r3, #29
 8007a9c:	d001      	beq.n	8007aa2 <__sflush_r+0xb2>
 8007a9e:	2b16      	cmp	r3, #22
 8007aa0:	d101      	bne.n	8007aa6 <__sflush_r+0xb6>
 8007aa2:	602f      	str	r7, [r5, #0]
 8007aa4:	e7b1      	b.n	8007a0a <__sflush_r+0x1a>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	e7ad      	b.n	8007a0c <__sflush_r+0x1c>
 8007ab0:	690f      	ldr	r7, [r1, #16]
 8007ab2:	2f00      	cmp	r7, #0
 8007ab4:	d0a9      	beq.n	8007a0a <__sflush_r+0x1a>
 8007ab6:	0793      	lsls	r3, r2, #30
 8007ab8:	bf18      	it	ne
 8007aba:	2300      	movne	r3, #0
 8007abc:	680e      	ldr	r6, [r1, #0]
 8007abe:	bf08      	it	eq
 8007ac0:	694b      	ldreq	r3, [r1, #20]
 8007ac2:	eba6 0807 	sub.w	r8, r6, r7
 8007ac6:	600f      	str	r7, [r1, #0]
 8007ac8:	608b      	str	r3, [r1, #8]
 8007aca:	f1b8 0f00 	cmp.w	r8, #0
 8007ace:	dd9c      	ble.n	8007a0a <__sflush_r+0x1a>
 8007ad0:	4643      	mov	r3, r8
 8007ad2:	463a      	mov	r2, r7
 8007ad4:	6a21      	ldr	r1, [r4, #32]
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ada:	47b0      	blx	r6
 8007adc:	2800      	cmp	r0, #0
 8007ade:	dc06      	bgt.n	8007aee <__sflush_r+0xfe>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e78e      	b.n	8007a0c <__sflush_r+0x1c>
 8007aee:	4407      	add	r7, r0
 8007af0:	eba8 0800 	sub.w	r8, r8, r0
 8007af4:	e7e9      	b.n	8007aca <__sflush_r+0xda>
 8007af6:	bf00      	nop
 8007af8:	20400001 	.word	0x20400001

08007afc <_fflush_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	690b      	ldr	r3, [r1, #16]
 8007b00:	4605      	mov	r5, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	b1db      	cbz	r3, 8007b3e <_fflush_r+0x42>
 8007b06:	b118      	cbz	r0, 8007b10 <_fflush_r+0x14>
 8007b08:	6983      	ldr	r3, [r0, #24]
 8007b0a:	b90b      	cbnz	r3, 8007b10 <_fflush_r+0x14>
 8007b0c:	f7fd ff20 	bl	8005950 <__sinit>
 8007b10:	4b0c      	ldr	r3, [pc, #48]	; (8007b44 <_fflush_r+0x48>)
 8007b12:	429c      	cmp	r4, r3
 8007b14:	d109      	bne.n	8007b2a <_fflush_r+0x2e>
 8007b16:	686c      	ldr	r4, [r5, #4]
 8007b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b1c:	b17b      	cbz	r3, 8007b3e <_fflush_r+0x42>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b26:	f7ff bf63 	b.w	80079f0 <__sflush_r>
 8007b2a:	4b07      	ldr	r3, [pc, #28]	; (8007b48 <_fflush_r+0x4c>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	d101      	bne.n	8007b34 <_fflush_r+0x38>
 8007b30:	68ac      	ldr	r4, [r5, #8]
 8007b32:	e7f1      	b.n	8007b18 <_fflush_r+0x1c>
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <_fflush_r+0x50>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	bf08      	it	eq
 8007b3a:	68ec      	ldreq	r4, [r5, #12]
 8007b3c:	e7ec      	b.n	8007b18 <_fflush_r+0x1c>
 8007b3e:	2000      	movs	r0, #0
 8007b40:	bd38      	pop	{r3, r4, r5, pc}
 8007b42:	bf00      	nop
 8007b44:	08007fc0 	.word	0x08007fc0
 8007b48:	08007fe0 	.word	0x08007fe0
 8007b4c:	08007fa0 	.word	0x08007fa0

08007b50 <__swhatbuf_r>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	460e      	mov	r6, r1
 8007b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b58:	b096      	sub	sp, #88	; 0x58
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	461d      	mov	r5, r3
 8007b60:	da07      	bge.n	8007b72 <__swhatbuf_r+0x22>
 8007b62:	2300      	movs	r3, #0
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	89b3      	ldrh	r3, [r6, #12]
 8007b68:	061a      	lsls	r2, r3, #24
 8007b6a:	d410      	bmi.n	8007b8e <__swhatbuf_r+0x3e>
 8007b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b70:	e00e      	b.n	8007b90 <__swhatbuf_r+0x40>
 8007b72:	466a      	mov	r2, sp
 8007b74:	f000 f892 	bl	8007c9c <_fstat_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	dbf2      	blt.n	8007b62 <__swhatbuf_r+0x12>
 8007b7c:	9a01      	ldr	r2, [sp, #4]
 8007b7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b86:	425a      	negs	r2, r3
 8007b88:	415a      	adcs	r2, r3
 8007b8a:	602a      	str	r2, [r5, #0]
 8007b8c:	e7ee      	b.n	8007b6c <__swhatbuf_r+0x1c>
 8007b8e:	2340      	movs	r3, #64	; 0x40
 8007b90:	2000      	movs	r0, #0
 8007b92:	6023      	str	r3, [r4, #0]
 8007b94:	b016      	add	sp, #88	; 0x58
 8007b96:	bd70      	pop	{r4, r5, r6, pc}

08007b98 <__smakebuf_r>:
 8007b98:	898b      	ldrh	r3, [r1, #12]
 8007b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b9c:	079d      	lsls	r5, r3, #30
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	d507      	bpl.n	8007bb4 <__smakebuf_r+0x1c>
 8007ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	2301      	movs	r3, #1
 8007bae:	6163      	str	r3, [r4, #20]
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	ab01      	add	r3, sp, #4
 8007bb6:	466a      	mov	r2, sp
 8007bb8:	f7ff ffca 	bl	8007b50 <__swhatbuf_r>
 8007bbc:	9900      	ldr	r1, [sp, #0]
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7fe ff31 	bl	8006a28 <_malloc_r>
 8007bc6:	b948      	cbnz	r0, 8007bdc <__smakebuf_r+0x44>
 8007bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bcc:	059a      	lsls	r2, r3, #22
 8007bce:	d4ef      	bmi.n	8007bb0 <__smakebuf_r+0x18>
 8007bd0:	f023 0303 	bic.w	r3, r3, #3
 8007bd4:	f043 0302 	orr.w	r3, r3, #2
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	e7e3      	b.n	8007ba4 <__smakebuf_r+0xc>
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <__smakebuf_r+0x7c>)
 8007bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	6020      	str	r0, [r4, #0]
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	6120      	str	r0, [r4, #16]
 8007bee:	6163      	str	r3, [r4, #20]
 8007bf0:	9b01      	ldr	r3, [sp, #4]
 8007bf2:	b15b      	cbz	r3, 8007c0c <__smakebuf_r+0x74>
 8007bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 f861 	bl	8007cc0 <_isatty_r>
 8007bfe:	b128      	cbz	r0, 8007c0c <__smakebuf_r+0x74>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f023 0303 	bic.w	r3, r3, #3
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	89a3      	ldrh	r3, [r4, #12]
 8007c0e:	431d      	orrs	r5, r3
 8007c10:	81a5      	strh	r5, [r4, #12]
 8007c12:	e7cd      	b.n	8007bb0 <__smakebuf_r+0x18>
 8007c14:	08005919 	.word	0x08005919

08007c18 <memmove>:
 8007c18:	4288      	cmp	r0, r1
 8007c1a:	b510      	push	{r4, lr}
 8007c1c:	eb01 0302 	add.w	r3, r1, r2
 8007c20:	d807      	bhi.n	8007c32 <memmove+0x1a>
 8007c22:	1e42      	subs	r2, r0, #1
 8007c24:	4299      	cmp	r1, r3
 8007c26:	d00a      	beq.n	8007c3e <memmove+0x26>
 8007c28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c30:	e7f8      	b.n	8007c24 <memmove+0xc>
 8007c32:	4283      	cmp	r3, r0
 8007c34:	d9f5      	bls.n	8007c22 <memmove+0xa>
 8007c36:	1881      	adds	r1, r0, r2
 8007c38:	1ad2      	subs	r2, r2, r3
 8007c3a:	42d3      	cmn	r3, r2
 8007c3c:	d100      	bne.n	8007c40 <memmove+0x28>
 8007c3e:	bd10      	pop	{r4, pc}
 8007c40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c48:	e7f7      	b.n	8007c3a <memmove+0x22>

08007c4a <__malloc_lock>:
 8007c4a:	4770      	bx	lr

08007c4c <__malloc_unlock>:
 8007c4c:	4770      	bx	lr

08007c4e <_realloc_r>:
 8007c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c50:	4607      	mov	r7, r0
 8007c52:	4614      	mov	r4, r2
 8007c54:	460e      	mov	r6, r1
 8007c56:	b921      	cbnz	r1, 8007c62 <_realloc_r+0x14>
 8007c58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	f7fe bee3 	b.w	8006a28 <_malloc_r>
 8007c62:	b922      	cbnz	r2, 8007c6e <_realloc_r+0x20>
 8007c64:	f7fe fe94 	bl	8006990 <_free_r>
 8007c68:	4625      	mov	r5, r4
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c6e:	f000 f837 	bl	8007ce0 <_malloc_usable_size_r>
 8007c72:	42a0      	cmp	r0, r4
 8007c74:	d20f      	bcs.n	8007c96 <_realloc_r+0x48>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7fe fed5 	bl	8006a28 <_malloc_r>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	2800      	cmp	r0, #0
 8007c82:	d0f2      	beq.n	8007c6a <_realloc_r+0x1c>
 8007c84:	4631      	mov	r1, r6
 8007c86:	4622      	mov	r2, r4
 8007c88:	f7fe fa70 	bl	800616c <memcpy>
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	4638      	mov	r0, r7
 8007c90:	f7fe fe7e 	bl	8006990 <_free_r>
 8007c94:	e7e9      	b.n	8007c6a <_realloc_r+0x1c>
 8007c96:	4635      	mov	r5, r6
 8007c98:	e7e7      	b.n	8007c6a <_realloc_r+0x1c>
	...

08007c9c <_fstat_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4c06      	ldr	r4, [pc, #24]	; (8007cbc <_fstat_r+0x20>)
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	f7f9 fc1f 	bl	80014ec <_fstat>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d102      	bne.n	8007cb8 <_fstat_r+0x1c>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	b103      	cbz	r3, 8007cb8 <_fstat_r+0x1c>
 8007cb6:	602b      	str	r3, [r5, #0]
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	20000564 	.word	0x20000564

08007cc0 <_isatty_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	4c05      	ldr	r4, [pc, #20]	; (8007cdc <_isatty_r+0x1c>)
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	6023      	str	r3, [r4, #0]
 8007ccc:	f7f9 fc1d 	bl	800150a <_isatty>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_isatty_r+0x1a>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_isatty_r+0x1a>
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	20000564 	.word	0x20000564

08007ce0 <_malloc_usable_size_r>:
 8007ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ce4:	1f18      	subs	r0, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bfbc      	itt	lt
 8007cea:	580b      	ldrlt	r3, [r1, r0]
 8007cec:	18c0      	addlt	r0, r0, r3
 8007cee:	4770      	bx	lr

08007cf0 <_init>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr

08007cfc <_fini>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr
